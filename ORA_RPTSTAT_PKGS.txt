CREATE OR REPLACE PACKAGE RPTSTAT.Import_Stats AS
/******************************************************************************
   NAME:       ImportStats
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/9/2016      dpeters       1. Created this package.
******************************************************************************/

    PROCEDURE a_Import (v_Date IN Date, v_Import_Flags_IN IN varchar2 );
    
    Procedure Import_Check_Import_Dates (v_Date IN Date, v_Import_Flags IN VARCHAR2, v_return_value   OUT VARCHAR2);

    PROCEDURE collect_PA_driver_data (v_DATE IN DATE); 
    
    FUNCTION Get_PA_Assigned_Driver (
                                  v_POLICY_NUM        IN      VARCHAR2,
                                  v_ITEM_NUM          IN      NUMBER,
                                  v_EFF_DATE          IN      DATE,
                                  v_EXP_DATE          IN      DATE,
                                  v_ACT_DATE          IN      DATE,
                                  v_OLD_NEW           IN      VARCHAR2,
                                  f_DR_ASSIGN         OUT     NUMBER,
                                  f_VIN               OUT     VARCHAR2
                                 )


    RETURN NUMBER;
    
    FUNCTION Get_PA_License_Number (
                                  v_POLICY_NUM        IN      VARCHAR2,
                                  v_DR_ASSIGN         IN      NUMBER,
                                  v_EFF_DATE          IN      DATE,
                                  v_EXP_DATE          IN      DATE,
                                  v_ACT_DATE          IN      DATE,
                                  v_OLD_NEW           IN      VARCHAR2,
                                  f_LICENSE_NUM       OUT     VARCHAR2
                                )


    RETURN NUMBER;
    
END Import_Stats;
/


CREATE OR REPLACE PACKAGE RPTSTAT.ND_BUREAU
AS
   /******************************************************************************
      NAME:       ND_HO_BUREAU
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0       12/22/2014     D.Bohlman       1. Created this package.
   ******************************************************************************/
-- PROGRAM CONSTANTS

--  v_rept_end_date         VARCHAR2 (8) := v_reporting_yymm || '31';
  
   PROCEDURE a_Main (v_quarter in number ,v_year in number, v_type in varchar2, v_line in varchar2);
   PROCEDURE Premiums (v_quarter in number ,v_year in number, v_line in varchar2);
   PROCEDURE Claims (v_quarter in number ,v_year in number, v_line in varchar2);
    PROCEDURE collect_prem_mso_fo_data_loop;
    PROCEDURE collect_prem_mso_ho_data_loop;
    Procedure collect_prem_mso_im_data_loop;
    PROCEDURE collect_prem_mso_pu_data_loop;
    PROCEDURE summarize_prem_mso_fo_data;
    PROCEDURE summ_fo_data_again;
    PROCEDURE summarize_prem_mso_ho_data;
    PROCEDURE summ_ho_data_again;
    PROCEDURE summarize_prem_mso_im_data;
    PROCEDURE summ_im_data_again;
    PROCEDURE summarize_prem_mso_pu_data;
    PROCEDURE summ_pu_data_again;
    PROCEDURE update_mid_term_changes;
    PROCEDURE collect_claim_fo_paid;
    PROCEDURE collect_claim_fo_outstanding;
    PROCEDURE collect_claim_ho_paid;
    PROCEDURE collect_claim_ho_outstanding;
    Procedure collect_claim_im_paid;
    PROCEDURE collect_claim_IM_outstanding;
    PROCEDURE collect_claim_pu_paid;
    PROCEDURE collect_claim_PU_outstanding;
    procedure summ_claim_mso_fo_data;
    procedure summ_claim_mso_ho_data;
    procedure summ_claim_mso_pu_data;
    procedure summ_claim_mso_im_data;
    PROCEDURE update_claim_count;
    PROCEDURE get_trans_code (v_in_trans_code in varchar2,
                              v_in_old_new_stat in varchar2,
                              v_in_chg_date in date, 
                              v_in_eff_date in date,
                              v_out_trans_code  out varchar2);
   PROCEDURE convert_territory_ho (v_in_terr in varchar,
                                    v_out_terr  out varchar);
   PROCEDURE get_homeowners_stat  (v_company in varchar2,
                                  v_state_cd in varchar2,
                                  v_group_line in varchar2,
                                  v_eff_date in date,
                                  v_exp_date in date,
                                  v_book_date in date,
                                  v_actg_date in date,
                                  v_chg_date in date,
                                  v_item_state_cd in varchar2,
                                  v_location in varchar2,
                                  v_item_num in varchar2,
                                  v_policy_number in varchar2,
                                  v_old_new_stat in varchar2,
                                  v_proc_ctr in varchar2,    
                                  v_trans_code in varchar2,   
                                  v_sdac_ind in varchar2,    
                                  v_item_dwell_code out varchar2,
                                  v_item_terr out varchar2,
                                  v_item_families out varchar2,
                                  v_item_row_town out varchar2);   
     PROCEDURE get_endorsement_at_loss                              
                                    ( v_eff_date in date,
                                     v_exp_date in date, 
                                     v_actg_date in date,
                                     v_loss_date in date, 
                                     v_user_line in varchar2, 
                                     v_policy_number in varchar2, 
                                     v_end_num in varchar2,
                                     v_return_value out varchar2,
                                     v_return_parm1 out varchar2);   
    procedure   get_endorsement_master ( v_eff_date in date,
                                     v_exp_date in date, 
                                     v_actg_date in date,
                                     v_chg_date in date, 
                                     v_user_line in varchar2, 
                                     v_policy_number in varchar2, 
                                     v_end_num in varchar2,
                                     v_return_value out varchar2,
                                     v_return_parm1 out varchar2,
                                     v_return_limit out varchar2);   
    PROCEDURE get_item_master (      v_eff_date in date,
                                     v_exp_date in date, 
                                     v_actg_date in date,
                                     v_chg_date in date, 
                                     v_user_line in varchar2, 
                                     v_policy_number in varchar2, 
                                     v_item_number in number,
                                      v_class_code out varchar2,
                                      v_prot_class out varchar2,
                                      v_total_prem out number,
                                     v_return_value out varchar2);
    PROCEDURE get_item_master_fo_class_code (      v_eff_date in date,
                                     v_exp_date in date, 
                                     v_actg_date in date,
                                     v_chg_date in date, 
                                     v_user_line in varchar2, 
                                     v_policy_number in varchar2, 
                                     v_item_number in number,
                                      v_class_code out varchar2,
                                      v_prot_class out varchar2,
                                      v_total_prem out number,
                                     v_return_value out varchar2);
     PROCEDURE get_limits_master     ( v_eff_date in date,
                                     v_exp_date in date, 
                                     v_actg_date in date,
                                     v_chg_date in date, 
                                     v_user_line in varchar2, 
                                     v_policy_number in varchar2, 
                                     v_cov_code in varchar2,
                                     v_limit out varchar2); 
     PROCEDURE get_limits_master_for_loss                             
                                    ( v_eff_date in date,
                                     v_exp_date in date, 
                                     v_actg_date in date,
                                     v_loss_date in date, 
                                     v_user_line in varchar2, 
                                     v_policy_number in varchar2, 
                                     v_cov_code in varchar2,
                                     v_limit out varchar2); 
    PROCEDURE get_item_master_for_loss                               
                                    ( v_eff_date in date,
                                     v_exp_date in date, 
                                     v_actg_date in date,
                                     v_loss_date in date, 
                                     v_user_line in varchar2, 
                                     v_policy_number in varchar2, 
                                     v_item_number in number,
                                     v_number_families out varchar2,
                                     v_dwell_code out varchar2,
                                     v_class_code out varchar2);                                      
   PROCEDURE Generate_file_0056;
   PROCEDURE Generate_file_0060;
   PROCEDURE WRITE_FIXED_FILE_LOZ(  p_type in varchar2,
                                    p_out_paid in varchar2,
                                    p_loss_exp in varchar2,
                                    p_query   IN VARCHAR2,
                                    p_dir            IN VARCHAR2,
                                    p_filename       IN VARCHAR2,
                                    p_fopen_fl       IN VARCHAR2,
                                    p_max_linesize   IN NUMBER ,
                                    v_numRecs        out number,
                                --    v_total_prem_out  out number,
                                 --   v_total_num_out   out number);
                                      v_total_amt_1 out number,
                                      v_total_amt_2 out number,
                                      v_total_amt_3 out number
                                      );
   PROCEDURE get_loss_type  (v_in_cov_code in varchar2, 
                             v_in_loss_type in varchar2 ,
                             v_out_loss_type  out varchar2); 
   PROCEDURE get_loss_type_fo  (v_in_cov_code in varchar2, 
                                v_in_loss_type in varchar2 ,
                                v_out_loss_type  out varchar2); 
   FUNCTION Get_FO_MSO_Type_Loss (v_claim_number   IN     VARCHAR2,
                                  v_class_code     IN     VARCHAR2,
                                  v_Cov_Code       IN     VARCHAR2,
                                  v_end_date       IN     DATE)
      RETURN VARCHAR2;
   FUNCTION Get_HO_MSO_Type_Loss (v_claim_number   IN     VARCHAR2,
                                  v_class_code     IN     VARCHAR2,
                                  v_Cov_Code       IN     VARCHAR2,
                                  v_end_date       IN     DATE)
      RETURN VARCHAR2;
   FUNCTION Get_IM_MSO_Type_Loss (v_claim_number   IN     VARCHAR2,
                                  v_class_code     IN     VARCHAR2,
                                  v_Cov_Code       IN     VARCHAR2,
                                  v_end_date       IN     DATE)
      RETURN VARCHAR2;
   FUNCTION Get_PU_MSO_Type_Loss (v_claim_number   IN     VARCHAR2,
                                  v_class_code     IN     VARCHAR2,
                                  v_Cov_Code       IN     VARCHAR2,
                                  v_end_date       IN     DATE)
      RETURN VARCHAR2;
END ND_BUREAU;
/


CREATE OR REPLACE PACKAGE RPTSTAT.ND_BUREAU_CAR
AS
   /******************************************************************************
      NAME:       ND_Bureau_CAR
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        12/22/2014   D.PETERS        1. Created package shell.
      1.0        07/08/2016   R.CRAWFORD      2. Modified to create CAR package.
      1.0        10/06/2016   R.CRAWFORD      3. Ready for promotion.
      
   ******************************************************************************/
   -- PROGRAM CONSTANTS


    PROCEDURE a_Main (v_month    IN NUMBER,
                     v_year      IN NUMBER,
                     v_type      IN VARCHAR2);

    PROCEDURE Premiums (v_month    IN NUMBER,
                       v_year      IN NUMBER,
                       v_line      IN VARCHAR2);

    PROCEDURE Claims (v_month      IN NUMBER,
                       v_year      IN NUMBER,
                       v_line      IN VARCHAR2);

    PROCEDURE collect_prem_car_ma_data_loop;


    PROCEDURE collect_claim_car_ma_paid;


    PROCEDURE collect_claim_car_ma_osls;
    
   -- Added 11/16/2017 
    PROCEDURE collect_prem_ma_pm (v_dir         IN     VARCHAR2,
                                  v_begin_date  IN     DATE,
                                  v_end_date    IN     DATE);


    PROCEDURE collect_claim_ma_8x_totals (v_dir     IN     VARCHAR2,
                                          v_begin_date  IN     DATE,
                                          v_end_date    IN     DATE);


    PROCEDURE summarize_car_prem_data;


    PROCEDURE summarize_car_prem_data_2010;


    PROCEDURE summarize_car_prem_summ;


    PROCEDURE update_car_ixpolvin_summ;


    Function CAR_Date_Conv(v_date_in in Date, v_CAR_Format_in  in VarChar2)
      RETURN VarChar2;


    FUNCTION ISO_Signed_Number (v_num_in IN Number, v_len in Number)
      RETURN VARCHAR2;


    FUNCTION Get_CAR_Vehicle_Data ( v_POLICY_NUMBER     IN      VARCHAR2,
                                    v_GROUP_LINE        IN      VARCHAR2,
                                    v_ITEM_NUM          IN      VARCHAR2,
                                    v_OLD_NEW           IN      VARCHAR2,
                                    v_EFF_DATE          IN      DATE,
                                    v_ACT_DATE          IN      DATE,
                                    v_IDENT_NUM         IN      VARCHAR2,
                                    r_LIST_MARKET       OUT     NUMBER,
                                    r_CENTURY           OUT     VARCHAR2,
                                    r_MODEL_YEAR        OUT     VARCHAR2 )

    RETURN VARCHAR2;


    FUNCTION Get_CAR_OSLS_TotalPartialInd ( v_POLICY_NUMBER     IN      VARCHAR2,
                                            v_CLAIM_NUMBER      IN      VARCHAR2,
                                            v_CLAIMANT_NUMBER   IN      VARCHAR2,
                                            v_ITEM_NUM          IN      VARCHAR2,
                                            v_COVERAGE_CODE     IN      VARCHAR2,
                                            v_DAC_IND           IN      VARCHAR2,
                                            v_END_DATE          IN      DATE )

    RETURN VARCHAR2;


    FUNCTION Update_IXPOLVIN ( v_POLICY            IN      VARCHAR2,
                               v_VIN               IN      VARCHAR2,
                               v_RISK              IN      VARCHAR2,
                               v_TOWN              IN      VARCHAR2,
                               v_ZIP_CODE          IN      VARCHAR2,
                               v_DISCOUNT          IN      VARCHAR2,
                               v_YEAR              IN      VARCHAR2,
                               v_CAR_ID            IN      VARCHAR2 )

    RETURN NUMBER;


    FUNCTION Get_IXPOLVIN_Values ( v_POLICY         IN      VARCHAR2,
                                   v_EFF_YR         IN      VARCHAR2,
                                   v_VIN            IN      VARCHAR2,
                                   r_IX_RISK        OUT     VARCHAR2,
                                   r_IX_TOWN        OUT     VARCHAR2,
                                   r_IX_ZIP_CODE    OUT     VARCHAR2,
                                   r_IX_DISCOUNT    OUT     VARCHAR2 )

    RETURN VARCHAR2;


    FUNCTION Get_CAR_Producer ( v_AGENT_NUM     IN      VARCHAR2,
                                v_AGENT_SUB     IN      VARCHAR2 )

    RETURN VARCHAR2;


    PROCEDURE Import_IXPOLVIN;


    PROCEDURE Insert_Producer ( v_AGENT_NUM        IN VARCHAR2,
                                v_AGENT_SUB        IN VARCHAR2,
                                v_PRODUCER_CODE    IN VARCHAR2 );

   -- Added 11/16/2017 
    PROCEDURE write_rounding_estimates ( v_dir          IN VARCHAR2,
                                         v_begin_date   IN DATE );



    PROCEDURE write_fixed_file_CAR_LOZ (p_type           IN     VARCHAR2,
                                        p_query          IN     VARCHAR2,
                                        p_dir            IN     VARCHAR2,
                                        p_filename       IN     VARCHAR2,
                                        p_fopen_fl       IN     VARCHAR2,
                                        p_max_linesize   IN     NUMBER,
                                        p_month          IN     NUMBER,
                                        p_year           IN     NUMBER,
                                        p_subline        IN     NUMBER,
                                        p_stat_type      IN     VARCHAR2,
                                        p_end_sw         IN     VARCHAR2,
                                        v_numRecs        OUT    NUMBER,
                                        v_total_amount   OUT    NUMBER);

END ND_BUREAU_CAR;
/


CREATE OR REPLACE PACKAGE RPTSTAT.ND_BUREAU_ISO_CSPI
AS
   /******************************************************************************
      NAME:       ND_HO_BUREAU
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0       12/22/2014     D.PETERS       1. Created this package.
   ******************************************************************************/
   -- PROGRAM CONSTANTS

   --  v_rept_end_date         VARCHAR2 (8) := v_reporting_yymm || '31';

    PROCEDURE a_Main (v_quarter   IN NUMBER,
                     v_year      IN NUMBER,
                     v_type      IN VARCHAR2,
                     v_line      IN VARCHAR2);

    PROCEDURE Premiums (v_quarter   IN NUMBER,
                       v_year      IN NUMBER,
                       v_line      IN VARCHAR2);

    PROCEDURE Claims (v_quarter   IN NUMBER,
                       v_year      IN NUMBER,
                       v_line      IN VARCHAR2);

    PROCEDURE collect_prem_iso_bo_data_loop;

    PROCEDURE collect_claim_ISO_bo_paid;

    PROCEDURE collect_clm_iso_bo_outstand;

    PROCEDURE Summarize_ISO_Osls_BO;

    PROCEDURE Summarize_ISO_Prem_BO;

    FUNCTION lu_State_Code (p_state_in      IN VARCHAR2)
      RETURN VARCHAR2;

    Function ISO_Date_Conv(v_date_in in Date, v_ISO_Format_in  in VarChar2)
      RETURN VarChar2;

    FUNCTION ISO_Signed_Number (v_num_in IN Number, v_len in Number)
      RETURN VARCHAR2;

    FUNCTION FixBOPClass ( v_BUILD_TYPE      IN      VARCHAR2,
                           v_OCCUPANCY       IN      VARCHAR2,
                           v_COVERAGE_CODE   IN      VARCHAR2 )
    RETURN VARCHAR2;

    FUNCTION Get_BOP335_Coverage ( v_POLICY_NUMBER     IN      VARCHAR2,
                                   v_EFF_DATE          IN      DATE,
                                   v_EXP_DATE          IN      DATE,
                                   v_ACT_DATE          IN      DATE )

    RETURN VARCHAR2;

    FUNCTION Get_BOP335_Protection ( v_POLICY_NUMBER     IN      VARCHAR2,
                                     v_EFF_DATE          IN      DATE,
                                     v_EXP_DATE          IN      DATE,
                                     v_ACT_DATE          IN      DATE )

    RETURN VARCHAR2;


    FUNCTION Get_BOP_Protection ( v_POLICY_NUMBER     IN      VARCHAR2,
                                  v_ITEM_NUM          IN      NUMBER,
                                  v_EFF_DATE          IN      DATE,
                                  v_EXP_DATE          IN      DATE,
                                  v_ACT_DATE          IN      DATE )

    RETURN VARCHAR2;


    FUNCTION Get_BOP_Location ( v_POLICY_NUMBER     IN      VARCHAR2,
                                v_ITEM_NUM          IN      NUMBER,
                                v_EFF_DATE          IN      DATE,
                                v_EXP_DATE          IN      DATE,
                                v_ACT_DATE          IN      DATE )

    RETURN VARCHAR2;


    FUNCTION Get_BOP_Deductible_TEMP ( i_POLICY_NUMBER IN VARCHAR2,
                                       i_EFF_DATE      IN DATE,
                                       i_ITEM_SEQ      IN VARCHAR2,
                                       i_COV_CODE      IN VARCHAR2,
                                       i_ACT_DATE      IN DATE,
                                       i_OLD_NEW       IN VARCHAR2 )

    RETURN NUMBER;


    PROCEDURE WRITE_FIXED_FILE_ISO_LOZ ( p_type           IN     VARCHAR2,
                                         p_out_paid       IN     VARCHAR2,
                                         p_loss_exp       IN     VARCHAR2,
                                         p_query          IN     VARCHAR2,
                                         p_dir            IN     VARCHAR2,
                                         p_filename       IN     VARCHAR2,
                                         p_fopen_fl       IN     VARCHAR2,
                                         p_max_linesize   IN     NUMBER,
                                         p_quarter        IN     NUMBER,
                                         p_year           IN     NUMBER,
                                         p_module         IN     VARCHAR2,
                                         p_stat_type      IN     VARCHAR2,
                                         v_numRecs           OUT NUMBER,
                                         v_total_amount      OUT NUMBER);

END ND_BUREAU_ISO_CSPI;
/

CREATE OR REPLACE PACKAGE BODY RPTSTAT.Import_Stats AS
/******************************************************************************
   NAME:       ImportStats
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/9/2016      dpeters       1. Created this package body.
******************************************************************************
   Syntax:  Import( v_Date )
            where v_Date is the current date or run date
            This will be a date in the current month which is one month prior
            to the Month of BOOK_DATE
            (ie: a run on 7/5/2015 would use BookDate/Month of 062015
******************************************************************************/
         v_err_fl NUMBER :=0;

   PROCEDURE a_Import (v_Date IN Date, v_Import_Flags_IN IN varchar2 )
   IS

        v_return_value  Varchar2(1);
        v_SysDate       Date;
        v_Book_Date     VarChar2 (6);
        v_Import_Flags  VarChar2 (10);

/*    v_Date will be the Date of the Load.  The Month of the Load will actually be the Prior Month load.
    IE. a date of 01/05/2016 will load the data for December 2015

    v_Import_Flags is only used to control the ability be able to import only certain groups of tables
    v_Import_Flags can have the values as Follows:
        A or blank/null - Load All tables
        H - Load Home/Fire Tables (PLSP)
        P - Load Personal Auto Tables (PASP)
        B - Load Business Owners Tables (BOP)
        M - Load Massachusetts Auto Tables (CAR)
    Combine the flags if you want to load 2 or more of the groups of tables.
    IE.  use HP to load Home/Fire and Personal Auto Tables.
*/

   BEGIN
      v_Import_Flags := UPPER(v_Import_Flags_in || '');

      v_return_value := '';
      If v_Date is null then
        select SYSDATE INTO v_SysDate FROM dual;
      else
        v_SysDate := v_Date;
      End If;

      v_Book_Date := to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
      v_return_value := 'Y';

      --- Check import data to ensure it is for the current month
      Import_Check_Import_Dates (v_SysDate, v_Import_Flags, v_return_value);

      IF v_return_value = 'Y' THEN

      --- Import Home and Fire Tables (MSO and ISO_PLSP)
          If Instr(v_Import_Flags,'A') > 0 or Instr(v_Import_Flags,'H') > 0 or v_Import_Flags = '' then
              /*INSERT INTO rpt_policy_DF_stat SELECT p.*, RI.ROOF_YEAR FROM ext_rpt_policy_DF_stat p, rptviewer.rpt_item ri where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy')
              and p.policy_number = ri.policy_number and p.item_num = ri.item_seq and p.user_line = ri.sds_line; --added join to RPTVIEWER.RPT_ITEM to additionally load DF Attributes Post Loaded shaynes 8/25/2016
              Commit;*/
              INSERT INTO rpt_policy_DF_stat SELECT * FROM ext_rpt_policy_DF_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;
             -- INSERT INTO rpt_policy_FO_stat SELECT p.*, ri.cause_of_loss FROM ext_rpt_policy_FO_stat p, rptviewer.rpt_item ri where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy')
             --  and p.policy_number = ri.policy_number and p.item_num = ri.item_seq and p.user_line = ri.sds_line;  --changed 11/14/2016 in support of the new ARFO Cause of Loss code
             ---Changed to left join to address input records being dropped where no corresponding item record is found.  --ASI/RJC 2/27/2017
              INSERT INTO rpt_policy_FO_stat SELECT p.*, ri.cause_of_loss FROM ext_rpt_policy_FO_stat p
               left join (select * from rptviewer.rpt_item) ri on p.policy_number = ri.policy_number and p.item_num = ri.item_seq and p.user_line = ri.sds_line
               where to_char(p.BOOK_DATE,'mmyyyy') = to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;
              INSERT INTO rpt_policy_GL_stat SELECT * FROM ext_rpt_policy_GL_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;
              INSERT INTO rpt_policy_HO_stat SELECT p.*, ri.TRAMPOLINE, ri.ROOF_TYPE, ri.ROOF_YEAR  FROM ext_rpt_policy_HO_stat p, rptviewer.rpt_item ri where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy')
               and p.policy_number = ri.policy_number and p.item_num = ri.item_seq and p.user_line = ri.sds_line; --added join to RPTVIEWER.RPT_ITEM to additionally load HO Attributes Post Loaded shaynes 8/23/2016
              Commit;
              INSERT INTO rpt_policy_HO_stat SELECT p.*, null, ' ', 2100 FROM ext_rpt_policy_HO_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy')
               and p.item_num not in ( select distinct r.item_seq from rptviewer.rpt_item r where r.policy_number = p.policy_number and r.user_line = p.user_line );  --added to address invalid item_seq on some manual changes --ASI/RJC 1/27/2017
               Commit;              
              /*INSERT INTO rpt_policy_HO_stat SELECT * FROM ext_rpt_policy_HO_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;*/
              INSERT INTO rpt_policy_IM_stat SELECT * FROM ext_rpt_policy_IM_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;

              INSERT INTO rpt_claims_DF_stat SELECT * FROM ext_rpt_claims_DF_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;
              --INSERT INTO rpt_claims_FO_stat SELECT p.*, ri.cause_of_loss FROM ext_rpt_claims_FO_stat p, rptviewer.rpt_item ri where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy')
              -- and p.policy_number = ri.policy_number and p.item_num = ri.item_seq and p.user_line = ri.sds_line;  --changed 11/14/2016 in support of the new ARFO Cause of Loss code
              ---Changed to left join to address input records being dropped where no corresponding item record is found.  --ASI/RJC 2/27/2017
               INSERT INTO rpt_claims_FO_stat SELECT p.*, ri.cause_of_loss FROM ext_rpt_claims_FO_stat p
               left join (select * from rptviewer.rpt_item) ri on p.policy_number = ri.policy_number and p.item_num = ri.item_seq and p.user_line = ri.sds_line
               where to_char(p.BOOK_DATE,'mmyyyy') = to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;
              INSERT INTO rpt_claims_GL_stat SELECT * FROM ext_rpt_claims_GL_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;
               INSERT INTO rpt_claims_HO_stat SELECT p.*,  ri.TRAMPOLINE, ri.ROOF_TYPE, ri.ROOF_YEAR FROM ext_rpt_claims_HO_stat p, rptviewer.rpt_item ri where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy')
               and p.policy_number = ri.policy_number and p.item_num = ri.item_seq and p.user_line = ri.sds_line; --added join to RPTVIEWER.RPT_ITEM to additionally load HO Attributes Post Loaded shaynes 8/23/2016
              Commit;
              /*INSERT INTO rpt_claims_HO_stat SELECT * FROM ext_rpt_claims_HO_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;*/
              INSERT INTO rpt_claims_IM_stat SELECT * FROM ext_rpt_claims_IM_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;
          End If;

      --- Import Personal Auto Tables (PASP)
          If Instr(v_Import_Flags,'A') > 0 or Instr(v_Import_Flags,'P') > 0 or v_Import_Flags = '' then
              INSERT INTO rpt_policy_PA_stat SELECT * FROM ext_rpt_policy_PA_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;

              INSERT INTO rpt_claims_PA_stat SELECT * FROM ext_rpt_claims_PA_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;

              collect_PA_driver_data(v_Date);
          End If;

      --- Import Business Owners Tables (CSPI)
          If Instr(v_Import_Flags,'A') > 0 or Instr(v_Import_Flags,'B') > 0 or v_Import_Flags = '' then
              INSERT INTO rpt_policy_BO_stat SELECT * FROM ext_rpt_policy_BO_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;

              INSERT INTO rpt_claims_BO_stat SELECT * FROM ext_rpt_claims_BO_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;
          End If;

      --- Import Massachusetts Auto Tables (CAR)
          If Instr(v_Import_Flags,'A') > 0 or Instr(v_Import_Flags,'M') > 0 or v_Import_Flags = '' then
              INSERT INTO rpt_policy_MA_stat SELECT * FROM ext_rpt_policy_MA_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;

              INSERT INTO rpt_claims_MA_stat SELECT * FROM ext_rpt_claims_MA_stat p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_SysDate,'mm')-1,'mmyyyy');
              Commit;
          End If;

      END IF;
   END;

Procedure Import_Check_Import_Dates (v_Date IN Date, v_Import_Flags in VARCHAR2, v_return_value   OUT VARCHAR2)
   IS
      v_procname        RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                           := 'ND_BUREAU.Import_Check_Import_Dates';
      v_err_mssg        VARCHAR2 (200);
      v_err_loc         VARCHAR2 (100);
      v_Book_Date       VarChar2 (6);

      ---- Create Cursor for Each of the Import Tables

---  MSO and ISO_PLSP
--- Home and Fire Input Tables
      CURSOR In_Ext_RPT_Policy_DF_Stat IS SELECT Count(*) as Count From EXT_RPT_POLICY_DF_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Policy_FO_Stat IS SELECT Count(*) as Count From EXT_RPT_POLICY_FO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Policy_GL_Stat IS SELECT Count(*) as Count From EXT_RPT_POLICY_GL_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Policy_HO_Stat IS SELECT Count(*) as Count From EXT_RPT_POLICY_HO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Policy_IM_Stat IS SELECT Count(*) as Count From EXT_RPT_POLICY_IM_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');

      CURSOR In_Ext_RPT_Claims_DF_Stat IS SELECT Count(*) as Count From EXT_RPT_CLAIMS_DF_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Claims_FO_Stat IS SELECT Count(*) as Count From EXT_RPT_CLAIMS_FO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Claims_GL_Stat IS SELECT Count(*) as Count From EXT_RPT_CLAIMS_Gl_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Claims_HO_Stat IS SELECT Count(*) as Count From EXT_RPT_CLAIMS_HO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Claims_IM_Stat IS SELECT Count(*) as Count From EXT_RPT_CLAIMS_IM_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');

---- Create Cursor for Each of the Output Destincation Tables
      CURSOR In_RPT_Policy_DF_Stat IS SELECT Count(*) as Count From RPT_POLICY_DF_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Policy_FO_Stat IS SELECT Count(*) as Count From RPT_POLICY_FO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Policy_GL_Stat IS SELECT Count(*) as Count From RPT_POLICY_GL_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Policy_HO_Stat IS SELECT Count(*) as Count From RPT_POLICY_HO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Policy_IM_Stat IS SELECT Count(*) as Count From RPT_POLICY_IM_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');

      CURSOR In_RPT_Claims_DF_Stat IS SELECT Count(*) as Count From RPT_CLAIMS_DF_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Claims_FO_Stat IS SELECT Count(*) as Count From RPT_CLAIMS_FO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Claims_GL_Stat IS SELECT Count(*) as Count From RPT_CLAIMS_GL_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Claims_HO_Stat IS SELECT Count(*) as Count From RPT_CLAIMS_HO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Claims_IM_Stat IS SELECT Count(*) as Count From RPT_CLAIMS_IM_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');

--- ISO_PASP
--- Personal Auto Input Tables
      CURSOR In_Ext_RPT_Policy_PA_Stat IS SELECT Count(*) as Count From EXT_RPT_POLICY_PA_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Claims_PA_Stat IS SELECT Count(*) as Count From EXT_RPT_CLAIMS_PA_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Policy_PA_Stat IS SELECT Count(*) as Count From RPT_POLICY_PA_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Claims_PA_Stat IS SELECT Count(*) as Count From RPT_CLAIMS_PA_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');

--- ISO_CSPI
--- Business Owners Input Tables
      CURSOR In_Ext_RPT_Policy_BO_Stat IS SELECT Count(*) as Count From EXT_RPT_POLICY_BO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Claims_BO_Stat IS SELECT Count(*) as Count From EXT_RPT_CLAIMS_BO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Policy_BO_Stat IS SELECT Count(*) as Count From RPT_POLICY_BO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Claims_BO_Stat IS SELECT Count(*) as Count From RPT_CLAIMS_BO_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');

--- ISO_PASP
--- Massachusetts Auto Input Tables
      CURSOR In_Ext_RPT_Policy_MA_Stat IS SELECT Count(*) as Count From EXT_RPT_POLICY_MA_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_Ext_RPT_Claims_MA_Stat IS SELECT Count(*) as Count From EXT_RPT_CLAIMS_MA_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Policy_MA_Stat IS SELECT Count(*) as Count From RPT_POLICY_MA_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');
      CURSOR In_RPT_Claims_MA_Stat IS SELECT Count(*) as Count From RPT_CLAIMS_MA_STAT p where to_char(p.BOOK_DATE,'mmyyyy')=to_char(trunc(v_Date,'mm')-1,'mmyyyy');


      --- Home and Fire Variables
      v_ext_dfP_in          In_Ext_RPT_Policy_DF_Stat%ROWTYPE;
      v_ext_foP_in          In_Ext_RPT_Policy_FO_Stat%ROWTYPE;
      v_ext_glP_in          In_Ext_RPT_Policy_GL_Stat%ROWTYPE;
      v_ext_hoP_in          In_Ext_RPT_Policy_HO_Stat%ROWTYPE;
      v_ext_imP_in          In_Ext_RPT_Policy_IM_Stat%ROWTYPE;
      v_ext_dfC_in          In_Ext_RPT_Claims_DF_Stat%ROWTYPE;
      v_ext_foC_in          In_Ext_RPT_Claims_FO_Stat%ROWTYPE;
      v_ext_glC_in          In_Ext_RPT_Claims_GL_Stat%ROWTYPE;
      v_ext_hoC_in          In_Ext_RPT_Claims_HO_Stat%ROWTYPE;
      v_ext_imC_in          In_Ext_RPT_Claims_IM_Stat%ROWTYPE;

      v_rpt_dfP_in          In_RPT_Policy_DF_Stat%ROWTYPE;
      v_rpt_foP_in          In_RPT_Policy_FO_Stat%ROWTYPE;
      v_rpt_glP_in          In_RPT_Policy_GL_Stat%ROWTYPE;
      v_rpt_hoP_in          In_RPT_Policy_HO_Stat%ROWTYPE;
      v_rpt_imP_in          In_RPT_Policy_IM_Stat%ROWTYPE;
      v_rpt_dfC_in          In_RPT_Claims_DF_Stat%ROWTYPE;
      v_rpt_foC_in          In_RPT_Claims_FO_Stat%ROWTYPE;
      v_rpt_glC_in          In_RPT_Claims_GL_Stat%ROWTYPE;
      v_rpt_hoC_in          In_RPT_Claims_HO_Stat%ROWTYPE;
      v_rpt_imC_in          In_RPT_Claims_IM_Stat%ROWTYPE;

      --- Personal Auto Variables
      v_ext_paP_in          In_Ext_RPT_Policy_PA_Stat%ROWTYPE;
      v_ext_paC_in          In_Ext_RPT_Claims_PA_Stat%ROWTYPE;
      v_rpt_paP_in          In_RPT_Policy_PA_Stat%ROWTYPE;
      v_rpt_paC_in          In_RPT_Claims_PA_Stat%ROWTYPE;

      --- Business Owners Variables
      v_ext_boP_in          In_Ext_RPT_Policy_BO_Stat%ROWTYPE;
      v_ext_boC_in          In_Ext_RPT_Claims_BO_Stat%ROWTYPE;
      v_rpt_boP_in          In_RPT_Policy_BO_Stat%ROWTYPE;
      v_rpt_boC_in          In_RPT_Claims_BO_Stat%ROWTYPE;

      --- Massachusetts Auto Variables
      v_ext_maP_in          In_Ext_RPT_Policy_MA_Stat%ROWTYPE;
      v_ext_maC_in          In_Ext_RPT_Claims_MA_Stat%ROWTYPE;
      v_rpt_maP_in          In_RPT_Policy_MA_Stat%ROWTYPE;
      v_rpt_maC_in          In_RPT_Claims_MA_Stat%ROWTYPE;


   BEGIN
      v_return_value := 'N';
      v_err_loc := 'Import_Check_Import_Dates';

      v_Book_Date := to_char(trunc(v_Date,'mm')-1,'mmyyyy');

--- Home and Fire * * * * * * * * *
      If Instr(v_Import_Flags,'A') > 0 or Instr(v_Import_Flags,'H') > 0 or v_Import_Flags = '' then
          ---   Policy DF
          Open In_Ext_RPT_Policy_DF_Stat;
          Open In_RPT_Policy_DF_Stat;
            FETCH In_Ext_RPT_Policy_DF_Stat INTO v_ext_dfP_in;
            FETCH In_RPT_Policy_DF_Stat INTO v_rpt_dfP_in;
                If v_ext_dfP_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_dfP_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Policy_DF_Stat;
          Close In_RPT_Policy_DF_Stat;

          ---   Policy FO
          Open In_Ext_RPT_Policy_FO_Stat;
          Open In_RPT_Policy_FO_Stat;
            FETCH In_Ext_RPT_Policy_FO_Stat INTO v_ext_foP_in;
            FETCH In_RPT_Policy_FO_Stat INTO v_rpt_foP_in;
                If v_ext_foP_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_foP_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Policy_FO_Stat;
          Close In_RPT_Policy_FO_Stat;

          ---   Policy GL
          Open In_Ext_RPT_Policy_GL_Stat;
          Open In_RPT_Policy_GL_Stat;
            FETCH In_Ext_RPT_Policy_GL_Stat INTO v_ext_glP_in;
            FETCH In_RPT_Policy_GL_Stat INTO v_rpt_glP_in;
                If v_ext_glP_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_glP_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Policy_GL_Stat;
          Close In_RPT_Policy_GL_Stat;

          ---   Policy HO
          Open In_Ext_RPT_Policy_HO_Stat;
          Open In_RPT_Policy_HO_Stat;
            FETCH In_Ext_RPT_Policy_HO_Stat INTO v_ext_hoP_in;
            FETCH In_RPT_Policy_HO_Stat INTO v_rpt_hoP_in;
                If v_ext_hoP_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_hoP_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Policy_HO_Stat;
          Close In_RPT_Policy_HO_Stat;

          ---   Policy IM
          Open In_Ext_RPT_Policy_IM_Stat;
          Open In_RPT_Policy_IM_Stat;
            FETCH In_Ext_RPT_Policy_IM_Stat INTO v_ext_imP_in;
            FETCH In_RPT_Policy_IM_Stat INTO v_rpt_imP_in;
                If v_ext_imP_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_imP_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Policy_IM_Stat;
          Close In_RPT_Policy_IM_Stat;


          ---   Claims DF
          Open In_Ext_RPT_Claims_DF_Stat;
          Open In_RPT_Claims_DF_Stat;
            FETCH In_Ext_RPT_Claims_DF_Stat INTO v_ext_dfC_in;
            FETCH In_RPT_Claims_DF_Stat INTO v_rpt_dfC_in;
                If v_ext_dfC_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_dfC_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Claims_DF_Stat;
          Close In_RPT_Claims_DF_Stat;

          ---   Claims FO
          Open In_Ext_RPT_Claims_FO_Stat;
          Open In_RPT_Claims_FO_Stat;
            FETCH In_Ext_RPT_Claims_FO_Stat INTO v_ext_foC_in;
            FETCH In_RPT_Claims_FO_Stat INTO v_rpt_foC_in;
                If v_ext_foC_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_foC_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Claims_FO_Stat;
          Close In_RPT_Claims_FO_Stat;

          ---   Claims GL
          Open In_Ext_RPT_Claims_GL_Stat;
          Open In_RPT_Claims_GL_Stat;
            FETCH In_Ext_RPT_Claims_GL_Stat INTO v_ext_glC_in;
            FETCH In_RPT_Claims_GL_Stat INTO v_rpt_glC_in;
                If v_ext_glC_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_glC_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Claims_GL_Stat;
          Close In_RPT_Claims_GL_Stat;

          ---   Claims HO
          Open In_Ext_RPT_Claims_HO_Stat;
          Open In_RPT_Claims_HO_Stat;
            FETCH In_Ext_RPT_Claims_HO_Stat INTO v_ext_hoC_in;
            FETCH In_RPT_Claims_HO_Stat INTO v_rpt_hoC_in;
                If v_ext_hoC_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_hoC_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Claims_HO_Stat;
          Close In_RPT_Claims_HO_Stat;

          ---   Claims IM
          Open In_Ext_RPT_Claims_IM_Stat;
          Open In_RPT_Claims_IM_Stat;
            FETCH In_Ext_RPT_Claims_IM_Stat INTO v_ext_imC_in;
            FETCH In_RPT_Claims_IM_Stat INTO v_rpt_imC_in;
                If v_ext_imC_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_imC_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Claims_IM_Stat;
          Close In_RPT_Claims_IM_Stat;
      End If;  --- End of Home/Fire

--- Personal Auto * * * * * * * * *
      If Instr(v_Import_Flags,'A') > 0 or Instr(v_Import_Flags,'P') > 0 or v_Import_Flags = '' then
          ---   Policy PA
          Open In_Ext_RPT_Policy_PA_Stat;
          Open In_RPT_Policy_PA_Stat;
            FETCH In_Ext_RPT_Policy_PA_Stat INTO v_ext_paP_in;
            FETCH In_RPT_Policy_PA_Stat INTO v_rpt_paP_in;
                If v_ext_paP_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_paP_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Policy_PA_Stat;
          Close In_RPT_Policy_PA_Stat;

          ---   Claims PA
          Open In_Ext_RPT_Claims_PA_Stat;
          Open In_RPT_Claims_PA_Stat;
            FETCH In_Ext_RPT_Claims_PA_Stat INTO v_ext_paC_in;
            FETCH In_RPT_Claims_PA_Stat INTO v_rpt_paC_in;
                If v_ext_paC_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_paC_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Claims_PA_Stat;
          Close In_RPT_Claims_PA_Stat;
      End If;  --- End of Personal Auto

--- Business Owners * * * * * * * * *
      If Instr(v_Import_Flags,'A') > 0 or Instr(v_Import_Flags,'B') > 0 or v_Import_Flags = '' then
          ---   Policy BO
          Open In_Ext_RPT_Policy_BO_Stat;
          Open In_RPT_Policy_BO_Stat;
            FETCH In_Ext_RPT_Policy_BO_Stat INTO v_ext_boP_in;
            FETCH In_RPT_Policy_BO_Stat INTO v_rpt_boP_in;
                If v_ext_boP_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_boP_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Policy_BO_Stat;
          Close In_RPT_Policy_BO_Stat;

          ---   Claims BO
          Open In_Ext_RPT_Claims_BO_Stat;
          Open In_RPT_Claims_BO_Stat;
            FETCH In_Ext_RPT_Claims_BO_Stat INTO v_ext_boC_in;
            FETCH In_RPT_Claims_BO_Stat INTO v_rpt_boC_in;
                If v_ext_boC_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_boC_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Claims_BO_Stat;
          Close In_RPT_Claims_BO_Stat;
      End If;  --- End of Business Owners

--- Massachusetts Auto * * * * * * * * *
      If Instr(v_Import_Flags,'A') > 0 or Instr(v_Import_Flags,'M') > 0 or v_Import_Flags = '' then
          ---   Policy MA
          Open In_Ext_RPT_Policy_MA_Stat;
          Open In_RPT_Policy_MA_Stat;
            FETCH In_Ext_RPT_Policy_MA_Stat INTO v_ext_maP_in;
            FETCH In_RPT_Policy_MA_Stat INTO v_rpt_maP_in;
                If v_ext_maP_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_maP_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Policy_MA_Stat;
          Close In_RPT_Policy_MA_Stat;

          ---   Claims MA
          Open In_Ext_RPT_Claims_MA_Stat;
          Open In_RPT_Claims_MA_Stat;
            FETCH In_Ext_RPT_Claims_MA_Stat INTO v_ext_maC_in;
            FETCH In_RPT_Claims_MA_Stat INTO v_rpt_maC_in;
                If v_ext_maC_in.Count < 1 then
                    v_err_mssg := 'Incorrect Dataset for Load';
                    raise_application_error(-20000, 'Incorrect Dataset for Load');
                End If;
                If v_rpt_maC_in.count > 0 then
                    v_err_mssg := 'Import was Already Processed';
                    raise_application_error(-20001, 'Import was Already Processed');
                End If;
          Close In_Ext_RPT_Claims_MA_Stat;
          Close In_RPT_Claims_MA_Stat;
      End If;  --- End of Massachusetts Auto

      v_return_value := 'Y';   ---  All proceesed...Return to Import Data

      EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_return_value := 'N';
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || '            :'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || ' ' || V_ERR_MSSG || ' ' || ' ');
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;
PROCEDURE collect_PA_driver_data (v_DATE IN DATE)
IS

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'Import_Stats.collect_PA_driver_data';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);

    CURSOR all_pa_stat
    IS
        SELECT distinct
            a.POLICY_NUMBER,
            a.ITEM_NUM,
            a.EFF_DATE,
            a.EXP_DATE,
            a.ACTG_DATE,
            a.BOOK_DATE,
            a.OLD_NEW_STAT,
            a.REC_TYPE
        FROM
            (     SELECT DISTINCT
                    POLICY_NUMBER,
                    ITEM_NUM,
                    EFF_DATE,
                    EXP_DATE,
                    ACTG_DATE,
                    BOOK_DATE,
                    OLD_NEW_STAT,
                    --COV_UPDATE_SW,
                    '1' AS REC_TYPE
                FROM
                    RPT_POLICY_PA_STAT p
                WHERE
                    TO_CHAR(p.BOOK_DATE,'MMYYYY') = TO_CHAR(TRUNC(v_DATE,'MM')-1,'MMYYYY')
                    AND p.sdac_ind = '1'
                    AND p.group_line in ('01', '05')
                    AND NOT (p.group_line = '05' AND p.item_state_cd = 'MA')

                UNION

                SELECT DISTINCT
                    POLICY_NUMBER,
                    ITEM_NUM,
                    EFF_DATE,
                    EXP_DATE,

                    LOSS_DATE as ACTG_DATE,
                    BOOK_DATE,
                    '1' AS OLD_NEW_STAT,
                    --'1' AS COV_UPDATE_SW,
                    '2' AS REC_TYPE
                FROM
                    RPT_CLAIMS_PA_STAT c
                WHERE
                    TO_CHAR(c.BOOK_DATE,'MMYYYY') = TO_CHAR(TRUNC(v_DATE,'MM')-1,'MMYYYY')
                    AND c.sdac_ind = '1'
                    AND c.group_line in ('01', '05')
                    AND NOT (c.group_line = '05' AND c.item_state_cd = 'MA')
                    AND c.trans_code IN ('41', '51', '61', '42', '52', '62', '44', '54', '64', '53', '55', '47', '57', '67', '48', '58', '68', '71', '81', '91', '72', '82', '92', '73', '83', '93', '86', '87')
                    AND NOT (c.trans_code IN ('52', '53', '55') AND c.coverage_code > '159')

                UNION


                SELECT
                POLICY_NUMBER,
                    ITEM_NUM,
                    EFF_DATE,
                    EXP_DATE,

                    LOSS_DATE as ACTG_DATE,
                    BOOK_DATE,
                    OLD_NEW_STAT,
                    --'1' AS COV_UPDATE_SW,
                    REC_TYPE


                FROM( SELECT DISTINCT
                    POLICY_NUMBER,
                    ITEM_NUM,
                    EFF_DATE,
                    EXP_DATE,
                    LOSS_DATE,
                    ACTG_DATE,
                    BOOK_DATE,
                    '1' AS OLD_NEW_STAT,
                    --'1' AS COV_UPDATE_SW,
                    '3' AS REC_TYPE,
                    CLAIM_NUMBER,
                    COVERAGE_CODE,
                    GROUP_LINE,
                    USER_LINE,
                    SDAC_IND,
                    ITEM_STATE_CD,
                    COMPANY,
                    CLAIMANT_NUM
                FROM
                    RPT_CLAIMS_PA_STAT o
                WHERE
                    --TO_CHAR(o.BOOK_DATE,'MMYYYY') = TO_CHAR(TRUNC(v_DATE,'MM')-1,'MMYYYY')
                    o.sdac_ind = '1'
                    AND o.group_line in ('01', '05')
                    AND NOT (o.group_line = '05' AND o.item_state_cd = 'MA')
                    AND o.eff_date > TO_DATE ('12/31/' || TO_CHAR(EXTRACT(YEAR FROM (TRUNC(v_DATE,'MM') - 1) ) - 10), 'MM/DD/YYYY')
                    AND o.loss_date > TO_DATE ('12/31/' || TO_CHAR(EXTRACT(YEAR FROM (TRUNC(v_DATE,'MM') - 1) ) - 10), 'MM/DD/YYYY')
                    AND RPTVIEWER.GET_OS_RCS_CLMT(o.claim_number, o.coverage_code, o.group_line, o.user_line, to_char(TRUNC(v_DATE,'MM'), 'MMDDYYYY'), o.sdac_ind, o.item_state_cd, o.company, o.item_num, lpad(o.claimant_num, 3, '0'))<> 0
            )) a;

    pa_stat                                all_pa_stat%ROWTYPE;


--- Output Fields
    v_POLICY_NUMBER                         VARCHAR2(10);
    v_LICENSE_NUMBER                        VARCHAR2(17);
    v_NAME_SEQ                              NUMBER(3);
    v_VIN                                   VARCHAR2(17);

--- Procedural Variables
    v_VEHICLE_FOUND_SW                      VARCHAR2(1);
    v_DRIVER_FOUND_SW                       VARCHAR2(1);



BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'collect_PA_driver_data';

    OPEN all_pa_stat;

    LOOP
        FETCH all_pa_stat INTO pa_stat;

        EXIT WHEN all_pa_stat%NOTFOUND;

        IF pa_stat.REC_TYPE IN ('1', '2') OR pa_stat.REC_TYPE = '3' AND EXTRACT(MONTH FROM (TRUNC(v_DATE,'MM')-1)) IN (3, 6, 9, 12) THEN

            v_POLICY_NUMBER  := NVL(pa_stat.POLICY_NUMBER, ' ');
            v_LICENSE_NUMBER := ' ';
            v_NAME_SEQ       := 0;

            v_VEHICLE_FOUND_SW := '0';
            v_DRIVER_FOUND_SW := '0';

            IF v_POLICY_NUMBER <> ' ' THEN
                v_VEHICLE_FOUND_SW := Get_PA_Assigned_Driver ( v_POLICY_NUMBER, pa_stat.ITEM_NUM, pa_stat.EFF_DATE, pa_stat.EXP_DATE, pa_stat.ACTG_DATE, pa_stat.OLD_NEW_STAT, v_NAME_SEQ, v_VIN );
            END IF;

            IF v_VEHICLE_FOUND_SW <> '0' THEN
                v_DRIVER_FOUND_SW := Get_PA_License_Number ( v_POLICY_NUMBER, v_NAME_SEQ, pa_stat.EFF_DATE, pa_stat.EXP_DATE, pa_stat.ACTG_DATE, pa_stat.OLD_NEW_STAT, v_LICENSE_NUMBER );
            END IF;

            IF v_DRIVER_FOUND_SW <> '0' THEN

                INSERT INTO RPT_PASP_DRIVER_STAT_MTH (
                    POLICY_NUM  ,
                    LICENSE_NUM ,
                    DR_ASSIGN   ,
                    RPT_MONTH   ,
                    VEHICLE     ,
                    ACTG_DATE)
                VALUES
                    ( v_POLICY_NUMBER  ,
                    v_LICENSE_NUMBER ,
                    v_NAME_SEQ       ,
                    TO_CHAR(TRUNC(v_DATE,'MM')-1,'MMYYYY'),
                    v_VIN            ,
                    pa_stat.ACTG_DATE
                );

                COMMIT;

            END IF;

        END IF;

    END LOOP;

    CLOSE all_pa_stat;


    --- Last month of each quarter, insert finalized list into RPT_PASP_DRIVER_STAT_QTR
    IF EXTRACT(MONTH FROM (TRUNC(v_DATE,'MM')-1)) IN (3, 6, 9, 12) THEN
        INSERT INTO RPT_PASP_DRIVER_STAT_QTR (
            POL_NUM,
            LIC_NUM,
            DR_ASSIGN,
            RPT_QUARTER
        )
        SELECT DISTINCT
            POLICY_NUM,
            LICENSE_NUM,
            DR_ASSIGN,
            TO_CHAR(TRUNC(v_DATE,'MM')-1, 'mmyyyy')
        FROM RPT_PASP_DRIVER_STAT_MTH
        WHERE RPT_MONTH <= TO_CHAR(TRUNC(v_DATE,'MM')-1,'MMYYYY')
          AND RPT_MONTH >= LPAD(TO_CHAR(EXTRACT(MONTH FROM (TRUNC(v_DATE,'MM')-1))-2),2,'0');

        COMMIT;
    END IF;


    ------------------------------------------------------------------------------------------------------------
    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG || pa_stat.policy_number);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;
FUNCTION Get_PA_Assigned_Driver (
                                  v_POLICY_NUM        IN      VARCHAR2,
                                  v_ITEM_NUM          IN      NUMBER,
                                  v_EFF_DATE          IN      DATE,
                                  v_EXP_DATE          IN      DATE,
                                  v_ACT_DATE          IN      DATE,
                                  v_OLD_NEW           IN      VARCHAR2,
                                  f_DR_ASSIGN         OUT     NUMBER,
                                  f_VIN               OUT     VARCHAR2
                                 )


    RETURN NUMBER
    IS
        f_VEHICLE_FOUND     NUMBER;


    CURSOR item_master
    IS
        SELECT c.run_date,
               c.item_seq,
               c.ident_num,
               c.dr_assign

          FROM staging.history_wang_policy p,
               staging.history_wang_item c
         WHERE
                c.mast_id           =   '4'
            AND c.rec_id            =   '4'
            AND c.pol_num           =   v_POLICY_NUM
            AND c.sds_line          =   '01'
            AND c.item_seq          =   v_ITEM_NUM

            AND p.pol_num = c.pol_num
            AND p.run_date = c.run_date

            --AND c.item_eff_date     =   v_EFF_DATE
            AND p.eff_date = v_EFF_DATE
            AND p.exp_date = v_EXP_DATE
            AND p.run_date <= v_ACT_DATE
        ORDER BY
                 c.run_date desc;

    item_rec            item_master%ROWTYPE;


        /*
        Author: D. O'Sullivan
        Date: 4/2/08
        Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
        Modifications
        -------------
        */

        -- debugging/exception variables
        v_procname          VARCHAR2 (20) := 'get_dbname';
        v_err_loc           VARCHAR2 (100);
        v_err_number        NUMBER;
        v_err_msg           VARCHAR2 (1500);
        v_start_date_time   DATE := SYSDATE;


    BEGIN
        v_err_loc := 'Get_PA_Assigned_Driver';
        f_VEHICLE_FOUND := 0;
        f_DR_ASSIGN := -1;
        f_VIN := ' ';


        OPEN item_master;
        FETCH item_master INTO item_rec;


        IF v_OLD_NEW = '0' THEN
        -- Offset records require data from previous segment
            f_VEHICLE_FOUND := Get_PA_Assigned_Driver (v_POLICY_NUM, v_ITEM_NUM, v_EFF_DATE, v_EXP_DATE, (item_rec.run_date - 1), '1', f_DR_ASSIGN, f_VIN);

        ELSE
            IF NOT item_master%NOTFOUND THEN
                f_DR_ASSIGN := NVL(item_rec.dr_assign, 0);
                f_VIN := NVL(item_rec.ident_num, ' ');
                f_VEHICLE_FOUND := 1;
            END IF;
        END IF;

        CLOSE item_master;

        RETURN f_VEHICLE_FOUND;

   ------------------------------------------------------------------------------------------------------------
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_number := SQLCODE;
         v_err_msg := SQLERRM (SQLCODE);
         v_err_msg :=
               'FAILED: '
            || v_err_number
            || ' * '
            || v_err_loc
            || ' * '
            || v_err_msg;
         DBMS_OUTPUT.put_line (v_err_msg);
         RETURN v_err_msg;
   END Get_PA_Assigned_Driver;
FUNCTION Get_PA_License_Number (
                                  v_POLICY_NUM        IN      VARCHAR2,
                                  v_DR_ASSIGN         IN      NUMBER,
                                  v_EFF_DATE          IN      DATE,
                                  v_EXP_DATE          IN      DATE,
                                  v_ACT_DATE          IN      DATE,
                                  v_OLD_NEW           IN      VARCHAR2,
                                  f_LICENSE_NUM       OUT     VARCHAR2
                                )


    RETURN NUMBER
    IS
        f_DRIVER_FOUND     NUMBER;


    CURSOR driver_master
    IS
        SELECT c.run_date,
               c.name_type,
               c.name_seq,
               c.lic_num

          FROM staging.history_wang_policy p,
               staging.history_wang_name c
         WHERE
                c.mast_id       =   '2'
            AND c.rec_id        =   '2'
            AND c.pol_num       =   v_POLICY_Num
            AND c.name_type    IN   ('DR', 'EX')
            AND c.name_seq      =   v_DR_ASSIGN

            AND p.pol_num = c.pol_num
            AND p.run_date = c.run_date

            AND p.eff_date = v_EFF_DATE
            AND p.exp_date = v_EXP_DATE
            AND p.run_date <= v_ACT_DATE
        ORDER BY
                 c.run_date desc,
                 c.name_type;

    driver_rec          driver_master%ROWTYPE;


        /*
        Author: D. O'Sullivan
        Date: 4/2/08
        Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
        Modifications
        -------------
        */

        -- debugging/exception variables
        v_procname          VARCHAR2 (20) := 'get_dbname';
        v_err_loc           VARCHAR2 (100);
        v_err_number        NUMBER;
        v_err_msg           VARCHAR2 (1500);
        v_start_date_time   DATE := SYSDATE;


    BEGIN
        v_err_loc := 'Get_PA_License_Number';
        f_DRIVER_FOUND := 0;
        f_LICENSE_NUM := ' ';


        OPEN driver_master;
        FETCH driver_master INTO driver_rec;


        IF v_OLD_NEW = '0' THEN
        -- Offset records require data from previous segment
            f_DRIVER_FOUND := Get_PA_License_Number(v_POLICY_NUM, v_DR_ASSIGN, v_EFF_DATE, v_EXP_DATE, (driver_rec.run_date - 1), '1', f_LICENSE_NUM);

        ELSE
            IF NOT driver_master%NOTFOUND THEN
                f_LICENSE_NUM := NVL(driver_rec.lic_num, ' ');
                f_DRIVER_FOUND := 1;
            END IF;
        END IF;

        CLOSE driver_master;

        RETURN f_DRIVER_FOUND;

   ------------------------------------------------------------------------------------------------------------
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_number := SQLCODE;
         v_err_msg := SQLERRM (SQLCODE);
         v_err_msg :=
               'FAILED: '
            || v_err_number
            || ' * '
            || v_err_loc
            || ' * '
            || v_err_msg;
         DBMS_OUTPUT.put_line (v_err_msg);
         RETURN v_err_msg;
   END Get_PA_License_Number;

END Import_Stats;
/


CREATE OR REPLACE PACKAGE BODY RPTSTAT.ND_BUREAU
AS
   /******************************************************************************
      NAME:       Bureau
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0       12/22/2014   D.Bohlman       1. Created this package body.

      Known issues:

      Question on manual stat records. These only send one record, the adjustment record.
      The endorsment switches are getting set assuming all stat records are there. We will not
      be able to set these fields correctly on manual stat. Leaving this issue for now. This
      s/b a small amount. Talk to ND about this.

      If a coverage record is deleted and we are trying to go back and read the wang history,
      we are not going to find a hit on deleted records. The only way to fix this is to
      fix the stat. The only reason we are currently going back to read the master for is the
      liability and med pay limits for Homeowners user lines and PU user line. This is the best we can
      do without writing these codes correctly for these coverages.

      4/5/15 Per Jane McGraw The statistical plan code needs to be a'2' to differeniate between the
      new and old layouts.

      Per Nancy Neelson the PU umbrella territories on them are not the same as the home,
      but we do not have the values on the stat to set them the way the want us to. The old COBOL programs
      are getting the territory for PU from the HO item so we are going to continue
      to do it this wau/

      4/29/15 Per Jane McGraw at MSO. If a building loss payment and a contents loss payment
      made in the same quarter, the payments could be summarized into one record, but the claim count s/b 1
      not one for building loss paymenets and one for contents loss payments.
   ******************************************************************************/
   v_filename                  VARCHAR2 (40);
   v_submittal_filename        VARCHAR2 (40);
   v_filename_farm             VARCHAR2 (40);
   v_submittal_filename_farm   VARCHAR2 (40);
   v_err_fl                    NUMBER := 0;
   V_BEGIN_DATE                DATE;
   V_END_DATE                  DATE;

   v_end_actg_qtr              VARCHAR2 (4);
   v_return_value              VARCHAR (10);
   v_return_parm1              VARCHAR (10);
   v_return_limit              VARCHAR (10);
   v_run_type                  VARCHAR2 (1); --b, c ,p -- both premiums or claims
   v_line                      VARCHAR2 (1);    --- H, F, A - Home Farm or All
   v_start_time                VARCHAR (20);
   v_end_time                  VARCHAR (20);
   v_record_count              NUMBER := 0;

   PROCEDURE a_Main (v_quarter   IN NUMBER,
                   v_year      IN NUMBER,
                   v_type      IN VARCHAR2,
                   v_line      IN VARCHAR2)
   IS
      v_end_qtr           NUMBER := 0;
      v_begin_qtr         NUMBER := 0;
      v_end_qtr_alpha     VARCHAR2 (2);
      v_begin_qtr_alpha   VARCHAR2 (2);
      v_procname          RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.MAIN';

      v_err_mssg          VARCHAR2 (1024);
      v_err_loc           VARCHAR2 (100);
   BEGIN
      -- select SYSDATE  into v_start_time   from dual;

      SELECT TO_CHAR (SYSDATE, 'DD-MM-YYYY HH:MI:SS')
        INTO v_start_time
        FROM DUAL;

      ---DBMS_OUTPUT.ENABLE(1000000);
        
      DBMS_OUTPUT.ENABLE (NULL);
      DBMS_OUTPUT.PUT_LINE (v_procname);
      v_err_loc := 'Main';

      v_run_type := v_type;

      IF v_run_type = 'B' OR v_run_type = 'P'
      THEN
         premiums (v_quarter, v_year, v_line);
      END IF;

      IF v_run_type = 'B' OR v_run_type = 'C'
      THEN
         claims (v_quarter, v_year, v_line);
      END IF;

      IF v_err_fl = 0
      THEN
         DBMS_OUTPUT.PUT_LINE ('End Program');
      ELSE
         DBMS_OUTPUT.PUT_LINE ('End Program with Error');
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
          rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE Premiums (v_quarter   IN NUMBER,
                       v_year      IN NUMBER,
                       v_line      IN VARCHAR2)
   IS
      v_end_qtr           NUMBER := 0;
      v_begin_qtr         NUMBER := 0;
      v_end_qtr_alpha     VARCHAR2 (2);
      v_begin_qtr_alpha   VARCHAR2 (2);
      v_procname          RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.PREMIUMS';

      v_err_mssg          VARCHAR2 (200);
      v_err_loc           VARCHAR2 (100);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'Premiums - Begin';

      v_end_qtr := v_quarter * 3;
      v_begin_qtr := v_end_qtr - 2;
      v_begin_qtr_alpha := LPAD (TO_CHAR (v_begin_qtr), 2, '0');
      v_end_qtr_alpha := LPAD (TO_CHAR (v_end_qtr), 2, '0');
      v_begin_date :=
         TO_DATE (v_begin_qtr_alpha || '01' || TO_CHAR (v_year), 'MMDDYYYY');

      if v_end_qtr_alpha in ('06','09')
      then
          v_end_date := TO_DATE (v_end_qtr_alpha || '30' || TO_CHAR (v_year), 'MMDDYYYY');
      else
          v_end_date := TO_DATE (v_end_qtr_alpha || '31' || TO_CHAR (v_year), 'MMDDYYYY');
      end if;
            
      v_end_actg_qtr := v_end_qtr_alpha || SUBSTR (TO_CHAR (v_year), 3, 2);

      v_filename :=
            'mso.0056'
         || SUBSTR (TO_CHAR (v_year), 3, 2)
         || TO_CHAR (v_quarter)
         || '.txt';
      v_submittal_filename :=
            'msocontrols.0056'
         || SUBSTR (TO_CHAR (v_year), 3, 2)
         || TO_CHAR (v_quarter)
         || '.txt';

      v_filename_farm :=
            'mso.0060'
         || SUBSTR (TO_CHAR (v_year), 3, 2)
         || TO_CHAR (v_quarter)
         || '.txt';
      v_submittal_filename_farm :=
            'msocontrols.0060'
         || SUBSTR (TO_CHAR (v_year), 3, 2)
         || TO_CHAR (v_quarter)
         || '.txt';

      DBMS_OUTPUT.PUT_LINE (
         'Begin Date' || v_begin_date || ' ' || ' End Date' || v_end_date);


      v_err_loc := 'Premiums - Delete RPT_POLICY_MSO_FO_STAT';

      DELETE FROM RPT_POLICY_MSO_FO_STAT;

      COMMIT;

      v_err_loc := 'Premiums - Delete RPT_POLICY_MSO_HO_STAT';

      DELETE FROM RPT_POLICY_MSO_HO_STAT;

      COMMIT;

      v_err_loc := 'Premiums - Delete RPT_POLICY_MSO_IM_STAT';

      DELETE FROM RPT_POLICY_MSO_IM_STAT;

      COMMIT;

      v_err_loc := 'Premiums - Delete RPT_POLICY_MSO_GL_STAT';

      DELETE FROM RPT_POLICY_MSO_GL_STAT;

      COMMIT;

      v_err_loc := 'Premiums - Delete RPT_POLICY_MSO_FO_STAT_SUMM';

      DELETE FROM RPT_POLICY_MSO_FO_STAT_SUMM;

      COMMIT;

      v_err_loc := 'Premiums - Delete RPT_POLICY_MSO_HO_STAT_SUMM';

      DELETE FROM RPT_POLICY_MSO_HO_STAT_SUMM;

      COMMIT;

      v_err_loc := 'Premiums - Delete RPT_POLICY_MSO_GL_STAT_SUMM';

      DELETE FROM RPT_POLICY_MSO_GL_STAT_SUMM;

      COMMIT;

      v_err_loc := 'Premiums - Delete RPT_POLICY_MSO_IM_STAT_SUMM';

      DELETE FROM RPT_POLICY_MSO_IM_STAT_SUMM;

      COMMIT;

      ---------------------------------
      --collect data and translate
      IF trim(v_line) = 'A' OR trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_prem_mso_fo_data_loop;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_prem_mso_ho_data_loop;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H' or trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_prem_mso_im_data_loop;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_prem_mso_pu_data_loop;
         END IF;
      END IF;

      ---------------------------------
      --summ up to item level with on and off stat
      IF trim(v_line) = 'A' OR trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            summarize_prem_mso_fo_data;
         END IF;
      END IF;


      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            summarize_prem_mso_ho_data;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H' or trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            summarize_prem_mso_im_data;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            summarize_prem_mso_pu_data;
         END IF;
      END IF;

      ---------------------------------
      --get rid of non premium changes or reported field changes

      IF trim(v_line) = 'A' OR trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            summ_fo_data_again;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            summ_ho_data_again;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H' or trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            summ_im_data_again;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            summ_pu_data_again;
         END IF;
      END IF;

      ---------------------------------
      IF (v_err_fl = 0)
      THEN
         update_mid_term_changes;
      END IF;

      ---------------------------------
      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF v_err_fl = 0
         THEN
            Generate_file_0056;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'F'
      THEN
         IF v_err_fl = 0
         THEN
            Generate_file_0060;
         END IF;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;


   PROCEDURE Claims (v_quarter   IN NUMBER,
                     v_year      IN NUMBER,
                     v_line      IN VARCHAR2)
   IS
      v_end_qtr           NUMBER := 0;
      v_begin_qtr         NUMBER := 0;
      v_end_qtr_alpha     VARCHAR2 (2);
      v_begin_qtr_alpha   VARCHAR2 (2);
      v_procname          RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.CLAIMS';

      v_err_mssg          VARCHAR2 (200);
      v_err_loc           VARCHAR2 (100);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);
      v_err_loc := 'Claims - Begin';

      v_end_qtr := v_quarter * 3;
      v_begin_qtr := v_end_qtr - 2;
      v_begin_qtr_alpha := LPAD (TO_CHAR (v_begin_qtr), 2, '0');
      v_end_qtr_alpha := LPAD (TO_CHAR (v_end_qtr), 2, '0');
      v_begin_date :=
         TO_DATE (v_begin_qtr_alpha || '01' || TO_CHAR (v_year), 'MMDDYYYY');
      
      if v_end_qtr_alpha in ('06','09')
      then
          v_end_date := TO_DATE (v_end_qtr_alpha || '30' || TO_CHAR (v_year), 'MMDDYYYY');
      else
          v_end_date := TO_DATE (v_end_qtr_alpha || '31' || TO_CHAR (v_year), 'MMDDYYYY');
      end if;
              
      v_end_actg_qtr := v_end_qtr_alpha || SUBSTR (TO_CHAR (v_year), 3, 2);
      v_filename :=
            'mso.0056'
         || SUBSTR (TO_CHAR (v_year), 3, 2)
         || TO_CHAR (v_quarter)
         || '.txt';
      v_submittal_filename :=
            'msocontrols.0056'
         || SUBSTR (TO_CHAR (v_year), 3, 2)
         || TO_CHAR (v_quarter)
         || '.txt';
         
      v_filename_farm :=
            'mso.0060'
         || SUBSTR (TO_CHAR (v_year), 3, 2)
         || TO_CHAR (v_quarter)
         || '.txt';
      v_submittal_filename_farm :=
            'msocontrols.0060'
         || SUBSTR (TO_CHAR (v_year), 3, 2)
         || TO_CHAR (v_quarter)
         || '.txt';



      v_err_loc := 'Claims - Delete RPT_CLAIMS_MSO_FO_STAT';

      DELETE FROM RPT_CLAIMS_MSO_FO_STAT;
      
      COMMIT;

      v_err_loc := 'Claims - Delete RPT_CLAIMS_MSO_HO_STAT';

      DELETE FROM RPT_CLAIMS_MSO_HO_STAT;

      COMMIT;

      v_err_loc := 'Claims - Delete RPT_CLAIMS_MSO_IM_STAT';

      DELETE FROM RPT_CLAIMS_MSO_IM_STAT;

      COMMIT;

      v_err_loc := 'Claims - Delete RPT_CLAIMS_MSO_GL_STAT';

      DELETE FROM RPT_CLAIMS_MSO_GL_STAT;

      COMMIT;
      --------------------------------------------------------
      v_err_loc := 'Claims - Delete RPT_CLAIMS_MSO_FO_STAT_SUMM';

      DELETE FROM RPT_CLAIMS_MSO_FO_STAT_SUMM;

      COMMIT;
      
      v_err_loc := 'Claims - Delete RPT_CLAIMS_MSO_HO_STAT_SUMM';

      DELETE FROM RPT_CLAIMS_MSO_HO_STAT_SUMM;

      COMMIT;

      v_err_loc := 'Claims - Delete RPT_CLAIMS_MSO_GL_STAT_SUMM';

      DELETE FROM RPT_CLAIMS_MSO_GL_STAT_SUMM;

      COMMIT;

      v_err_loc := 'Claims - Delete RPT_CLAIMS_MSO_im_STAT_SUMM';

      DELETE FROM RPT_CLAIMS_MSO_IM_STAT_SUMM;

      COMMIT;

      --- enter "A" = all or "H" = Home

      IF trim(v_line) = 'A' OR trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_claim_fo_paid;
         END IF;
      END IF;
      
       IF trim(v_line) = 'A' OR trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_claim_fo_OUTSTANDING;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_claim_ho_paid;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_claim_ho_outstanding;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR  trim(v_line) = 'H' or trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_claim_im_paid;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H' or trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_claim_im_OUTSTANDING;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_claim_pu_paid;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            collect_claim_pu_OUTSTANDING;
         END IF;
      END IF;

      ---summarize claims by coverage for expenses and loess
       IF trim(v_line) = 'A' OR trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            summ_claim_mso_fo_data;
         END IF;
      END IF;
      
      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            summ_claim_mso_ho_data;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H' or trim(v_line) = 'F'
      THEN
         IF (v_err_fl = 0)
         THEN
            summ_claim_mso_im_data;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            summ_claim_mso_pu_data;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF (v_err_fl = 0)
         THEN
            update_claim_count;
         END IF;
      END IF;


      IF trim(v_line) = 'A' OR trim(v_line) = 'H'
      THEN
         IF v_err_fl = 0
         THEN
            Generate_file_0056;
         END IF;
      END IF;

      IF trim(v_line) = 'A' OR trim(v_line) = 'F'
      THEN
         IF v_err_fl = 0
         THEN
            Generate_file_0060;
         END IF;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE convert_territory_ho (v_in_terr    IN     VARCHAR,
                                   v_out_terr      OUT VARCHAR)
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'CONVERT_TERRITORY_HO';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      --      DBMS_OUTPUT.PUT_LINE (v_procname);
      -- the are MSO territory code conversions
      v_err_loc := 'convert_territory_ho';

      CASE v_in_terr
         WHEN '31'
         THEN
            v_out_terr := '09';
         WHEN '32'
         THEN
            v_out_terr := '16';
         WHEN '33'
         THEN
            v_out_terr := '12';
         WHEN '34'
         THEN
            v_out_terr := '15';
         WHEN '35'
         THEN
            v_out_terr := '13';
         WHEN '36'
         THEN
            v_out_terr := '21';
         WHEN '37'
         THEN
            v_out_terr := '06';
         WHEN '38'
         THEN
            v_out_terr := '14';
         WHEN '39'
         THEN
            v_out_terr := '17';
         WHEN '40'
         THEN
            v_out_terr := '20';
         WHEN '41'
         THEN
            v_out_terr := '09';
         WHEN '42'
         THEN
            v_out_terr := '07';
         WHEN '43'
         THEN
            v_out_terr := '09';
         WHEN '44'
         THEN
            v_out_terr := '11';
         WHEN '45'
         THEN
            v_out_terr := '16';
         ----- N and D has claims open with old codes on them still. The ones with values
         ----- where the only open claims that had territories over 45

         WHEN '46'
         THEN
            v_out_terr := 'XX';                                         --test
         WHEN '47'
         THEN
            v_out_terr := 'XX';
         WHEN '48'
         THEN
            v_out_terr := 'XX';
         WHEN '49'
         THEN
            v_out_terr := 'XX';
         WHEN '50'
         THEN
            v_out_terr := '02';
         WHEN '51'
         THEN
            v_out_terr := 'XX';
         WHEN '52'
         THEN
            v_out_terr := '13';
         WHEN '53'
         THEN
            v_out_terr := 'XX';
         WHEN '54'
         THEN
            v_out_terr := 'XX';
         WHEN '55'
         THEN
            v_out_terr := '15';
         ELSE
            v_out_terr := v_in_terr;
      END CASE;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE convert_territory_fo (v_in_terr    IN     VARCHAR,
                                   v_out_terr      OUT VARCHAR)
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'CONVERT_TERRITORY_FO';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      v_err_loc := 'convert_territory_fo';

      --one to one conversion between territory codes and country codes
      -- for Arkansaw and MSO. Page AR-1 in the manual
      CASE v_in_terr
         WHEN '0'
         THEN
            v_out_terr := '01';
         WHEN ''
         THEN
            v_out_terr := '01';
         WHEN '01'
         THEN
            v_out_terr := '01';                              --Aksansas County
         WHEN '??'
         THEN
            v_out_terr := '02';                                      -- Ashley
         WHEN '??'
         THEN
            v_out_terr := '03';                                       --Baxter
         WHEN '??'
         THEN
            v_out_terr := '04';                                       --Benton
         WHEN '??'
         THEN
            v_out_terr := '05';                                         --Bone
         WHEN '??'
         THEN
            v_out_terr := '06';                                      --Bradley
         WHEN '??'
         THEN
            v_out_terr := '07';                                      --Calhoun
         WHEN '??'
         THEN
            v_out_terr := '08';                                       --Caroll
         WHEN '??'
         THEN
            v_out_terr := '09';                                       --Chicot
         WHEN '??'
         THEN
            v_out_terr := '10';                                        --Clark
         WHEN '??'
         THEN
            v_out_terr := '11';                                         --Clay
         WHEN '??'
         THEN
            v_out_terr := '12';                                    -- Cleburne
         WHEN '??'
         THEN
            v_out_terr := '13';                                    --Cleveland
         WHEN '??'
         THEN
            v_out_terr := '14';                                    -- Columbia
         WHEN '??'
         THEN
            v_out_terr := '15';                                      -- Conway
         WHEN '??'
         THEN
            v_out_terr := '16';                                   -- Craighead
         WHEN '??'
         THEN
            v_out_terr := '17';                                    -- Crawford
         WHEN '??'
         THEN
            v_out_terr := '18';                                   --Crittenden
         WHEN '??'
         THEN
            v_out_terr := '19';                                        --Cross
         WHEN '??'
         THEN
            v_out_terr := '20';                                       --Dallas
         WHEN '??'
         THEN
            v_out_terr := '21';                                        --Desha
         WHEN '??'
         THEN
            v_out_terr := '22';                                         --Drew
         WHEN '??'
         THEN
            v_out_terr := '23';                                     --Faulkner
         WHEN '??'
         THEN
            v_out_terr := '24';                                     --Franklin
         WHEN '??'
         THEN
            v_out_terr := '25';                                       --Fulton
         WHEN '??'
         THEN
            v_out_terr := '26';
         WHEN '??'
         THEN
            v_out_terr := '27';
         WHEN '??'
         THEN
            v_out_terr := '28';
         WHEN '??'
         THEN
            v_out_terr := '29';
         WHEN '??'
         THEN
            v_out_terr := '30';
         WHEN '??'
         THEN
            v_out_terr := '31';
         WHEN '??'
         THEN
            v_out_terr := '32';
         WHEN '??'
         THEN
            v_out_terr := '33';
         WHEN '??'
         THEN
            v_out_terr := '34';
         WHEN '??'
         THEN
            v_out_terr := '35';
         WHEN '??'
         THEN
            v_out_terr := '36';
         WHEN '??'
         THEN
            v_out_terr := '37';
         WHEN '??'
         THEN
            v_out_terr := '38';
         WHEN '??'
         THEN
            v_out_terr := '39';
         WHEN '??'
         THEN
            v_out_terr := '40';
         WHEN '??'
         THEN
            v_out_terr := '41';
         WHEN '??'
         THEN
            v_out_terr := '42';
         WHEN '??'
         THEN
            v_out_terr := '43';
         WHEN '??'
         THEN
            v_out_terr := '44';
         WHEN '??'
         THEN
            v_out_terr := '45';
         WHEN '??'
         THEN
            v_out_terr := '46';
         WHEN '??'
         THEN
            v_out_terr := '47';
         WHEN '??'
         THEN
            v_out_terr := '48';
         WHEN '??'
         THEN
            v_out_terr := '49';
         WHEN '??'
         THEN
            v_out_terr := '50';                                       --Fulton
         WHEN '??'
         THEN
            v_out_terr := '51';
         WHEN '??'
         THEN
            v_out_terr := '52';
         WHEN '??'
         THEN
            v_out_terr := '53';
         WHEN '??'
         THEN
            v_out_terr := '54';
         WHEN '??'
         THEN
            v_out_terr := '55';
         WHEN '??'
         THEN
            v_out_terr := '56';
         WHEN '??'
         THEN
            v_out_terr := '57';
         WHEN '??'
         THEN
            v_out_terr := '58';
         WHEN '??'
         THEN
            v_out_terr := '59';
         WHEN '??'
         THEN
            v_out_terr := '60';
         WHEN '??'
         THEN
            v_out_terr := '61';
         WHEN '??'
         THEN
            v_out_terr := '62';
         WHEN '??'
         THEN
            v_out_terr := '63';
         WHEN '??'
         THEN
            v_out_terr := '64';
         WHEN '??'
         THEN
            v_out_terr := '65';
         WHEN '??'
         THEN
            v_out_terr := '66';
         WHEN '??'
         THEN
            v_out_terr := '67';
         WHEN '??'
         THEN
            v_out_terr := '68';
         WHEN '??'
         THEN
            v_out_terr := '69';
         WHEN '??'
         THEN
            v_out_terr := '70';
         WHEN '??'
         THEN
            v_out_terr := '71';
         WHEN '??'
         THEN
            v_out_terr := '72';
         WHEN '??'
         THEN
            v_out_terr := '73';
         WHEN '??'
         THEN
            v_out_terr := '74';
         WHEN '??'
         THEN
            v_out_terr := '75';
         ELSE
            v_out_terr := v_in_terr;
      END CASE;
   EXCEPTION
      WHEN OTHERS
      THEN 
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE collect_prem_mso_fo_data_loop
   IS
      v_procname            RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                               := 'ND_BUREAU.COLLECT_PREM_MSO_FO_DATA_LOOP';
      v_err_mssg            VARCHAR2 (200);
      v_err_loc             VARCHAR2 (100);

      CURSOR all_fo_stat
      IS
           SELECT *
             FROM RPT_POLICY_FO_STAT A
            WHERE     a.state_cd = 'AR'
                  AND a.book_date >= TO_DATE (v_begin_date)
                  AND a.book_date <= TO_DATE (v_end_date)
                  AND a.company = '01'
                  AND a.group_line = '26'
                  AND A.COV_CODE < '990'
                  AND a.sdac_ind = '1'                --- direct  premium only
             --  AND a.policy_number = 'FO1386096A'                   ---test
             --    AND a.policy_number = 'FO1413598A'   ----test    
             --      AND a.policy_number = 'FO1591404A' 
                    --- AND a.policy_number =  'FO1433272A'
         ORDER BY A.COMPANY,
                  A.BOOK_DATE,
                  A.STATE_CD,
                  A.GROUP_LINE,
                  A.POLICY_NUMBER;

      fo_stat               all_fo_stat%ROWTYPE;
      v_trans_code          VARCHAR2 (1);
      v_amt_of_ins          VARCHAR (6);
      n_amt_of_ins          NUMBER;
      v_asl                 VARCHAR (3);
    --  v_prot_rating_ter     VARCHAR2 (2);
    --  v_construct_code      VARCHAR2 (2);
      v_ded_amt             VARCHAR (1);
    --  v_dwell_code          VARCHAR (1);
      v_wind_hail           VARCHAR (1);
      v_windstorm_ded       VARCHAR (3);
      v_loss_cost_mult      VARCHAR (3) := '211';
      v_program_code        VARCHAR (1);
      v_class_code          VARCHAR (5);

      n_liab_limit          NUMBER;
      v_liab_limit          VARCHAR (2);

      n_med_limit           NUMBER;
      v_med_limit           VARCHAR (2);
      v_total_prem          NUMBER;

      v_cov_f_limit         NUMBER := 0;
      v_AGGREGATE_limit     VARCHAR (2);
      v_type_of_business    VARCHAR (1) := '1';
    --  v_const_year          NUMBER := 0;
    --  v_misc_end            VARCHAR (3);
      v_num_acres           VARCHAR (1);
      n_num_acres           NUMBER := 0;
      v_count               NUMBER;
      v_written_prem        NUMBER := 0;
      n_num_ded_amt         NUMBER := 0;
      v_terr_code           VARCHAR (2);
      v_company             VARCHAR (4);
      v_id_cd               VARCHAR (2);
      v_PROTECTION_CODE     VARCHAR (2);
      v_save_PROTECTION_CODE     VARCHAR (2);
      v_POLICY_FORM         VARCHAR (2);
      v_bureau_class_code   VARCHAR (4);
      v_save_class_code     VARCHAR (4);
      v_mso_fo_cov_code     VARCHAR (8);
      v_emp_liab            VARCHAR (2);
      v_loss_settle         VARCHAR (1);
      v_exposure            VARCHAR (5);
      n_exposure            NUMBER := 0;
      v_prop_liab_fields    VARCHAR (10);
      v_alae_amount         number ;
      
    
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_prem_mso_fo_data_loop_insert';

      OPEN all_fo_stat;

      LOOP
         FETCH all_fo_stat INTO fo_stat;

         EXIT WHEN all_fo_stat%NOTFOUND;
         -- position 3425
         v_terr_code := TO_CHAR (LPAD (fo_stat.TERR, 2, '0'));
         convert_territory_fo (v_terr_code, v_terr_code);

         get_trans_code (fo_stat.trans_code,
                         fo_stat.old_new_stat,
                         fo_stat.chg_date,
                         fo_stat.eff_date,
                         v_trans_code);

         IF    TRIM (fo_stat.cov_code) = '834'
            OR TRIM (fo_stat.cov_code) = '835'
            OR TRIM (fo_stat.cov_code) = '410'
            OR TRIM (fo_stat.end_num) = 'ADD LOT'
            OR TRIM (fo_stat.end_num) = 'ND FO 03'
            OR TRIM (fo_stat.end_num) = 'MFO 109'
            OR TRIM (fo_stat.end_num) = 'PREMISES'
            OR TRIM (fo_stat.end_num) = 'MFO 153'
            OR TRIM (fo_stat.end_num) = 'MFO 154'
         THEN
            --Commercial Multi-Peril Liability
            v_asl := '052';
         ELSE
            --Commercial Multi-Peril Property
            v_asl := '051';
         END IF;


         --- company use?
         v_mso_fo_cov_code := ' ';

         CASE TRIM (fo_stat.cov_code)
            WHEN '832'
            THEN
               v_mso_fo_cov_code := TRIM (fo_stat.cov_code) || ' C';
            WHEN '834'
            THEN
               v_mso_fo_cov_code := TRIM (fo_stat.cov_code) || ' F';
            WHEN '835'
            THEN
               v_mso_fo_cov_code := TRIM (fo_stat.cov_code) || ' G';
            WHEN '831'
            THEN
               v_mso_fo_cov_code := TRIM (fo_stat.cov_code) || ' B';
            WHEN '830'
            THEN
               v_mso_fo_cov_code := TRIM (fo_stat.cov_code) || ' A';
            WHEN '833'
            THEN
               v_mso_fo_cov_code := TRIM (fo_stat.cov_code) || ' E';
            WHEN '410'
            THEN
               v_mso_fo_cov_code := TRIM (fo_stat.cov_code) || ' F';
            WHEN '406'
            THEN
               v_mso_fo_cov_code := TRIM (fo_stat.cov_code) || ' F';
            WHEN '959'
            THEN
               v_mso_fo_cov_code := TRIM (fo_stat.end_num); -- trim(fo_stat.cov_code)  || ' ' || trim(fo_stat.end_num);
            ELSE
               v_mso_fo_cov_code := TRIM (fo_stat.cov_code);
         END CASE;


         ----get from item CLASS CODE
         v_return_value := 'N';
         v_bureau_class_code := ' ';
         v_protection_code := ' ';
         
         v_save_class_code := ' ';
         v_save_PROTECTION_CODE := ' ';
         
         get_item_master (TRIM (fo_stat.eff_date),
                          TRIM (fo_stat.exp_date),
                          TRIM (fo_stat.actg_date),
                          TRIM (fo_stat.chg_date),
                          TRIM (fo_stat.user_line),
                          TRIM (fo_stat.policy_number),
                          TRIM (fo_stat.item_num),
                          v_bureau_class_code,
                          v_protection_code,
                          v_total_prem,
                          v_return_value);
         if v_return_value = 'N' then
           v_bureau_class_code := '';
           v_protection_code := '';
         end if;
        If Length(Trim(v_Bureau_class_code)) < 4 then
            v_Bureau_class_code := v_Bureau_class_code;
        end if;

if trim(v_bureau_class_code) = trim(fo_stat.class_code) then
    v_save_class_code := v_bureau_class_code;
else
    v_save_class_code := v_bureau_class_code;
end if;

         --if not in item default
         IF TRIM(v_bureau_class_code) = '' OR
             V_BUREAU_CLASS_CODE IS NULL THEN
            CASE TRIM (fo_stat.user_line)
               WHEN '24'
               THEN
                  v_bureau_class_code := '3010';         ----coverage code 830
               WHEN '32'
               THEN
                  v_bureau_class_code := '3060';          ---coverage code 830
               WHEN '26'
               THEN
                  v_bureau_class_code := '3340'; -- coverage b e f g coverage  831
               ELSE
                  v_bureau_class_code := ' ';
            END CASE;
         END IF;

         CASE TRIM (fo_stat.cov_code)
            --   when '830' then v_bureau_class_code := trim(fo_stat.class_code); -- line 24  cov a buildings
             -- when '831' then v_bureau_class_code := trim(fo_stat.class_code); -- line 26 cov b unscheduled
            WHEN '832'
            THEN
               v_bureau_class_code := TRIM (fo_stat.class_code); -- line 27 cov c farm buildings
            WHEN '833'
            THEN
               v_bureau_class_code := '3500'; -- line 26 8 coverage e unscheduled
            WHEN '834'
            THEN
               v_bureau_class_code := '3610';  -- line 26 coverage F liability
            WHEN '835'
            THEN
               v_bureau_class_code := '3640';    -- line 26 coverage g med pay
            --     when '836' then v_bureau_class_code := '???';                   --reinsurance i dont think we need to report this?
            --    when '959' then v_bureau_class_code :=  -----'???';                   -- no idea

            WHEN '406'
            THEN
               v_bureau_class_code := '3650'; --  endorsement MFO 109 Watercraft Liab
            WHEN '410'
            THEN
               v_bureau_class_code := '3660'; -- endorsement MF 03 03 Employers Liab;
            when '959' then
               if fo_stat.end_num = 'MFO 109' then
                   v_bureau_class_code := '3650';
               else
                 v_bureau_class_code := v_bureau_class_code;
               end if;
          
            -- this could be endorsement INSFEE 
            --                           ND FO 06A
              
            ELSE
               v_bureau_class_code := v_bureau_class_code;
         END CASE;


         v_save_class_code := v_bureau_class_code;

         ----prot_class is on line 26 only for protection class
         v_return_value := 'N'; 
         v_bureau_class_code := ' ';
         v_protection_code := ' ';
         
         get_item_master (TRIM (fo_stat.eff_date),
                          TRIM (fo_stat.exp_date),
                          TRIM (fo_stat.actg_date),
                          TRIM (fo_stat.chg_date),
                          '26',
                          TRIM (fo_stat.policy_number),
                          1,
                          v_bureau_class_code,
                          v_protection_code,
                          v_total_prem,
                          v_return_value);
         if v_return_value = 'N' then
           v_bureau_class_code := ' ';
           v_protection_code := ' ';
      
         else
           v_save_protection_code := v_protection_code;                          
          end if;  
          
          
         ------liability
         v_aggregate_limit := '  ';
         v_num_acres := ' ';
         n_num_acres := 0;

         IF v_asl = '052'
         THEN                                                   --- liab found
            V_AGGREgATE_LIMIT := '00';
            n_num_acres := fo_stat.sq_feet;

         
            IF TRIM (fo_stat.end_num) = 'ADD LOT'
            THEN
               n_num_acres := TO_NUMBER (TRIM (fo_stat.ams_parm_1));
            END IF;

            v_num_acres := '1';


            IF n_num_acres > 500
            THEN
               v_num_acres := '4';
            ELSE
               IF n_num_acres > 160
               THEN
                  v_num_acres := '3';
               ELSE
                  IF n_num_acres > 40
                  THEN
                     v_num_acres := '2';
                  ELSE
                     IF n_num_acres > 0
                     THEN
                        v_num_acres := '1';
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

         n_num_ded_amt := TO_NUMBER (fo_stat.DED_AMT);
         CASE n_num_ded_amt
            WHEN 250
            THEN
               v_ded_amt := '2';
            WHEN 500
            THEN
               v_ded_amt := '3';
            WHEN 1000
            THEN
               v_ded_amt := '4';
            WHEN 1500
            THEN
               v_ded_amt := '5';
            WHEN 2000
            THEN
               v_ded_amt := '6';
            WHEN 2500
            THEN
               v_ded_amt := '7';
            WHEN 3000
            THEN
               v_ded_amt := '8';
            ELSE
               v_ded_amt := '9';
         END CASE;


         v_liab_limit := ' ';

         IF v_asl = '052'
         THEN
            get_limits_master (TRIM (fo_stat.eff_date),
                               TRIM (fo_stat.exp_date),
                               TRIM (fo_stat.actg_date),
                               TRIM (fo_stat.chg_date),
                               TRIM (fo_stat.user_line),
                               TRIM (fo_stat.policy_number),
                               '834',
                               v_liab_limit);
         END IF;

         IF v_asl = '052'
         THEN
            IF v_liab_limit <> ' '
            THEN                                                --- liab found
               v_policy_form := '80';
               v_return_value := 'N';
               get_endorsement_master (TRIM (fo_stat.eff_date),
                                       TRIM (fo_stat.exp_date),
                                       TRIM (fo_stat.actg_date),
                                       TRIM (fo_stat.chg_date),
                                       TRIM (fo_stat.user_line),
                                       TRIM (fo_stat.policy_number),
                                       'MFO 020',
                                       v_return_value,
                                       v_return_parm1,
                                       v_return_limit);

               IF TRIM (v_return_value) = 'Y'
               THEN
                  v_policy_form := '81';
               END IF;
            END IF;
         END IF;

         v_med_limit := ' ';

         IF v_asl = '052'
         THEN
            IF fo_stat.end_num = 'ND FO 03'
            THEN                     -- only report med pay for employers liab
               get_limits_master (TRIM (fo_stat.eff_date),
                                  TRIM (fo_stat.exp_date),
                                  TRIM (fo_stat.actg_date),
                                  TRIM (fo_stat.chg_date),
                                  TRIM (fo_stat.user_line),
                                  TRIM (fo_stat.policy_number),
                                  '835',
                                  v_med_limit);
            END IF;
         END IF;

         --determine if employer liab
         v_emp_liab := '  ';

         IF v_asl = '052'
         THEN
            IF fo_stat.end_num = 'ND FO 03'
            THEN
               v_return_value := 'N';
               get_endorsement_master (TRIM (fo_stat.eff_date),
                                       TRIM (fo_stat.exp_date),
                                       TRIM (fo_stat.actg_date),
                                       TRIM (fo_stat.chg_date),
                                       TRIM (fo_stat.user_line),
                                       TRIM (fo_stat.policy_number),
                                       'ND FO 03',
                                       v_return_value,
                                       v_return_parm1,
                                       v_return_limit);

               IF TRIM (v_return_value) = 'Y'
               THEN
                  v_emp_liab := '31';
                  v_liab_limit := '31';

                  IF (TRIM (v_return_limit) = '25000' AND v_med_limit = '1')
                  THEN
                     v_emp_liab := '31';
                     v_liab_limit := '31';
                  ELSE
                     IF (    TRIM (v_return_limit) = '50000'
                         AND v_med_limit = '1')
                     THEN
                        v_emp_liab := '32';
                        v_liab_limit := '32';
                     ELSE
                        IF (    TRIM (v_return_limit) = '25000'
                            AND v_med_limit = '5')
                        THEN
                           v_emp_liab := '33';
                           v_liab_limit := '33';
                        ELSE
                           IF (    TRIM (v_return_limit) = '50000'
                               AND v_med_limit = '5')
                           THEN
                              v_emp_liab := '34';
                              v_liab_limit := '34';
                           END IF;
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

         ----property
         --    v_protection_code := ' ';
         IF v_asl = '051'
         THEN
            v_policy_form := '20';
         --     v_protection_code := substr(fo_stat.prot_class,1,2);
         END IF;

         v_loss_settle := ' ';

     /*    IF v_asl = '051'
         THEN
            IF fo_stat.user_line <> '26'
            THEN
               CASE fo_stat.acv_rc
                  WHEN 'A'
                  THEN
                     v_loss_settle := '1';
                  WHEN 'R'
                  THEN
                     v_loss_settle := '2';
                  ELSE
                     v_loss_settle := '9';
               END CASE;
            ELSE
               ----this is missinng on user line 26 items ----use line 24
               v_loss_settle := '?'; ---test have Sharon set this in her cobol program PDK03-MVALUATION from the master populates this. This is missing on the HISTOR_WANG_ITEM and PRT_ITEM
            END IF;
         END IF;
       */
       
       IF v_asl = '051'   THEN
               CASE fo_stat.acv_rc
                  WHEN 'A'
                  THEN
                     v_loss_settle := '1';
                  WHEN 'R'
                  THEN
                     v_loss_settle := '2';
                  ELSE
                     v_loss_settle := '9';
               END CASE;
       END IF;
       
       v_amt_of_ins := ' ';
       n_amt_of_ins := 0;
       IF v_asl = '051' then
         v_amt_of_ins := ' ';
         n_amt_of_ins := (round(fo_stat.exposure/1000)) * 1000;
         if n_amt_of_ins < 1 then
              n_amt_of_ins := 1;
         end if;
         v_amt_of_ins := lpad(to_char(n_amt_of_ins),6,0);
       end if;

         v_ded_amt := ' ';

         IF v_asl = '051'
         THEN
            n_num_ded_amt := TO_NUMBER (fo_stat.DED_AMT);

            CASE n_num_ded_amt
               WHEN 250
               THEN
                  v_ded_amt := '2';
               WHEN 500
               THEN
                  v_ded_amt := '3';
               WHEN 1000
               THEN
                  v_ded_amt := '4';
               WHEN 1500
               THEN
                  v_ded_amt := '5';
               WHEN 2000
               THEN
                  v_ded_amt := '6';
               WHEN 2500
               THEN
                  v_ded_amt := '7';
               WHEN 3000
               THEN
                  v_ded_amt := '8';
               ELSE
                  v_ded_amt := '9';
            END CASE;
         END IF;



         v_prop_liab_fields := ' ';

         IF v_asl = '052'
         THEN
            -- liab
            v_prop_liab_fields :=
               LPAD(v_num_acres,1,' ') || LPAD(v_liab_limit,2,' ') || LPAD(v_aggregate_limit,2,' ') || '     ';
         ELSE
            --- prop
            v_prop_liab_fields :=
                  LPAD(v_save_protection_code,2,' ')
               || LPAD(v_loss_settle,1,' ')
               || LPAD (v_amt_of_ins, 6, 0)
               || LPAD(v_ded_amt,1,' ');
         END IF;

         v_exposure := '001';

       

         IF fo_stat.end_num = 'AMS001'
         THEN
            v_exposure := TRIM (fo_stat.ams_parm_1);
         END IF;

         IF fo_stat.end_num = 'POLADJ'
         THEN
            IF fo_stat.written_prem > 0
            THEN
               v_exposure :=
                  TO_CHAR (
                     ROUND (
                          (  1
                           +   (  fo_stat.inforce_prem
                                / (v_total_prem - fo_stat.inforce_prem))
                             * 100)
                        - 100));
            ELSE
               v_exposure :=
                  TO_CHAR (
                       ROUND (
                            (  100
                             - (  fo_stat.inforce_prem
                                / (v_total_prem - fo_stat.inforce_prem)))
                          * 100)
                     - 100);
            END IF;
         END IF;



         v_written_prem := ROUND (fo_stat.WRITTEN_PREM);
         v_windstorm_ded := ' ';           --- does not apply per Debbie Gilmo
         v_company := '0060';
         v_id_cd := '05';


         INSERT INTO RPT_POLICY_MSO_FO_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             TRANS_EFF_DATE,
                                             TRANS_EXP_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             FILLER_1,
                                             PROT_RATING_TERR,
                                             POLICY_FORM,
                                             OCCUPANCY_CLASS,
                                             PROP_LIAB_FIELDS,
                                             RATE_MOD_FACTOR,
                                             filler_2,
                                             PREMIUM_AMOUNT,
                                             MSO_MODULE,
                                             POLICY_NUMBER,
                                             ZIP_CODE,
                                             FILLER_3,
                                             LOSS_COST_MULT,
                                             FILLER_4,
                                             WINDSTORM_DED,
                                             FILLER_5,
                                             COV_CODE_CO_USE)
                                          
              VALUES (v_company,                                     --company
                      v_trans_code,                                --transcode
                      TRIM (fo_stat.trans_code),                   --transcode
                      '2',                             -- stat plan indicatory
                      TO_CHAR (fo_stat.ACTG_DATE, 'MMDDYY'),     --acctng_date
                      TO_CHAR (fo_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE ,
                      TO_CHAR (fo_stat.CHG_DATE, 'MMDDYY'), -- TRANS_EFF_DATE,
                      TO_CHAR (fo_stat.EXP_DATE, 'MMDDYY'), -- TRANS_EXP_DATE ,
                      '03',                                           -- state
                      v_asl,                                            -- ASL
                      '914',                                       -- SUBLINE,
                      ' ',                                         -- FILLER_1
                      lpad(TRIM (FO_STAT.TERR),2,0),             ---test these are all 1
                      V_POLICY_FORM,
                      v_save_class_code,                      --position 38-41
                      v_prop_liab_fields,                    -- position 42-51
                      v_exposure,          ---rate modification position 52-54
                      '  ',           --- position 55-56 caus of loss filler 2
                      v_written_prem, -- Round this to whole dollar  PREMIUM_AMOUNT,    pos 58-65
                      v_id_cd,                         -- MSO_MODULE,    66-67
                      TRIM (fo_stat.POLICY_NUMBER),  -- POLICY_NUMBER,   68-80
                      fo_stat.LOC_ZIP,                       -- ZIP_CODE 81-85
                      ' ',                               -- filler_3 pos 86-99
                      v_loss_cost_mult,         -- LOSS_COST_MULT pos 100-102,
                      '   ',                         -- FILLER_4   pos 103-105
                      v_windstorm_ded, -- WIND STORM DED only filled in for property
                      ' ',
                       v_mso_fo_cov_code);
                  

         COMMIT;
      END LOOP;

      CLOSE all_fo_stat;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || fo_stat.policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE collect_prem_mso_ho_data_loop
   IS
      --speeding this up
      v_procname            RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                               := 'ND_BUREAU.COLLECT_PREM_MSO_HO_DATA_LOOP';
      v_err_mssg            VARCHAR2 (200);
      v_err_loc             VARCHAR2 (100);

      CURSOR all_ho_stat
      IS
           SELECT *
             FROM RPT_POLICY_HO_STAT A
            WHERE  --test88   a.state_cd = 'NJ'
                   a.state_cd in ('AR','NJ') ----test88
                  AND a.book_date >= TO_DATE (v_begin_date)
                  AND a.book_date <= TO_DATE (v_end_date)
                --  AND a.company = '04'  --test 88
                  and a.company in ('04','01') --test88
                --  AND a.group_line = '24'   --test88
                  AND a.group_line in ( '24','26') --test88
                  AND A.COV_CODE < '990'
                  AND a.sdac_ind = '1'                --- direct  premium only
         ORDER BY A.COMPANY,
                  A.BOOK_DATE,
                  A.STATE_CD,
                  A.GROUP_LINE,
                  A.POLICY_NUMBER;

      ho_stat               all_ho_stat%ROWTYPE;
      v_trans_code          VARCHAR2 (1);
      v_amt_of_ins          VARCHAR (3);
      v_prot_rating_ter     VARCHAR2 (2);
      v_construct_code      VARCHAR2 (2);
      v_ded_amt             VARCHAR (1);
      v_dwell_code          VARCHAR (1);
      v_wind_hail           VARCHAR (1);
      V_MPL47_MPL49         VARCHAR (1);
      v_windstorm_ded       VARCHAR (3);
      v_pct_of_manual_flg   VARCHAR (1);
      v_pct_of_manual       VARCHAR (3);
      v_program_code        VARCHAR (1);
      v_liab_limit          VARCHAR (1);
      v_type_of_business    VARCHAR (1) := '1';
      v_const_year          NUMBER := 0;
      v_misc_end            VARCHAR (3);
      v_count               NUMBER;
      v_written_prem        NUMBER := 0;
      v_num_ded_amt         NUMBER := 0;
      v_terr_code           VARCHAR (2);
      v_company             VARCHAR (4);
      v_id_cd               VARCHAR (2);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_prem_mso_ho_data_loop_insert';

      OPEN all_ho_stat;

      LOOP
         FETCH all_ho_stat INTO ho_stat;

         EXIT WHEN all_ho_stat%NOTFOUND;


         --   DBMS_OUTPUT.PUT_LINE (ho_stat.policy_number);---test

         v_terr_code := TO_CHAR (LPAD (ho_stat.TERR, 2, '0'));
         convert_territory_ho (v_terr_code, v_terr_code);

         get_trans_code (ho_stat.trans_code,
                         ho_stat.old_new_stat,
                         ho_stat.chg_date,
                         ho_stat.eff_date,
                         v_trans_code);

         CASE TRIM (ho_stat.PROT_CLASS)
            WHEN 'A'
            THEN
               v_prot_rating_ter := '1';
            WHEN 'OA'
            THEN
               v_prot_rating_ter := '1';
            WHEN 'B'
            THEN
               v_prot_rating_ter := '3';
            WHEN 'OB'
            THEN
               v_prot_rating_ter := '3';
            WHEN 'C'
            THEN
               v_prot_rating_ter := '6';
            WHEN 'OC'
            THEN
               v_prot_rating_ter := '6';
            WHEN '10'
            THEN
               v_prot_rating_ter := '6';
            ELSE
               IF ho_stat.feet_hydrant > 1000
               THEN
                  v_prot_rating_ter := '3';
               ELSE
                  v_prot_rating_ter := '1';
               END IF;
         END CASE;

         IF (ho_stat.exposure > 999)
         THEN
            v_amt_of_ins := '999';
         ELSE
            IF (ho_stat.exposure = 0)
            THEN
               v_amt_of_ins := '001';
            ELSE
               IF (ho_stat.exposure < -999)
               THEN
                  v_amt_of_ins := '999';
               ELSE
                  v_amt_of_ins := LPAD (TO_CHAR (ho_stat.exposure), 3, '0');
               END IF;
            END IF;
         END IF;

         IF SUBSTR (v_filename, 9, 2) > '14'
         THEN                                        ---use new codes its 2015
            CASE TRIM (ho_stat.construct_code)
               WHEN 'FR'
               THEN
                  v_construct_code := '2';
               WHEN 'MV'
               THEN
                  v_construct_code := '4';
               WHEN 'MA'
               THEN
                  v_construct_code := '5';
               WHEN 'RE'
               THEN
                  v_construct_code := '6';
               WHEN 'AL'
               THEN
                  v_construct_code := '7';
               --   when '??'  then   v_construct_code := '8'; --specially rated
               ELSE
                  v_construct_code := '9';
            END CASE;
         ELSE
            CASE TRIM (ho_stat.construct_code)
               WHEN 'FR'
               THEN
                  v_construct_code := '1';
               ELSE
                  v_construct_code := '3';
            END CASE;
         END IF;

         v_num_ded_amt := TO_NUMBER (ho_stat.DED_AMT);

         CASE v_num_ded_amt
            WHEN 50
            THEN
               v_ded_amt := 'a';
            WHEN 100
            THEN
               v_ded_amt := '1';
            WHEN 200
            THEN
               v_ded_amt := '2';
            WHEN 250
            THEN
               v_ded_amt := 'd';
            WHEN 500
            THEN
               v_ded_amt := '3';
            WHEN 750
            THEN
               v_ded_amt := '4';
            WHEN 1000
            THEN
               v_ded_amt := '5';
            WHEN 2000
            THEN
               v_ded_amt := '6';
            WHEN 3000
            THEN
               v_ded_amt := '7';
            ELSE
               IF ho_stat.DED_AMT > 101 AND ho_stat.DED_AMT < 199
               THEN
                  v_ded_amt := 'b';
               ELSE
                  IF ho_stat.DED_AMT > 201 AND ho_stat.DED_AMT < 249
                  THEN
                     v_ded_amt := 'c';
                  ELSE
                     v_ded_amt := '9';
                  END IF;
               END IF;
         END CASE;

         get_limits_master (TRIM (ho_stat.eff_date),
                            TRIM (ho_stat.exp_date),
                            TRIM (ho_stat.actg_date),
                            TRIM (ho_stat.chg_date),
                            TRIM (ho_stat.user_line),
                            TRIM (ho_stat.policy_number),
                            '804',
                            v_liab_limit);

         EXIT WHEN v_err_fl != 0;

         --coverage code position 46
         CASE TRIM (ho_stat.DWELL_CODE)
            WHEN 'P'
            THEN
               v_dwell_code := '1';
            WHEN 'S'
            THEN
               v_dwell_code := '5';
            WHEN 'R'
            THEN
               v_dwell_code := '5';
            WHEN '2'
            THEN
               v_dwell_code := '7';
            WHEN '3'
            THEN
               v_dwell_code := '7';
            ELSE
               v_dwell_code := '1';
         END CASE;

         v_return_value := 'N';
         get_endorsement_master (TRIM (ho_stat.eff_date),
                                 TRIM (ho_stat.exp_date),
                                 TRIM (ho_stat.actg_date),
                                 TRIM (ho_stat.chg_date),
                                 TRIM (ho_stat.user_line),
                                 TRIM (ho_stat.policy_number),
                                 'MPL47',
                                 v_return_value,
                                 v_return_parm1,
                                 v_return_limit);
         V_MPL47_MPL49 := TRIM (v_return_value);

         EXIT WHEN v_err_fl != 0;

         IF v_mpl47_mpl49 = 'N'
         THEN
            v_return_value := 'N';
            get_endorsement_master (TRIM (ho_stat.eff_date),
                                    TRIM (ho_stat.exp_date),
                                    TRIM (ho_stat.actg_date),
                                    TRIM (ho_stat.chg_date),
                                    TRIM (ho_stat.user_line),
                                    TRIM (ho_stat.policy_number),
                                    'MPL49',
                                    v_return_value,
                                    v_return_parm1,
                                    v_return_limit);
            EXIT WHEN v_err_fl != 0;
            V_MPL47_MPL49 := TRIM (v_return_value);
         END IF;

         IF V_MPL47_MPL49 = 'Y'
         THEN
            CASE v_dwell_code
               WHEN '1'
               THEN
                  v_dwell_code := '2';
               WHEN '5'
               THEN
                  v_dwell_code := '4';
               WHEN '7'
               THEN
                  v_dwell_code := '6';
            END CASE;
         END IF;

        

         v_return_value := 'N';
         get_endorsement_master (TRIM (ho_stat.eff_date),
                                 TRIM (ho_stat.exp_date),
                                 TRIM (ho_stat.actg_date),
                                 TRIM (ho_stat.chg_date),
                                 TRIM (ho_stat.user_line),
                                 TRIM (ho_stat.policy_number),
                                 'PRFD',
                                 v_return_value,
                                 v_return_parm1,
                                 v_return_limit);
         EXIT WHEN v_err_fl != 0;

         IF TRIM (v_return_value) = 'Y'
         THEN
            v_program_code := '2';
         ELSE
            v_program_code := '1';
         END IF;



         v_return_value := 'N';
         get_endorsement_master (TRIM (ho_stat.eff_date),
                                 TRIM (ho_stat.exp_date),
                                 TRIM (ho_stat.actg_date),
                                 TRIM (ho_stat.chg_date),
                                 TRIM (ho_stat.user_line),
                                 TRIM (ho_stat.policy_number),
                                 'MPL22',
                                 v_return_value,
                                 v_return_parm1,
                                 v_return_limit);
         EXIT WHEN v_err_fl != 0;

         IF TRIM (v_return_value) = 'N'
         THEN
            v_windstorm_ded := ' ';
         ELSE
            CASE TRIM (v_return_parm1)
               WHEN ''
               THEN
                  v_windstorm_ded := ' ';
               WHEN ' '
               THEN
                  v_windstorm_ded := ' ';
               WHEN '0'
               THEN
                  v_windstorm_ded := ' ';
               WHEN '050'
               THEN
                  v_windstorm_ded := '7';
               WHEN '030'
               THEN
                  v_windstorm_ded := '6';
               WHEN '020'
               THEN
                  v_windstorm_ded := '5';
               WHEN '010'
               THEN
                  v_windstorm_ded := '4';
               WHEN '005'
               THEN
                  v_windstorm_ded := '3';
               ELSE
                  v_windstorm_ded := '9';
            END CASE;
         END IF;




         v_return_value := 'N';
         get_endorsement_master (TRIM (ho_stat.eff_date),
                                 TRIM (ho_stat.exp_date),
                                 TRIM (ho_stat.actg_date),
                                 TRIM (ho_stat.chg_date),
                                 TRIM (ho_stat.user_line),
                                 TRIM (ho_stat.policy_number),
                                 'FM-518',
                                 v_return_value,
                                 v_return_parm1,
                                 v_return_limit);
         EXIT WHEN v_err_fl != 0;
         v_pct_of_manual_flg := TRIM (v_return_value);

         IF v_pct_of_manual_flg = 'N'
         THEN
            v_return_value := 'N';
            get_endorsement_master (TRIM (ho_stat.eff_date),
                                    TRIM (ho_stat.exp_date),
                                    TRIM (ho_stat.actg_date),
                                    TRIM (ho_stat.chg_date),
                                    TRIM (ho_stat.user_line),
                                    TRIM (ho_stat.policy_number),
                                    'FM-424',
                                    v_return_value,
                                    v_return_parm1,
                                    v_return_limit);
            EXIT WHEN v_err_fl != 0;
            v_pct_of_manual_flg := TRIM (v_return_value);
         END IF;

         IF v_pct_of_manual_flg = 'Y'
         THEN
            v_pct_of_manual := '095';
         ELSE
            v_pct_of_manual := '100';
         END IF;

   
         v_type_of_business := '1';

         IF ho_stat.const_year = 0
         THEN
            v_const_year := 9999;
         ELSE
            v_const_year := ho_stat.const_year;
         END IF;

         v_misc_end := ' ';
         v_return_value := 'N';
         get_endorsement_master (TRIM (ho_stat.eff_date),
                                 TRIM (ho_stat.exp_date),
                                 TRIM (ho_stat.actg_date),
                                 TRIM (ho_stat.chg_date),
                                 TRIM (ho_stat.user_line),
                                 TRIM (ho_stat.policy_number),
                                 'HO 04 54',
                                 v_return_value,
                                 v_return_parm1,
                                 v_return_limit);
         EXIT WHEN v_err_fl != 0;

         IF RTRIM (v_return_value) = 'Y'
         THEN
            v_misc_end := '001';                                 -- Earthquake
         END IF;

 

         v_written_prem := ROUND (ho_stat.WRITTEN_PREM);

         IF TRIM (ho_stat.company) = '04'
         THEN
            v_company := '0056';
         ELSE
            v_company := '0060';
         END IF;

         v_id_cd := '01';

         INSERT INTO RPT_POLICY_MSO_HO_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             TRANS_EFF_DATE,
                                             TRANS_EXP_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             FILLER_1,
                                             FILLER_2,
                                             PROT_RATING_TERR,
                                             POLICY_FORM,
                                             AMOUNT_OF_INS,
                                             PROGRAM_CODE,
                                             NUM_OF_FAMILIES,
                                             CONSTRUCTION,
                                             LIAB_LIMIT_COVE,
                                             DEDUCTIBLE_SIZE,
                                             COVERAGE,
                                             TERR_CODE,
                                             FILLER_3,
                                             RATE_SET,
                                             PCT_OF_MANUAL,
                                             FILLER_5,
                                             PREMIUM_AMOUNT,
                                             MSO_MODULE,
                                             POLICY_NUMBER,
                                             ZIP_CODE,
                                             ZIP_CODE2,
                                             FILLER_6,
                                             LOSS_COST_MULT,
                                             INSURANCE_SCORE,
                                             WINDSTORM_DED,
                                             FILLER_7,
                                             FILLER_8,
                                             FILLER_9,
                                             ALAE,
                                             FILLER_10,
                                             TYPE_OF_BUSINESS,
                                             YEAR_OF_CONSTRUCTION,
                                             MISC_END,
                                             FILLER_11)
              VALUES (v_company,                                     --company
                      v_trans_code,                                --transcode
                      TRIM (ho_stat.trans_code),                   --transcode
                      '2',                                        -- stat plan
                      TO_CHAR (ho_stat.ACTG_DATE, 'MMDDYY'),     --acctng_date
                      TO_CHAR (ho_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE ,
                      TO_CHAR (ho_stat.CHG_DATE, 'MMDDYY'), -- TRANS_EFF_DATE,
                      TO_CHAR (ho_stat.EXP_DATE, 'MMDDYY'), -- TRANS_EXP_DATE ,
                      '29',                                           -- state
                      '040',                                            -- ASL
                      '040',                                       -- SUBLINE,
                      ' ',                                         -- FILLER_1
                      ' ',                                         -- FILLER_2
                      v_prot_rating_ter,                  -- PROT_RATING_TERR,
                      TRIM (ho_stat.form_num),                  -- POLICY_FORM
                      v_amt_of_ins,      -- AMOUNT_OF_INS this is not rounded,
                      v_program_code,                           --PROGRAM_CODE
                      ho_stat.FAMILIES,                    -- NUM_OF_FAMILIES,
                      v_construct_code,                        -- CONSTRUCTION
                      v_liab_limit,                             --- LIAB-LIMIT
                      v_ded_amt,                          -- DEDUCTIBLE_SIZE ,
                      v_dwell_code, -- COVERAGE, update this later joining to rpt_coverage to get the
                      v_terr_code,                               -- TERR_CODE,
                      ' ',                                         -- filler_3
                      '04',                                       -- RATE_SET,
                      v_pct_of_manual, -- PCT_OF_MANUAL,  - update this more later
                      ' ',                                         -- filler 5
                      v_written_prem, -- Round this to whole dollar  PREMIUM_AMOUNT,
                      v_id_cd,                                  -- MSO_MODULE,
                      TRIM (ho_stat.POLICY_NUMBER),          -- POLICY_NUMBER,
                      ho_stat.LOC_ZIP,                           -- ZIP_CODE ,
                      NVL (ho_stat.LOC_ZIP2, ' '),  -- ZIP_CODE2 , testing sum
                      ' ',                                        -- filler_6,
                      '   ',                                -- LOSS_COST_MULT,
                      '   ',                               -- INSURANCE_SCORE,
                      v_windstorm_ded,                       -- WIND STORM DED
                      ' ',                                         -- filler_7
                      ' ',                                    -- filler_8  new
                      ' ',                                    -- filler 9  new
                      '       ',                               -- ALAE     new
                      ' ',                                    -- filler 10 new
                      v_type_of_business,              -- type of business new
                      v_const_year,                 --YEAR_OF_CONSTRUCTION new
                      v_misc_end,                              -- MISC_END new
                      ' ');                                   --filler 11  new


         COMMIT;                                                       ---test
      END LOOP;

      CLOSE all_ho_stat;
  
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || ho_stat.policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;
   
 PROCEDURE collect_claim_fo_paid
   IS
      v_procname            RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                               := 'ND_BUREAU.COLLECT_CLAIM_FO_PAID';
      v_err_mssg            VARCHAR2 (200);
      v_err_loc             VARCHAR2 (100);

      CURSOR all_Fo_stat
      IS
           SELECT *
             FROM RPT_CLAIMS_FO_STAT A
            WHERE     a.company = '01'
                  AND a.state_cd = 'AR'
                  AND A.GROUP_LINE IN ('26')
                  AND a.book_date >= TO_DATE (v_begin_date)
                  AND a.book_date <= TO_DATE (v_end_date)
                  AND A.COV_CODE < '990'
                  AND a.sdac_ind = '1'
                  AND a.trans_code IN
                         ('41',
                          '51',
                          '61',                               ---loss payments
                          '42',
                          '62',                           -- expense payments
                          '44',
                          '54',
                          '64',
                          '47',
                          '57',
                          '67',
                          '48',
                          '58',
                          '68',
                          '71',
                          '81',
                          '91',                         ---recoveries   -05/05
                          '72',
                          '82',
                          '92',
                          '86',                                  --subrogation
                          '73',
                          '83',
                          '93',
                          '87')                                 --contribution
                  ORDER BY a.company,
                  a.state_cd,
                  a.group_line,
                  a.book_date,
                  A.CLAIM_NUMBER;

      fo_stat               all_fo_stat%ROWTYPE;
      v_total_prem          NUMBER;
      v_trans_code          VARCHAR2 (1);
      v_orig_trans_code     VARCHAR2 (2);
      v_ded_amt             VARCHAR (1);
      v_dwell_code          VARCHAR (1);
      v_wind_hail           VARCHAR (1);
      v_windstorm_ded       VARCHAR (3);
      v_program_code        VARCHAR (1);
      v_liab_limit          VARCHAR (2);
      v_count               NUMBER;
      v_claim_count         NUMBER;
      v_loss_amount         NUMBER;
       v_PROTECTION_CODE     VARCHAR (2);
      v_POLICY_FORM         VARCHAR (2);
      v_alae_amount         NUMBER;
      v_loss_type           VARCHAR (2);
      v_num_ded_amt         NUMBER := 0;
      v_zip                VARCHAR (5);
      v_terr_code           VARCHAR (2);
      v_id_cd               VARCHAR (2);
      v_company             VARCHAR (4);
      v_asl                 varchar (3);
      v_exposure            VARCHAR (10);
      n_exposure            NUMBER := 0;
      v_prop_liab_fields   varchar (10);
      v_save_class_code     varchar (4);
      v_bureau_class_code     varchar (4);
      v_loss_settle           varchar(1);
      v_company_use         varchar(8);
      v_amt_of_ins         number;
      v_aggregate_limit    varchar (2);
      v_num_acres          varchar (2);
      n_num_acres          number;
      v_med_limit          varchar (2);
      v_emp_liab           varchar (2);
      
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_claim_fo_data_paid';
      v_alae_amount := 0;
      OPEN all_fo_stat;

      LOOP
         FETCH all_fo_stat INTO fo_stat;

         EXIT WHEN all_fo_stat%NOTFOUND;

        
         IF fo_stat.loss_amount > 0
         THEN
            IF    fo_stat.trans_code = '41'
               OR fo_stat.trans_code = '51'
               OR fo_stat.trans_code = '61'
            THEN
               v_TRANS_CODE := '6';
               v_orig_trans_code := '6L';
               v_loss_amount := fo_stat.loss_amount;
               v_alae_amount := 0;
            END IF;

            IF    fo_stat.trans_code = '71'
               OR                                                    --salvage
                 fo_stat.trans_code = '81'
               OR fo_stat.trans_code = '91'
               OR fo_stat.trans_code = '72'
               OR                                                       -- sub
                 fo_stat.trans_code = '82'
               OR fo_stat.trans_code = '92'
               OR fo_stat.trans_code = '86'
               OR fo_stat.trans_code = '87'
               OR fo_stat.trans_code = '73'
               OR                                             -- contributioni
                 fo_stat.trans_code = '83'
               OR fo_stat.trans_code = '93'
            THEN
               v_TRANS_CODE := '7';
               v_orig_trans_code := '7L';
               v_loss_amount := (fo_stat.loss_amount * -1);
               v_alae_amount := 0;
            END IF;

            IF    fo_stat.trans_code = '42'
               OR                                                   -- expense
                 fo_stat.trans_code = '62'
               OR fo_stat.trans_code = '44'
               OR fo_stat.trans_code = '54'
               OR fo_stat.trans_code = '64'
               OR fo_stat.trans_code = '47'
               OR fo_stat.trans_code = '57'
               OR fo_stat.trans_code = '67'
               OR fo_stat.trans_code = '48'
               OR fo_stat.trans_code = '58'
               OR fo_stat.trans_code = '68'
            THEN
               v_trans_code := '6';
               v_orig_trans_code := '6X';
               v_loss_amount := 0;
               v_alae_amount := fo_stat.loss_amount;
            END IF;
         ELSE
            IF    fo_stat.trans_code = '41'
               OR fo_stat.trans_code = '51'
               OR fo_stat.trans_code = '61'
            THEN         --- loss payments correction comming in as a negative
               v_TRANS_CODE := '7';
               v_orig_trans_code := '7L';                    --- loss payments
               v_loss_amount := fo_stat.loss_amount;
               v_alae_amount := 0;
            END IF;

            IF    fo_stat.trans_code = '71'
               OR                                                    --salvage
                 fo_stat.trans_code = '81'
               OR fo_stat.trans_code = '91'
               OR fo_stat.trans_code = '72'
               OR                                                       -- sub
                 fo_stat.trans_code = '82'
               OR fo_stat.trans_code = '92'
               OR fo_stat.trans_code = '86'
               OR fo_stat.trans_code = '87'
               OR fo_stat.trans_code = '73'
               OR                                             -- contributioni
                 fo_stat.trans_code = '83'
               OR fo_stat.trans_code = '93'
            THEN
               v_TRANS_CODE := '6';
               v_orig_trans_code := '6L';
               v_loss_amount := (fo_stat.loss_amount * -1); ---positive is a 6--
               v_alae_amount := 0;
            END IF;

            IF    fo_stat.trans_code = '42'
               OR                                                   -- expense
                 fo_stat.trans_code = '62'
               OR fo_stat.trans_code = '44'
               OR fo_stat.trans_code = '54'
               OR fo_stat.trans_code = '64'
               OR fo_stat.trans_code = '47'
               OR fo_stat.trans_code = '57'
               OR fo_stat.trans_code = '67'
               OR fo_stat.trans_code = '48'
               OR fo_stat.trans_code = '58'
               OR fo_stat.trans_code = '68'
            THEN
               v_trans_code := '7';
               v_orig_trans_code := '7X';                           -- expense
               v_loss_amount := 0;
               v_alae_amount := fo_stat.loss_amount;
            END IF;
         END IF;

        if trim(fo_stat.claim_number) = 'C1585328'
            then
                v_trans_code := v_trans_code;
            end if;
        
        IF    TRIM (fo_stat.cov_code) = '834'
            OR TRIM (fo_stat.cov_code) = '835'
            OR TRIM (fo_stat.cov_code) = '410'
            OR TRIM (fo_stat.end_num) = 'ADD LOT'
            OR TRIM (fo_stat.end_num) = 'ND FO 03'
            OR TRIM (fo_stat.end_num) = 'MFO 109'
            OR TRIM (fo_stat.end_num) = 'PREMISES'
            OR TRIM (fo_stat.end_num) = 'MFO 153'
            OR TRIM (fo_stat.end_num) = 'MFO 154'
         THEN
            --Commercial Multi-Peril Liability
            v_asl := '052';
         ELSE
            --Commercial Multi-Peril Property
            v_asl := '051';
         END IF;

        
         ----get from item
         v_bureau_class_code := ' ';
         v_protection_code := ' ';
        
         get_item_master_fo_class_code (TRIM (fo_stat.eff_date),
                          TRIM (fo_stat.exp_date),
                          TRIM (fo_stat.actg_date),
                          TRIM (fo_stat.change_date),
                          TRIM (fo_stat.user_line),
                          TRIM (fo_stat.policy_number),
                          TRIM (fo_stat.item_num),
                          v_bureau_class_code,
                          v_protection_code,
                          v_total_prem,
                          v_return_value);

         --if not in item default
         IF TRIM(v_bureau_class_code) = '' OR
             V_BUREAU_CLASS_CODE IS NULL THEN
            CASE TRIM (fo_stat.user_line)
               WHEN '24'
               THEN
                  v_bureau_class_code := '3010';         ----coverage code 830
               WHEN '32'
               THEN
                  v_bureau_class_code := '3060';          ---coverage code 830
               WHEN '26'
               THEN
                  v_bureau_class_code := '3340'; -- coverage b e f g coverage  831
               ELSE
                  v_bureau_class_code := ' ';
            END CASE;

             CASE TRIM (fo_stat.cov_code)
                --   when '830' then v_bureau_class_code := trim(fo_stat.class_code); -- line 24  cov a buildings
                --   when '831' then v_bureau_class_code := trim(fo_stat.class_code); -- line 26 cov b unscheduled
                WHEN '832'
                THEN
                   v_bureau_class_code := TRIM (fo_stat.class_code); -- line 27 cov c farm buildings
                WHEN '833'
                THEN
                   v_bureau_class_code := '3500'; -- line 26 8 coverage e unscheduled
                WHEN '834'
                THEN
                   v_bureau_class_code := '3610';  -- line 26 coverage F liability
                WHEN '835'
                THEN
                   v_bureau_class_code := '3640';    -- line 26 coverage g med pay
                --     when '836' then v_bureau_class_code := '???';                   --reinsurance i dont think we need to report this?
                --    when '959' then v_bureau_class_code :=  -----'???';                   -- no idea
    
                WHEN '406'
                THEN
                   v_bureau_class_code := '3650'; --  endorsement MFO 109 Watercraft Liab
                WHEN '410'
                THEN
                   v_bureau_class_code := '3660'; -- endorsement MF 03 03 Employers Liab;
                ELSE
                   v_bureau_class_code := v_bureau_class_code;
             END CASE;
         END IF;

         v_save_class_code := v_bureau_class_code;

         ----prot_class is on line 26 only
         -- v_bureau_class_code := ' ';
         -- v_protection_code := ' ';
         
         v_protection_code := trim(fo_stat.prot_class);   -- Protection Code is in Stat Table
         
         /* get_item_master (TRIM (fo_stat.eff_date),
                          TRIM (fo_stat.exp_date),
                          TRIM (fo_stat.actg_date),
                          TRIM (fo_stat.change_date),
                          '26',
                          TRIM (fo_stat.policy_number),
                          1,
                          v_bureau_class_code,
                          v_protection_code,
                          v_total_prem,
                          v_return_value);  */      
         
         
         
         /*
      
         IF fo_stat.form_num = '4' OR fo_stat.form_num = '6'
         THEN
            get_limits_master_for_loss (TRIM (fo_stat.eff_date),
                                        TRIM (fo_stat.exp_date),
                                        TRIM (fo_stat.actg_date),
                                        TRIM (fo_stat.loss_date),
                                        TRIM (fo_stat.user_line),
                                        TRIM (fo_stat.policy_number),
                                        '802',
                                        v_amt_of_ins);
         ELSE
            get_limits_master_for_loss (TRIM (fo_stat.eff_date),
                                        TRIM (fo_stat.exp_date),
                                        TRIM (fo_stat.actg_date),
                                        TRIM (fo_stat.loss_date),
                                        TRIM (fo_stat.user_line),
                                        TRIM (fo_stat.policy_number),
                                        '800',
                                        v_amt_of_ins);
         END IF;
*/

        -- v_amt_of_ins := LPAD (TO_CHAR (n_amt_of_ins), 3, '0');

         ------liability
         v_aggregate_limit := '  ';
         v_num_acres := ' ';
         n_num_acres := 0;

         IF v_asl = '052'
         THEN                                                   --- liab found
            V_AGGREgATE_LIMIT := '00';
            n_num_acres := fo_stat.sq_feet;

         
            IF TRIM (fo_stat.end_num) = 'ADD LOT'
            THEN
               n_num_acres := TO_NUMBER (TRIM (fo_stat.ams_parm_1));
            END IF;

            v_num_acres := '1';


            IF n_num_acres > 500
            THEN
               v_num_acres := '4';
            ELSE
               IF n_num_acres > 160
               THEN
                  v_num_acres := '3';
               ELSE
                  IF n_num_acres > 40
                  THEN
                     v_num_acres := '2';
                  ELSE
                     IF n_num_acres > 0
                     THEN
                        v_num_acres := '1';
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;
        
            v_num_ded_amt := TO_NUMBER (fo_stat.DED_AMT);
         CASE v_num_ded_amt
            WHEN 250
            THEN
               v_ded_amt := '2';
            WHEN 500
            THEN
               v_ded_amt := '3';
            WHEN 1000
            THEN
               v_ded_amt := '4';
            WHEN 1500
            THEN
               v_ded_amt := '5';
            WHEN 2000
            THEN
               v_ded_amt := '6';
            WHEN 2500
            THEN
               v_ded_amt := '7';
            WHEN 3000
            THEN
               v_ded_amt := '8';
            ELSE
               v_ded_amt := '9';    
         END CASE;

         v_liab_limit := ' ';

         IF v_asl = '052'
         THEN
            get_limits_master (TRIM (fo_stat.eff_date),
                               TRIM (fo_stat.exp_date),
                               TRIM (fo_stat.actg_date),
                               TRIM (fo_stat.change_date),
                               TRIM (fo_stat.user_line),
                               TRIM (fo_stat.policy_number),
                               '834',
                               v_liab_limit);
         END IF;

         IF v_asl = '052'
         THEN
            IF v_liab_limit <> ' '
            THEN                                                --- liab found
               v_policy_form := '80';
               v_return_value := 'N';
               get_endorsement_master (TRIM (fo_stat.eff_date),
                                       TRIM (fo_stat.exp_date),
                                       TRIM (fo_stat.actg_date),
                                       TRIM (fo_stat.change_date),
                                       TRIM (fo_stat.user_line),
                                       TRIM (fo_stat.policy_number),
                                       'MFO 020',
                                       v_return_value,
                                       v_return_parm1,
                                       v_return_limit);

               IF TRIM (v_return_value) = 'Y'
               THEN
                  v_policy_form := '81';
               END IF;
            END IF;
         END IF;

         v_med_limit := ' ';

         IF v_asl = '052'
         THEN
            IF fo_stat.end_num = 'ND FO 03'
            THEN                     -- only report med pay for employers liab
               get_limits_master (TRIM (fo_stat.eff_date),
                                  TRIM (fo_stat.exp_date),
                                  TRIM (fo_stat.actg_date),
                                  TRIM (fo_stat.change_date),
                                  TRIM (fo_stat.user_line),
                                  TRIM (fo_stat.policy_number),
                                  '835',
                                  v_med_limit);
            END IF;
         END IF;

         --determine if employer liab
         v_emp_liab := '  ';

         IF v_asl = '052'
         THEN
            IF fo_stat.end_num = 'ND FO 03'
            THEN
               v_return_value := 'N';
               get_endorsement_master (TRIM (fo_stat.eff_date),
                                       TRIM (fo_stat.exp_date),
                                       TRIM (fo_stat.actg_date),
                                       TRIM (fo_stat.change_date),
                                       TRIM (fo_stat.user_line),
                                       TRIM (fo_stat.policy_number),
                                       'ND FO 03',
                                       v_return_value,
                                       v_return_parm1,
                                       v_return_limit);

               IF TRIM (v_return_value) = 'Y'
               THEN
                  v_emp_liab := '31';
                  v_liab_limit := '31';

                  IF (TRIM (v_return_limit) = '25000' AND v_med_limit = '1')
                  THEN
                     v_emp_liab := '31';
                     v_liab_limit := '31';
                  ELSE
                     IF (    TRIM (v_return_limit) = '50000'
                         AND v_med_limit = '1')
                     THEN
                        v_emp_liab := '32';
                        v_liab_limit := '32';
                     ELSE
                        IF (    TRIM (v_return_limit) = '25000'
                            AND v_med_limit = '5')
                        THEN
                           v_emp_liab := '33';
                           v_liab_limit := '33';
                        ELSE
                           IF (    TRIM (v_return_limit) = '50000'
                               AND v_med_limit = '5')
                           THEN
                              v_emp_liab := '34';
                              v_liab_limit := '34';
                           END IF;
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

            IF v_asl = '051'
         THEN
            v_policy_form := '20';
         --     v_protection_code := substr(fo_stat.prot_class,1,2);
         END IF;

         v_loss_settle := ' ';

     /*    IF v_asl = '051'
         THEN
            IF fo_stat.user_line <> '26'
            THEN
               CASE fo_stat.acv_rc
                  WHEN 'A'
                  THEN
                     v_loss_settle := '1';
                  WHEN 'R'
                  THEN
                     v_loss_settle := '2';
                  ELSE
                     v_loss_settle := '9';
               END CASE;
            ELSE
               ----this is missinng on user line 26 items ----use line 24
               v_loss_settle := '?'; ---test have Sharon set this in her cobol program PDK03-MVALUATION from the master populates this. This is missing on the HISTOR_WANG_ITEM and PRT_ITEM
            END IF;
         END IF;
       */
       
           IF v_asl = '051'   THEN
               CASE fo_stat.acv_rc
                  WHEN 'A'
                  THEN
                     v_loss_settle := '1';
                  WHEN 'R'
                  THEN
                     v_loss_settle := '2';
                  ELSE
                     v_loss_settle := '9';
               END CASE;
            END IF;

       

         get_loss_type_fo (fo_stat.cov_code, fo_stat.cause_loss2, v_loss_type);

         --  v_loss_amount := ho_stat.loss_amount;
         v_claim_count := 0;

         v_exposure := '001';
         ---program code position 41
         v_return_value := 'N';
         get_endorsement_at_loss (TRIM (fo_stat.eff_date),
                                  TRIM (fo_stat.exp_date),
                                  TRIM (fo_stat.actg_date),
                                  TRIM (fo_stat.loss_date),
                                  TRIM (fo_stat.user_line),
                                  TRIM (fo_stat.policy_number),
                                  'PRFD',
                                  v_return_value,
                                  v_return_parm1);

         IF TRIM (v_return_value) = 'Y'
         THEN
            v_program_code := '2';
         ELSE
            v_program_code := '1';
         END IF;
         
         v_prop_liab_fields := '';
         if v_asl = '051'   -- Build Prop_Liab_Field
            then
                v_amt_of_ins := fo_stat.limit_amt_person;
                n_exposure := ROUND (TO_NUMBER (v_amt_of_ins) / 1000);
                v_exposure := trim( to_char ( n_exposure, '000000') );
        
                v_prop_liab_fields := lpad( v_protection_code || '  ', 2, ' ');   -- Protection Code is in Stat Table
                v_prop_liab_fields := v_prop_liab_fields || lpad(trim(v_loss_settle), 1, ' ');   -- Loss Settlement Option
                v_prop_liab_fields := v_prop_liab_fields || lpad(v_exposure, 6, '0');
                v_prop_liab_fields := v_prop_liab_fields || lpad(v_ded_amt, 1, ' '); -- deductable amt.code from DED_AMT   
            else
                if v_asl = '052'
                    then
            -- liab
                v_prop_liab_fields := LPAD(v_num_acres,1,' ') || LPAD(v_liab_Limit,2,' ') || LPAD(v_aggregate_limit,2,' ') || '     ';
                     else
                        v_prop_liab_fields := '          ';
                    end if;
            end if;

         v_windstorm_ded := ' ';
         v_exposure := '001';

         v_company := '0060';
 
         v_id_cd := '01';
 
        INSERT INTO  RPT_CLAIMS_MSO_FO_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             ACCIDENT_DATE,
                                             REPORT_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             CAT_CODE,
                                             PROT_RATING_TERR,
                                             POLICY_FORM,
                                             OCCUPANCY_CLASS ,
                                             PROP_LIAB_FIELDS,
                                             RATE_MOD_FACTOR,
                                             CAUSE_OF_LOSS,
                                             CLAIM_COUNT,
                                             LOSS_AMOUNT,
                                             MSO_MODULE,
                                             CLAIM_NUMBER,
                                             ZIP_CODE,
                                             FILLER_3,
                                             LOSS_COST_MULT,
                                             FILLER_4,
                                             WINDSTORM_DED,
                                             FILLER_5,
                                             ALAE,
                                             FILLER_6,
                                             COV_CODE_CO_USE )
              VALUES (v_company,                                     --company
                      v_trans_code,                                --transcode
                      v_orig_trans_code,
                      '2',                                        -- stat plan
                      TO_CHAR (fo_stat.ACTG_DATE, 'MMDDYY'),     --acctng_date
                      TO_CHAR (fo_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE ,
                      TO_CHAR (fo_stat.LOSS_DATE, 'MMDDYY'), -- TRANS_EFF_DATE,
                      TO_CHAR (fo_stat.REPORTED_DATE, 'MMDDYY'), -- TRANS_EXP_DATE ,
                      '03',                                           -- state
                      v_asl,                                            -- ASL
                      '914',                                       -- SUBLINE,
                      NVL (fo_stat.cat_number, ' '),              ---dmb 04/29
                   --   v_prot_rating_ter,                  -- PROT_RATING_TERR,
                    --  TRIM (fo_stat.form_num),                  -- POLICY_FORM
                      lpad(TRIM (FO_STAT.TERR),2,0),             ---test these are all 1
                      V_POLICY_FORM,
                      v_SAVE_CLASS_CODE,
                      v_prop_liab_fields  ,                  -- RATE_SET na to claims
                      v_exposure,
                      v_loss_type,
                      v_CLAIM_COUNT,
                      v_loss_amount, --- test1 ho_stat.LOSS_AMOUNT,              -- Round this to whole dollar  PREMIUM_AMOUNT,
                      v_id_cd,                                  -- MSO_MODULE,
                      (RPAD (TRIM (fo_stat.CLAIM_number), 10, ' ') || TRIM (TO_CHAR (fo_stat.cov_code))), -- trim( ho_stat.CLAIM_NUMBER),      -- POLICY_NUMBER,
                      fo_stat.LOC_ZIP,                           -- ZIP_CODE ,
                      ' ',
                      '211',                                -- LOSS_COST_MULT,
                      '   ',                               -- INSURANCE_SCORE,
                      v_windstorm_ded,          -- WIND STORM DED position 106
                      (RPAD(' ', 24, ' ') || rpad(fo_stat.cov_code,3,' ') || rpad(to_char(fo_stat.user_line),2,' ') || lpad(to_char(fo_stat.item_num),3,'0') || fo_stat.policy_number) ,   -- filler_5
                      v_alae_amount,
                      ' ',                                     ----filler6
                      v_company_use) ;                    
         COMMIT;

        <<skip_fo_claim>>
         NULL;
      END LOOP;

      CLOSE all_fo_stat;
  
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || fo_stat.claim_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;


   PROCEDURE collect_claim_ho_paid
   IS
      v_procname            RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                               := 'ND_BUREAU.COLLECT_CLAIM_HO_PAID';
      v_err_mssg            VARCHAR2 (200);
      v_err_loc             VARCHAR2 (100);

      CURSOR all_ho_stat
      IS
           SELECT *
             FROM RPT_CLAIMS_HO_STAT A
            WHERE     a.company = '04'
                  AND a.state_cd = 'NJ'
                  AND A.GROUP_LINE IN ('24')
                  AND a.book_date >= TO_DATE (v_begin_date)
                  AND a.book_date <= TO_DATE (v_end_date)
                  AND A.COV_CODE < '990'
                  AND a.sdac_ind = '1'
                  ---    and a.claim_number like 'P1588377%'    ----test 999
                  AND a.trans_code IN
                         ('41',
                          '51',
                          '61',                               ---loss payments
                          '42',
                          '62',                           -- expense payments
                          '44',
                          '54',
                          '64',
                          '47',
                          '57',
                          '67',
                          '48',
                          '58',
                          '68',
                          '71',
                          '81',
                          '91',                         ---recoveries   -05/05
                          '72',
                          '82',
                          '92',
                          '86',                                  --subrogation
                          '73',
                          '83',
                          '93',
                          '87')                                 --contribution
         -- and a.claim_number = 'P1473609' -- dmb
         ORDER BY a.company,
                  a.state_cd,
                  a.group_line,
                  a.book_date,
                  A.CLAIM_NUMBER;

      ho_stat               all_ho_stat%ROWTYPE;
      v_trans_code          VARCHAR2 (1);
      v_orig_trans_code     VARCHAR2 (2);
      v_amt_of_ins          VARCHAR (10);                                --dmb
      n_amt_of_ins          NUMBER (4);
      v_prot_rating_ter     VARCHAR2 (2);
      v_construct_code      VARCHAR2 (2);
      v_ded_amt             VARCHAR (1);
      v_dwell_code          VARCHAR (1);
      v_wind_hail           VARCHAR (1);
      V_MPL47_MPL49         VARCHAR (1);
      v_windstorm_ded       VARCHAR (3);
      v_pct_of_manual_flg   VARCHAR (1);
      v_pct_of_manual       VARCHAR (3);
      n_pct_of_manual       NUMBER;
      v_program_code        VARCHAR (1);
      v_liab_limit          VARCHAR (1);
      v_type_of_business    VARCHAR (1) := '1';
      v_const_year          NUMBER := 0;
      v_misc_end            VARCHAR (3);
      v_count               NUMBER;
      v_claim_count         NUMBER;
      v_loss_amount         NUMBER;
      v_alae_amount         NUMBER;
      v_loss_type           VARCHAR (2);
      v_num_ded_amt         NUMBER := 0;
      v_zip2                VARCHAR (4);
      v_terr_code           VARCHAR (2);
      v_id_cd               VARCHAR (2);
      v_company             VARCHAR (4);
      n_bexposure           NUMBER;
      ws_exposure           NUMBER;
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_claim_ho_data_paid';

      OPEN all_ho_stat;

      LOOP
         FETCH all_ho_stat INTO ho_stat;

         EXIT WHEN all_ho_stat%NOTFOUND;


         --- skip claim c1251313 effective date < 2008
         ---- from BICRF
         IF        ho_stat.state_cd = 'NJ'
               AND ho_stat.eff_date > TO_DATE ('03/31/2008', 'mm/dd/yyyy')
               AND (   SUBSTR (ho_stat.Policy_number, 1, 1) = 'H'
                    OR SUBSTR (ho_stat.policy_number, 1, 1) = 'D'
                    OR SUBSTR (ho_stat.policy_number, 1, 1) = 'F')
               AND (ho_stat.group_line = '24')
            OR (    ho_stat.group_line = '54'
                AND (   ho_stat.csp_subline = '460'
                     OR ho_stat.csp_subline = '470'
                     OR ho_stat.csp_subline = '480'))
         THEN
            NULL;
         ELSE
            IF     ho_stat.state_cd = 'NJ'
               AND ho_stat.eff_date > TO_DATE ('03/31/2011', 'mm/dd/yyyy')
               AND SUBSTR (ho_stat.Policy_number, 1, 2) = 'IM'
               AND ho_stat.group_line = '68'
            THEN                          --- this might be user line not sure
               NULL;
            ELSE
               GOTO skip_ho_claim;
            END IF;
         END IF;

       
         IF ho_stat.loss_amount > 0
         THEN
            IF    ho_stat.trans_code = '41'
               OR ho_stat.trans_code = '51'
               OR ho_stat.trans_code = '61'
            THEN
               v_TRANS_CODE := '6';
               v_orig_trans_code := '6L';
               v_loss_amount := ho_stat.loss_amount;
               v_alae_amount := 0;
            END IF;

            IF    ho_stat.trans_code = '71'
               OR                                                    --salvage
                 ho_stat.trans_code = '81'
               OR ho_stat.trans_code = '91'
               OR ho_stat.trans_code = '72'
               OR                                                       -- sub
                 ho_stat.trans_code = '82'
               OR ho_stat.trans_code = '92'
               OR ho_stat.trans_code = '86'
               OR ho_stat.trans_code = '87'
               OR ho_stat.trans_code = '73'
               OR                                             -- contributioni
                 ho_stat.trans_code = '83'
               OR ho_stat.trans_code = '93'
            THEN
               v_TRANS_CODE := '7';
               v_orig_trans_code := '7L';
               v_loss_amount := (ho_stat.loss_amount * -1);
               v_alae_amount := 0;
            END IF;

            IF    ho_stat.trans_code = '42'
               OR                                                   -- expense
                 ho_stat.trans_code = '62'
               OR ho_stat.trans_code = '44'
               OR ho_stat.trans_code = '54'
               OR ho_stat.trans_code = '64'
               OR ho_stat.trans_code = '47'
               OR ho_stat.trans_code = '57'
               OR ho_stat.trans_code = '67'
               OR ho_stat.trans_code = '48'
               OR ho_stat.trans_code = '58'
               OR ho_stat.trans_code = '68'
            THEN
               v_trans_code := '6';
               v_orig_trans_code := '6X';
               v_loss_amount := 0;
               v_alae_amount := ho_stat.loss_amount;
            END IF;
         ELSE
            IF    ho_stat.trans_code = '41'
               OR ho_stat.trans_code = '51'
               OR ho_stat.trans_code = '61'
            THEN         --- loss payments correction comming in as a negative
               v_TRANS_CODE := '7';
               v_orig_trans_code := '7L';                    --- loss payments
               v_loss_amount := ho_stat.loss_amount;
               v_alae_amount := 0;
            END IF;

            IF    ho_stat.trans_code = '71'
               OR                                                    --salvage
                 ho_stat.trans_code = '81'
               OR ho_stat.trans_code = '91'
               OR ho_stat.trans_code = '72'
               OR                                                       -- sub
                 ho_stat.trans_code = '82'
               OR ho_stat.trans_code = '92'
               OR ho_stat.trans_code = '86'
               OR ho_stat.trans_code = '87'
               OR ho_stat.trans_code = '73'
               OR                                             -- contributioni
                 ho_stat.trans_code = '83'
               OR ho_stat.trans_code = '93'
            THEN
               v_TRANS_CODE := '6';
               v_orig_trans_code := '6L';
               v_loss_amount := (ho_stat.loss_amount * -1); ---positive is a 6--
               v_alae_amount := 0;
            END IF;

            IF    ho_stat.trans_code = '42'
               OR                                                   -- expense
                 ho_stat.trans_code = '62'
               OR ho_stat.trans_code = '44'
               OR ho_stat.trans_code = '54'
               OR ho_stat.trans_code = '64'
               OR ho_stat.trans_code = '47'
               OR ho_stat.trans_code = '57'
               OR ho_stat.trans_code = '67'
               OR ho_stat.trans_code = '48'
               OR ho_stat.trans_code = '58'
               OR ho_stat.trans_code = '68'
            THEN
               v_trans_code := '7';
               v_orig_trans_code := '7X';                           -- expense
               v_loss_amount := 0;
               v_alae_amount := ho_stat.loss_amount;
            END IF;
         END IF;

         convert_territory_ho (TO_CHAR (LPAD (ho_stat.TERR, 2, '0')),
                               v_terr_code);

         CASE TRIM (ho_stat.PROT_CLASS)
            WHEN 'A'
            THEN
               v_prot_rating_ter := '1';
            WHEN 'OA'
            THEN
               v_prot_rating_ter := '1';
            WHEN 'B'
            THEN
               v_prot_rating_ter := '3';
            WHEN 'OB'
            THEN
               v_prot_rating_ter := '3';
            WHEN 'C'
            THEN
               v_prot_rating_ter := '6';
            WHEN 'OC'
            THEN
               v_prot_rating_ter := '6';
            WHEN '10'
            THEN
               v_prot_rating_ter := '6';
            ELSE
               IF ho_stat.feet_hydrant > 1000
               THEN
                  v_prot_rating_ter := '3';
               ELSE
                  v_prot_rating_ter := '1';
               END IF;
         END CASE;

         ----------------------
         n_bexposure := ho_stat.exposure;

      
         IF ho_stat.form_num = '4' OR ho_stat.form_num = '6'
         THEN
            get_limits_master_for_loss (TRIM (ho_stat.eff_date),
                                        TRIM (ho_stat.exp_date),
                                        TRIM (ho_stat.actg_date),
                                        TRIM (ho_stat.loss_date),
                                        TRIM (ho_stat.user_line),
                                        TRIM (ho_stat.policy_number),
                                        '802',
                                        v_amt_of_ins);
         ELSE
            get_limits_master_for_loss (TRIM (ho_stat.eff_date),
                                        TRIM (ho_stat.exp_date),
                                        TRIM (ho_stat.actg_date),
                                        TRIM (ho_stat.loss_date),
                                        TRIM (ho_stat.user_line),
                                        TRIM (ho_stat.policy_number),
                                        '800',
                                        v_amt_of_ins);
         END IF;


         ws_exposure := ROUND (TO_NUMBER (v_amt_of_ins) / 1000);

         IF ws_exposure < -999 AND ws_exposure < 999
         THEN
            n_amt_of_ins := 999;
         ELSE
            IF ws_exposure = 0
            THEN
               n_amt_of_ins := 1;
            ELSE
               n_amt_of_ins := ws_exposure;
            END IF;
         END IF;

         v_amt_of_ins := LPAD (TO_CHAR (n_amt_of_ins), 3, '0');

         -----------------------------------

         IF SUBSTR (v_filename, 9, 2) > '14'
         THEN                                        ---use new codes its 2015
            CASE TRIM (ho_stat.construct_code)
               WHEN 'FR'
               THEN
                  v_construct_code := '2';
               WHEN 'MV'
               THEN
                  v_construct_code := '4';
               WHEN 'MA'
               THEN
                  v_construct_code := '5';
               WHEN 'RE'
               THEN
                  v_construct_code := '6';
               WHEN 'AL'
               THEN
                  v_construct_code := '7';
               --   when '??'  then   v_construct_code := '8'; --specially rated
               ELSE
                  v_construct_code := '9';
            END CASE;
         ELSE
            CASE TRIM (ho_stat.construct_code)
               WHEN 'FR'
               THEN
                  v_construct_code := '1';
               ELSE
                  v_construct_code := '3';
            END CASE;
         END IF;


         v_num_ded_amt := TO_NUMBER (ho_stat.DED_AMT);

         CASE v_num_ded_amt
            WHEN 50
            THEN
               v_ded_amt := 'a';
            WHEN 100
            THEN
               v_ded_amt := '1';
            WHEN 200
            THEN
               v_ded_amt := '2';
            WHEN 250
            THEN
               v_ded_amt := 'd';
            WHEN 500
            THEN
               v_ded_amt := '3';
            WHEN 750
            THEN
               v_ded_amt := '4';
            WHEN 1000
            THEN
               v_ded_amt := '5';
            WHEN 2000
            THEN
               v_ded_amt := '6';
            WHEN 3000
            THEN
               v_ded_amt := '7';
            ELSE
               IF ho_stat.DED_AMT > 101 AND ho_stat.DED_AMT < 199
               THEN
                  v_ded_amt := 'b';
               ELSE
                  IF ho_stat.DED_AMT > 201 AND ho_stat.DED_AMT < 249
                  THEN
                     v_ded_amt := 'c';
                  ELSE
                     v_ded_amt := '9';
                  END IF;
               END IF;
         END CASE;

         v_liab_limit := TRIM (ho_stat.cove);

         CASE v_liab_limit
            WHEN '3'
            THEN
               v_liab_limit := '1';
            WHEN '5'
            THEN
               v_liab_limit := '3';
            WHEN '7'
            THEN
               v_liab_limit := '5';
            WHEN '8'
            THEN
               v_liab_limit := '6';
            ELSE
               v_liab_limit := '9';
         END CASE;

         CASE TRIM (ho_stat.PROT_CLASS)
            WHEN 'A'
            THEN
               v_prot_rating_ter := '1';
            WHEN 'OA'
            THEN
               v_prot_rating_ter := '1';
            WHEN 'B'
            THEN
               v_prot_rating_ter := '3';
            WHEN 'OB'
            THEN
               v_prot_rating_ter := '3';
            WHEN 'C'
            THEN
               v_prot_rating_ter := '6';
            WHEN 'OC'
            THEN
               v_prot_rating_ter := '6';
            WHEN '10'
            THEN
               v_prot_rating_ter := '6';
            ELSE
               IF ho_stat.feet_hydrant > 1000
               THEN
                  v_prot_rating_ter := '3';
               ELSE
                  v_prot_rating_ter := '1';
               END IF;
         END CASE;

         EXIT WHEN v_err_fl != 0;

         get_loss_type (ho_stat.cov_code, ho_stat.type_loss, v_loss_type);

         --  v_loss_amount := ho_stat.loss_amount;
         v_claim_count := 0;

         --coverage code position 46
         CASE TRIM (ho_stat.DWELL_CODE)
            WHEN 'P'
            THEN
               v_dwell_code := '1';
            WHEN 'S'
            THEN
               v_dwell_code := '5';
            WHEN 'R'
            THEN
               v_dwell_code := '5';
            WHEN '2'
            THEN
               v_dwell_code := '7';
            WHEN '3'
            THEN
               v_dwell_code := '7';
            ELSE
               v_dwell_code := '1';
         END CASE;

         ----------------------------------------------
         --position coverage code positon 46
         v_return_value := 'N';
         get_endorsement_at_loss (TRIM (ho_stat.eff_date),
                                  TRIM (ho_stat.exp_date),
                                  TRIM (ho_stat.actg_date),
                                  TRIM (ho_stat.loss_date),
                                  TRIM (ho_stat.user_line),
                                  TRIM (ho_stat.policy_number),
                                  'MPL47',
                                  v_return_value,
                                  v_return_parm1);
         V_MPL47_MPL49 := TRIM (v_return_value);

         EXIT WHEN v_err_fl != 0;

         IF v_mpl47_mpl49 = 'N'
         THEN
            get_endorsement_at_loss (TRIM (ho_stat.eff_date),
                                     TRIM (ho_stat.exp_date),
                                     TRIM (ho_stat.actg_date),
                                     TRIM (ho_stat.loss_date),
                                     TRIM (ho_stat.user_line),
                                     TRIM (ho_stat.policy_number),
                                     'MPL49',
                                     v_return_value,
                                     v_return_parm1);
            V_MPL47_MPL49 := TRIM (v_return_value);
         END IF;

         ---------------------------------------------------
         --- position 46 dwell code

         IF V_MPL47_MPL49 = 'Y'
         THEN
            CASE v_dwell_code
               WHEN '1'
               THEN
                  v_dwell_code := '2';
               WHEN '5'
               THEN
                  v_dwell_code := '4';
               WHEN '7'
               THEN
                  v_dwell_code := '6';
            END CASE;
         END IF;

         EXIT WHEN v_err_fl != 0;
         ---------------------------------------------------
         ---program code position 41
         v_return_value := 'N';
         get_endorsement_at_loss (TRIM (ho_stat.eff_date),
                                  TRIM (ho_stat.exp_date),
                                  TRIM (ho_stat.actg_date),
                                  TRIM (ho_stat.loss_date),
                                  TRIM (ho_stat.user_line),
                                  TRIM (ho_stat.policy_number),
                                  'PRFD',
                                  v_return_value,
                                  v_return_parm1);

         IF TRIM (v_return_value) = 'Y'
         THEN
            v_program_code := '2';
         ELSE
            v_program_code := '1';
         END IF;

         --------------------------------------
         ----- windstorm position 106

         v_return_value := 'N';
         get_endorsement_at_loss (TRIM (ho_stat.eff_date),
                                  TRIM (ho_stat.exp_date),
                                  TRIM (ho_stat.actg_date),
                                  TRIM (ho_stat.loss_date),
                                  TRIM (ho_stat.user_line),
                                  TRIM (ho_stat.policy_number),
                                  'MPL22',
                                  v_return_value,
                                  v_return_parm1);

         IF TRIM (v_return_value) = 'N'
         THEN
            v_windstorm_ded := ' ';
         ELSE
            CASE TRIM (v_return_parm1)
               WHEN ''
               THEN
                  v_windstorm_ded := ' ';
               WHEN ' '
               THEN
                  v_windstorm_ded := ' ';
               WHEN '050'
               THEN
                  v_windstorm_ded := '7';
               WHEN '030'
               THEN
                  v_windstorm_ded := '6';
               WHEN '020'
               THEN
                  v_windstorm_ded := '5';
               WHEN '010'
               THEN
                  v_windstorm_ded := '4';
               WHEN '005'
               THEN
                  v_windstorm_ded := '3';
               ELSE
                  v_windstorm_ded := '9';
            END CASE;
         END IF;

         EXIT WHEN v_err_fl != 0;
         -------------------------------------------------------
         ----pct of manual position 52-54 n/a to claims

         v_pct_of_manual := '   ';

         -------------------------------------------
         v_type_of_business := '1';

         -------------------------------------------
         --position 169-172

         IF ho_stat.const_year = 0
         THEN
            v_const_year := 9999;
         ELSE
            v_const_year := ho_stat.const_year;
         END IF;

         IF ho_stat.LOC_ZIP2 = '0000'
         THEN
            v_zip2 := '    ';
         ELSE
            v_zip2 := ho_stat.LOC_ZIP2;
         END IF;

         -------------------------------------------
         --positon 173-176
         v_misc_end := ' ';
         v_return_value := 'N';
         get_endorsement_at_loss (TRIM (ho_stat.eff_date),
                                  TRIM (ho_stat.exp_date),
                                  TRIM (ho_stat.actg_date),
                                  TRIM (ho_stat.loss_date),
                                  TRIM (ho_stat.user_line),
                                  TRIM (ho_stat.policy_number),
                                  'HO 04 54',
                                  v_return_value,
                                  v_return_parm1);

         IF RTRIM (v_return_value) = 'Y'
         THEN
            v_misc_end := '001';                                 -- Earthquake
         END IF;

         ----------------------------------------------

         IF TRIM (ho_stat.company) = '04'
         THEN
            v_company := '0056';
         ELSE
            v_company := '0060';
         END IF;

         v_id_cd := '01';

         INSERT INTO RPT_CLAIMS_MSO_HO_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             ACCIDENT_DATE,
                                             REPORT_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             CAT_CODE,
                                             FILLER_1,
                                             PROT_RATING_TERR,
                                             POLICY_FORM,
                                             AMOUNT_OF_INS,
                                             PROGRAM_CODE,
                                             NUM_OF_FAMILIES,
                                             CONSTRUCTION,
                                             LIAB_LIMIT_COVE,
                                             DEDUCTIBLE_SIZE,
                                             COVERAGE,
                                             TERR_CODE,
                                             FILLER_2,
                                             RATE_SET,
                                             PCT_OF_MANUAL,
                                             CAUSE_OF_LOSS,
                                             CLAIM_COUNT,
                                             LOSS_AMOUNT,
                                             MSO_MODULE,
                                             CLAIM_NUMBER,
                                             ZIP_CODE,
                                             ZIP_CODE2,
                                             FILLER_3,
                                             LOSS_COST_MULT,
                                             INSURANCE_SCORE,
                                             WINDSTORM_DED,
                                             FILLER_4,
                                             FILLER_5,
                                             FILLER_6,
                                             ALAE,
                                             FILLER_7,
                                             TYPE_OF_BUSINESS,
                                             YEAR_OF_CONSTRUCTION,
                                             MISC_END,
                                             FILLER_8)
              VALUES (v_company,                                     --company
                      v_trans_code,                                --transcode
                      v_orig_trans_code,
                      '2',                                        -- stat plan
                      TO_CHAR (ho_stat.ACTG_DATE, 'MMDDYY'),     --acctng_date
                      TO_CHAR (ho_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE ,
                      TO_CHAR (ho_stat.LOSS_DATE, 'MMDDYY'), -- TRANS_EFF_DATE,
                      TO_CHAR (ho_stat.REPORTED_DATE, 'MMDDYY'), -- TRANS_EXP_DATE ,
                      '29',                                           -- state
                      '040',                                            -- ASL
                      '040',                                       -- SUBLINE,
                      ---  to_char(ho_stat.cat_number),                                -- CAT CODE
                      NVL (ho_stat.cat_number, ' '),              ---dmb 04/29
                      ' ',                                         -- FILLER_1
                      v_prot_rating_ter,                  -- PROT_RATING_TERR,
                      TRIM (ho_stat.form_num),                  -- POLICY_FORM
                      v_amt_of_ins,      -- AMOUNT_OF_INS this is not rounded,
                      v_program_code,                           --PROGRAM_CODE
                      ho_stat.FAMILIES,                    -- NUM_OF_FAMILIES,
                      v_construct_code,                        -- CONSTRUCTION
                      v_liab_limit,                             --- LIAB-LIMIT
                      v_ded_amt,                          -- DEDUCTIBLE_SIZE ,
                      v_dwell_code,                    -- COVERAGE position 46
                      v_terr_code, -- TERR_CODE,47-48 pretty sure these are incorrect. codes over 30
                      ' ',                                         -- filler_3
                      '  ',                           -- RATE_SET na to claims
                      NVL (v_pct_of_manual, ' '), -- PCT_OF_MANUAL,  - na to claims  04/29 dmb
                      v_loss_type,
                      v_CLAIM_COUNT,
                      v_loss_amount, --- test1 ho_stat.LOSS_AMOUNT,              -- Round this to whole dollar  PREMIUM_AMOUNT,
                      v_id_cd,                                  -- MSO_MODULE,
                      --4/29  (rpad(ho_stat.CLAIM_NUMBER,10,' ') || trim(ho_stat.cov_code) ),-- trim( ho_stat.CLAIM_NUMBER),      -- POLICY_NUMBER,
                      (RPAD(TRIM (ho_stat.CLAIM_number), 10, ' ') || TRIM (TO_CHAR (ho_stat.cov_code))), -- trim( ho_stat.CLAIM_NUMBER),      -- POLICY_NUMBER,
                      ho_stat.LOC_ZIP,                           -- ZIP_CODE ,
                      NVL (v_zip2, ' '),                        -- ZIP_CODE2 ,
                      ' ',                                        -- filler_6,
                      '   ',                                -- LOSS_COST_MULT,
                      '   ',                               -- INSURANCE_SCORE,
                      v_windstorm_ded,          -- WIND STORM DED position 106
                      ' ',                                         -- filler_7
                      (rpad(ho_stat.cov_code,3,' ') || rpad(to_char(ho_stat.user_line),2,' ') || lpad(to_char(ho_stat.item_num),3,'0') || ho_stat.policy_number),                                    -- filler_8  new
                      ' ',                                    -- filler 9  new
                      v_alae_amount, --test1'       ',                         -- ALAE     new
                      ' ',                                    -- filler 10 new
                      v_type_of_business,              -- type of business new
                      v_const_year,                 --YEAR_OF_CONSTRUCTION new
                      v_misc_end,                              -- MISC_END new
                      ' ');                                   --filler 11  new


         COMMIT;

        <<skip_ho_claim>>
         NULL;
      END LOOP;

      CLOSE all_ho_stat;
   --   commit; --test


   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || ho_stat.claim_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

PROCEDURE collect_claim_fo_outstanding
   IS
   
    v_procname            RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                               := 'ND_BUREAU.COLLECT_CLAIM_FO_OUTSTANDING';
      v_err_mssg            VARCHAR2 (200);
      v_err_loc             VARCHAR2 (100);
      
     CURSOR all_claim_stat
      IS
           SELECT distinct
                           s.Claim_Number,
                           s.Policy_Number,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as CURRENT_RESERVE,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, '01012015', s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as Starting_reserve,
                           s.state_cd,
                           s.company,
                           s.group_line,
                           s.end_num,
                           s.eff_date,
                           s.exp_date,
                           s.change_date,
                           s.actg_date,
                           s.user_line,
                           s.cov_code,
                           s.loss_date,
                           s.acv_rc,
                           s.item_num,
                           s.class_code,
                           --- s.type_loss,
                           Get_FO_MSO_Type_Loss (s.claim_number, s.class_code, s.Cov_Code, v_end_date) as type_loss,
                           s.csp_subline,
                           s.prot_class,
                           s.form_num,
                           s.loc_zip,
                           s.ded_amt,
                           s.terr,
                           s.cove,
                           s.exposure,
                           s.limit_amt_person,
                           s.cat_number,
                           s.reported_date,
                           s.sq_feet,
                           s.ams_parm_1,
                           s.cause_loss2

             FROM RPT_CLAIMS_FO_STAT s
            WHERE     s.company = '01'
                  AND s.state_cd = 'AR'
                  AND s.GROUP_LINE IN ('26')
                  AND s.book_date <= v_end_date
                  AND s.COV_CODE < '990'
                  AND s.sdac_ind = '1'
                  AND RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                       <> 0

                  AND s.actg_date = 
                       (SELECT MAX (s1.actg_date)
                            FROM rpt_claims_fo_stat s1
                           WHERE     rtrim(s.claim_number) = rtrim(s1.claim_number)
                                 AND s.group_line = s1.group_line
                                 AND s.user_line = s1.user_line
                                 AND s.cov_code = s1.cov_code
                                 AND s.company = s1.company
                                 AND s.state_cd = s1.state_cd
                                 AND s.policy_number = s1.policy_number
                                 AND s.eff_date = s1.eff_date
                                 AND s.exp_date = s1.exp_date
                                 AND s.item_state_cd = s1.item_state_cd
                                 AND s.location = s1.location
                                 AND s.item_num = s1.item_num
                                 AND s.end_num = s1.end_num
                                 AND s.sdac_ind = s1.sdac_ind
                                 AND s1.book_date <= v_end_date);

      claim_stat               all_claim_stat%ROWTYPE;
      v_total_prem          NUMBER;
      v_trans_code          VARCHAR2 (1);
      v_orig_trans_code     VARCHAR2 (2);
      v_ded_amt             VARCHAR (1);
      v_dwell_code          VARCHAR (1);
      v_wind_hail           VARCHAR (1);
      v_windstorm_ded       VARCHAR (3);
      v_program_code        VARCHAR (1);
      v_liab_limit          VARCHAR (2);
      v_count               NUMBER;
      v_claim_count         NUMBER;
      v_loss_amount         NUMBER;
       v_PROTECTION_CODE     VARCHAR (2);
      v_POLICY_FORM         VARCHAR (2);
      v_alae_amount         NUMBER;
      v_loss_type           VARCHAR (2);
      v_num_ded_amt         NUMBER := 0;
      v_zip                VARCHAR (5);
      v_terr_code           VARCHAR (2);
      v_id_cd               VARCHAR (2);
      v_company             VARCHAR (4);
      v_asl                 varchar (3);
      v_exposure            VARCHAR (7);
      n_exposure            NUMBER := 0;
      v_prop_liab_fields   varchar (10);
      v_save_class_code     varchar (4);
      v_bureau_class_code     varchar (4);    
      v_loss_settle           varchar(1);   
      v_company_use         varchar(8);
      v_amt_of_ins         number;
      v_aggregate_limit    varchar (2);
      v_num_acres          varchar (2);
      n_num_acres          number;
      v_med_limit          varchar (2);
      v_emp_liab           varchar (2);            
                  
      begin
            DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_claim_fo_data_outstanding';
      v_alae_amount := 0;

      OPEN all_claim_stat;

      LOOP
         FETCH all_claim_stat INTO claim_stat;

         EXIT WHEN all_claim_stat%NOTFOUND;

         IF claim_stat.CURRENT_RESERVE > 0
         THEN
            v_TRANS_CODE := '8';
            v_ORIG_TRANS_CODE := '8';
         ELSE
            v_TRANS_CODE := '9';
            v_ORIG_TRANS_CODE := '9';
         END IF;
        
        IF    TRIM (claim_stat.cov_code) = '834'
            OR TRIM (claim_stat.cov_code) = '835'
            OR TRIM (claim_stat.cov_code) = '410'
            OR TRIM (claim_stat.end_num) = 'ADD LOT'
            OR TRIM (claim_stat.end_num) = 'ND FO 03'
            OR TRIM (claim_stat.end_num) = 'MFO 109'
            OR TRIM (claim_stat.end_num) = 'PREMISES'
            OR TRIM (claim_stat.end_num) = 'MFO 153'
            OR TRIM (claim_stat.end_num) = 'MFO 154'
         THEN
            --Commercial Multi-Peril Liability
            v_asl := '052';
         ELSE
            --Commercial Multi-Peril Property
            v_asl := '051';
         END IF;

        
         ----get from item
         v_bureau_class_code := ' ';
         v_protection_code := ' ';
         get_item_master_fo_class_code (TRIM (claim_stat.eff_date),
                          TRIM (claim_stat.exp_date),
                          TRIM (claim_stat.actg_date),
                          TRIM (claim_stat.change_date),
                          TRIM (claim_stat.user_line),
                          TRIM (claim_stat.policy_number),
                          TRIM (claim_stat.item_num),
                          v_bureau_class_code,
                          v_protection_code,
                          v_total_prem,
                          v_return_value);

         --if not in item default
         IF TRIM (v_bureau_class_code) = '' OR
             V_BUREAU_CLASS_CODE IS NULL THEN
            CASE TRIM (claim_stat.user_line)
               WHEN '24'
               THEN
                  v_bureau_class_code := '3010';         ----coverage code 830
               WHEN '32'
               THEN
                  v_bureau_class_code := '3060';          ---coverage code 830
               WHEN '26'
               THEN
                  v_bureau_class_code := '3340'; -- coverage b e f g coverage  831
               ELSE
                  v_bureau_class_code := ' ';
            END CASE;

             CASE TRIM (claim_stat.cov_code)
                --   when '830' then v_bureau_class_code := trim(fo_stat.class_code); -- line 24  cov a buildings
                --   when '831' then v_bureau_class_code := trim(fo_stat.class_code); -- line 26 cov b unscheduled
                WHEN '832'
                THEN
                   v_bureau_class_code := TRIM (claim_stat.class_code); -- line 27 cov c farm buildings
                WHEN '833'
                THEN
                   v_bureau_class_code := '3500'; -- line 26 8 coverage e unscheduled
                WHEN '834'
                THEN
                   v_bureau_class_code := '3610';  -- line 26 coverage F liability
                WHEN '835'
                THEN
                   v_bureau_class_code := '3640';    -- line 26 coverage g med pay
                --     when '836' then v_bureau_class_code := '???';                   --reinsurance i dont think we need to report this?
                --    when '959' then v_bureau_class_code :=  -----'???';                   -- no idea
                WHEN '406'
                THEN
                   v_bureau_class_code := '3650'; --  endorsement MFO 109 Watercraft Liab
                WHEN '410'
                THEN
                   v_bureau_class_code := '3660'; -- endorsement MF 03 03 Employers Liab;
                ELSE
                   v_bureau_class_code := v_bureau_class_code;
             END CASE;
             
         END IF;


         v_save_class_code := v_bureau_class_code;

         ----prot_class is on line 26 only
         -- v_bureau_class_code := ' ';
         -- v_protection_code := ' ';

         v_protection_code := trim(claim_stat.prot_class);   -- Protection code is in STAT table

         /* get_item_master (TRIM (claim_stat.eff_date),
                          TRIM (claim_stat.exp_date),
                          TRIM (claim_stat.actg_date),
                          TRIM (claim_stat.change_date),
                          '26',
                          TRIM (claim_stat.policy_number),
                          1,
                          v_bureau_class_code,
                          v_protection_code,
                          v_total_prem,
                          v_return_value);  */
         
         ------liability
         v_aggregate_limit := '  ';
         v_num_acres := ' ';
         n_num_acres := 0;

         IF v_asl = '052'
         THEN                                                   --- liab found
            V_AGGREgATE_LIMIT := '00';
            n_num_acres := claim_stat.sq_feet;

         
            IF TRIM (claim_stat.end_num) = 'ADD LOT'
            THEN
               n_num_acres := TO_NUMBER (TRIM (claim_stat.ams_parm_1));
            END IF;

            v_num_acres := '1';


            IF n_num_acres > 500
            THEN
               v_num_acres := '4';
            ELSE
               IF n_num_acres > 160
               THEN
                  v_num_acres := '3';
               ELSE
                  IF n_num_acres > 40
                  THEN
                     v_num_acres := '2';
                  ELSE
                     IF n_num_acres > 0
                     THEN
                        v_num_acres := '1';
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

         v_num_ded_amt := TO_NUMBER (claim_stat.DED_AMT);
         CASE v_num_ded_amt
            WHEN 250
            THEN
               v_ded_amt := '2';
            WHEN 500
            THEN
               v_ded_amt := '3';
            WHEN 1000
            THEN
               v_ded_amt := '4';
            WHEN 1500
            THEN
               v_ded_amt := '5';
            WHEN 2000
            THEN
               v_ded_amt := '6';
            WHEN 2500
            THEN
               v_ded_amt := '7';
            WHEN 3000
            THEN
               v_ded_amt := '8';
            ELSE
               v_ded_amt := '9';    
         END CASE;

         v_liab_limit := ' ';

         IF v_asl = '052'
         THEN
            get_limits_master (TRIM (claim_stat.eff_date),
                               TRIM (claim_stat.exp_date),
                               TRIM (claim_stat.actg_date),
                               TRIM (claim_stat.change_date),
                               TRIM (claim_stat.user_line),
                               TRIM (claim_stat.policy_number),
                               '834',
                               v_liab_limit);
         END IF;

         IF v_asl = '052'
         THEN
            IF v_liab_limit <> ' '
            THEN                                                --- liab found
               v_policy_form := '80';
               v_return_value := 'N';
               get_endorsement_master (TRIM (claim_stat.eff_date),
                                       TRIM (claim_stat.exp_date),
                                       TRIM (claim_stat.actg_date),
                                       TRIM (claim_stat.change_date),
                                       TRIM (claim_stat.user_line),
                                       TRIM (claim_stat.policy_number),
                                       'MFO 020',
                                       v_return_value,
                                       v_return_parm1,
                                       v_return_limit);

               IF TRIM (v_return_value) = 'Y'
               THEN
                  v_policy_form := '81';
               END IF;
            END IF;
         END IF;

         v_med_limit := ' ';

         IF v_asl = '052'
         THEN
            IF claim_stat.end_num = 'ND FO 03'
            THEN                     -- only report med pay for employers liab
               get_limits_master (TRIM (claim_stat.eff_date),
                                  TRIM (claim_stat.exp_date),
                                  TRIM (claim_stat.actg_date),
                                  TRIM (claim_stat.change_date),
                                  TRIM (claim_stat.user_line),
                                  TRIM (claim_stat.policy_number),
                                  '835',
                                  v_med_limit);
            END IF;
         END IF;

         --determine if employer liab
         v_emp_liab := '  ';

         IF v_asl = '052'
         THEN
            IF claim_stat.end_num = 'ND FO 03'
            THEN
               v_return_value := 'N';
               get_endorsement_master (TRIM (claim_stat.eff_date),
                                       TRIM (claim_stat.exp_date),
                                       TRIM (claim_stat.actg_date),
                                       TRIM (claim_stat.change_date),
                                       TRIM (claim_stat.user_line),
                                       TRIM (claim_stat.policy_number),
                                       'ND FO 03',
                                       v_return_value,
                                       v_return_parm1,
                                       v_return_limit);

               IF TRIM (v_return_value) = 'Y'
               THEN
                  v_emp_liab := '31';
                  v_liab_limit := '31';

                  IF (TRIM (v_return_limit) = '25000' AND v_med_limit = '1')
                  THEN
                     v_emp_liab := '31';
                     v_liab_limit := '31';
                  ELSE
                     IF (    TRIM (v_return_limit) = '50000'
                         AND v_med_limit = '1')
                     THEN
                        v_emp_liab := '32';
                        v_liab_limit := '32';
                     ELSE
                        IF (    TRIM (v_return_limit) = '25000'
                            AND v_med_limit = '5')
                        THEN
                           v_emp_liab := '33';
                           v_liab_limit := '33';
                        ELSE
                           IF (    TRIM (v_return_limit) = '50000'
                               AND v_med_limit = '5')
                           THEN
                              v_emp_liab := '34';
                              v_liab_limit := '34';
                           END IF;
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

            IF v_asl = '051'
         THEN
            v_policy_form := '20';
         --     v_protection_code := substr(fo_stat.prot_class,1,2);
         END IF;

         v_loss_settle := ' ';

      
           IF v_asl = '051'   THEN
               CASE claim_stat.acv_rc
                  WHEN 'A'
                  THEN
                     v_loss_settle := '1';
                  WHEN 'R'
                  THEN
                     v_loss_settle := '2';
                  ELSE
                     v_loss_settle := '9';
               END CASE;
            END IF;

       

         get_loss_type_fo (claim_stat.cov_code, claim_stat.cause_loss2, v_loss_type);

          v_claim_count := 0;

           v_exposure := '001';
         ---program code position 41
         v_return_value := 'N';
         get_endorsement_at_loss (TRIM (claim_stat.eff_date),
                                  TRIM (claim_stat.exp_date),
                                  TRIM (claim_stat.actg_date),
                                  TRIM (claim_stat.loss_date),
                                  TRIM (claim_stat.user_line),
                                  TRIM (claim_stat.policy_number),
                                  'PRFD',
                                  v_return_value,
                                  v_return_parm1);

         IF TRIM (v_return_value) = 'Y'
         THEN
            v_program_code := '2';
         ELSE
            v_program_code := '1';
         END IF;

         v_prop_liab_fields := '';
         if v_asl = '051'   -- Build Prop_Liab_Field
            then
                v_amt_of_ins := claim_stat.limit_amt_person;
                n_exposure := ROUND (TO_NUMBER (v_amt_of_ins) / 1000);
                v_exposure := trim( to_char ( n_exposure, '000000') );
        
                v_prop_liab_fields := lpad( v_protection_code || '  ', 2, ' ');   -- Protection Code is in Stat Table
                v_prop_liab_fields := v_prop_liab_fields || lpad(trim(v_loss_settle), 1, ' ');   -- Loss Settlement Option
                v_prop_liab_fields := v_prop_liab_fields || lpad(v_exposure, 6, '0');
                v_prop_liab_fields := v_prop_liab_fields || lpad(v_ded_amt, 1, ' '); -- deductable amt.code from DED_AMT   
            else
                if v_asl = '052'
                    then
            -- liab
                v_prop_liab_fields := LPAD(v_num_acres,1,' ') || LPAD(v_liab_Limit,2,' ') || LPAD(v_aggregate_limit,2,' ') || '     ';
                     else
                        v_prop_liab_fields := '          ';
                    end if;
            end if;

         v_windstorm_ded := ' ';
         v_exposure := '001';

         v_company := '0060';
 
         v_id_cd := '01';
 
        INSERT INTO  RPT_CLAIMS_MSO_FO_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             ACCIDENT_DATE,
                                             REPORT_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             CAT_CODE,
                                             PROT_RATING_TERR,
                                             POLICY_FORM,
                                             OCCUPANCY_CLASS ,
                                             PROP_LIAB_FIELDS,
                                             RATE_MOD_FACTOR,
                                             CAUSE_OF_LOSS,
                                             CLAIM_COUNT,
                                             LOSS_AMOUNT,
                                             MSO_MODULE,
                                             CLAIM_NUMBER,
                                             ZIP_CODE,
                                             FILLER_3,
                                             LOSS_COST_MULT,
                                             FILLER_4,
                                             WINDSTORM_DED,
                                             FILLER_5,
                                             ALAE,
                                             FILLER_6,
                                             COV_CODE_CO_USE )
              VALUES (v_company,                                     --company
                      v_trans_code,                                --transcode
                      v_orig_trans_code,
                      '2',                                        -- stat plan
                      TO_CHAR (claim_stat.ACTG_DATE, 'MMDDYY'),     --acctng_date
                      TO_CHAR (claim_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE ,
                      TO_CHAR (claim_stat.LOSS_DATE, 'MMDDYY'), -- TRANS_EFF_DATE,
                      TO_CHAR (claim_stat.REPORTED_DATE, 'MMDDYY'), -- TRANS_EXP_DATE ,
                      '03',                                           -- state
                      v_asl,                                            -- ASL
                      '914',                                       -- SUBLINE,
                      NVL (claim_stat.cat_number, ' '),              ---dmb 04/29
                   --   v_prot_rating_ter,                  -- PROT_RATING_TERR,
                    --  TRIM (fo_stat.form_num),                  -- POLICY_FORM
                      lpad(TRIM (claim_STAT.TERR),2,0),             ---test these are all 1
                      V_POLICY_FORM,
                      v_SAVE_CLASS_CODE,
                      v_prop_liab_fields  ,                  -- RATE_SET na to claims
                      v_exposure,
                      v_loss_type,
                      v_CLAIM_COUNT,
                      claim_stat.current_reserve, --v_loss_amount, --- test1 ho_stat.LOSS_AMOUNT,              -- Round this to whole dollar  PREMIUM_AMOUNT,
                      v_id_cd,                                  -- MSO_MODULE,
                      (RPAD (TRIM (claim_stat.CLAIM_number), 10, ' ') || TRIM (TO_CHAR (claim_stat.cov_code))), -- trim( ho_stat.CLAIM_NUMBER),      -- POLICY_NUMBER,
                      claim_stat.LOC_ZIP,                           -- ZIP_CODE ,
                      ' ',
                      '211',                                -- LOSS_COST_MULT,
                      '   ',                               -- INSURANCE_SCORE,
                      v_windstorm_ded,          -- WIND STORM DED position 106
                      (RPAD(' ', 24, ' ') || rpad(claim_stat.cov_code,3,' ') || rpad(to_char(claim_stat.user_line),2,' ') || lpad(to_char(claim_stat.item_num),3,'0') || claim_stat.policy_number),         -- filler_5
                      v_alae_amount,
                      ' ',                                          -- filler_6
                      v_company_use);
         COMMIT;

        <<skip_fo_claim>>
         NULL;
      END LOOP;

      CLOSE all_claim_stat;
      
      commit;
      EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG) ;--|| --fo_stat.claim_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;
   
   
   PROCEDURE collect_claim_ho_outstanding
   IS
      v_procname            RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                               := 'ND_BUREAU.COLLECT_CLAIM_HO_DATA_OUTSTANDING';
      v_err_mssg            VARCHAR2 (200);
      v_err_loc             VARCHAR2 (100);


      CURSOR all_claim_stat
      IS
           SELECT distinct
                            s.Policy_Number,
                            s.Claim_Number,
                            RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                                as CURRENT_RESERVE,
                            RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, '01012015', s.sdac_ind, s.state_cd, s.company, s.item_num)
                                as Starting_reserve,
                           s.state_cd,
                           s.cove,
                           s.const_year,
                           ---s.type_loss as Type_loss2,
                           Get_HO_MSO_Type_Loss (s.claim_number, s.class_code, s.Cov_Code, v_end_date) as type_loss,
                           s.company,
                           s.group_line,
                           s.eff_date,
                           s.exp_date,
                           s.actg_date,
                           s.user_line,
                           s.cov_code,
                           s.loss_date,
                           s.csp_subline,
                           s.prot_class,
                           s.feet_hydrant,
                           s.form_num,
                           s.loc_zip,
                           s.loc_zip2,
                           s.ded_amt,
                           s.dwell_code,
                           s.terr,
                           s.families,
                           s.exposure,
                           s.limit_amt_person,
                           s.construct_code,
                           s.cat_number,
                           s.reported_date,
                           s.item_num

             FROM RPT_CLAIMS_HO_STAT s
            WHERE     s.company = '04'
                  AND s.state_cd = 'NJ'
                  AND s.GROUP_LINE IN ('24')
                  AND s.User_Line in ('24')
                  AND s.book_date <= v_end_date
                  AND s.COV_CODE < '990'
                  AND s.sdac_ind = '1'
                  AND RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                       <> 0
                  AND s.actg_date = 
                       (SELECT MAX (s1.actg_date)
                            FROM rpt_claims_ho_stat s1
                           WHERE     s.claim_number = s1.claim_number
                                 AND s.group_line = s1.group_line
                                 AND s.user_line = s1.user_line
                                 AND s.cov_code = s1.cov_code
                                 AND s.company = s1.company
                                 AND s.state_cd = s1.state_cd
                                 AND s.policy_number = s1.policy_number
                                 AND s.eff_date = s1.eff_date
                                 AND s.exp_date = s1.exp_date
                                 AND s.item_state_cd = s1.item_state_cd
                                 AND s.location = s1.location
                                 AND s.user_line = s1.user_line
                                 AND s.item_num = s1.item_num
                                 AND s.end_num = s1.end_num
                                 AND s.sdac_ind = s1.sdac_ind
                                 AND s1.book_date <= v_end_date);

      ho_claim_stat         all_claim_stat%ROWTYPE;
      v_trans_code          VARCHAR2 (1);
      v_orig_trans_code     VARCHAR2 (2);
      --dmb v_amt_of_ins varchar(3);
      v_amt_of_ins          VARCHAR (10);
      n_amt_of_ins          NUMBER (4);
      v_prot_rating_ter     VARCHAR2 (2);
      v_construct_code      VARCHAR2 (2);
      v_ded_amt             VARCHAR (1);
      v_dwell_code          VARCHAR (1);
      v_wind_hail           VARCHAR (1);
      V_MPL47_MPL49         VARCHAR (1);
      v_windstorm_ded       VARCHAR (3);
      v_pct_of_manual_flg   VARCHAR (1);
      v_pct_of_manual       VARCHAR (3);
      n_pct_of_manual       NUMBER;
      v_program_code        VARCHAR (1);
      v_liab_limit          VARCHAR (1);
      v_type_of_business    VARCHAR (1) := '1';
      v_const_year          NUMBER := 0;
      v_misc_end            VARCHAR (3);
      v_count               NUMBER;
      v_claim_count         NUMBER;
      v_loss_amount         NUMBER;
      v_alae_amount         NUMBER := 0;
      v_loss_type           VARCHAR (2);
      v_num_ded_amt         NUMBER := 0;
      v_zip2                VARCHAR (4);
      v_terr_code           VARCHAR (2);
      v_id_cd               VARCHAR (2);
      v_company             VARCHAR (4);
      n_bexposure           NUMBER;
      ws_exposure           NUMBER;
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_claim_ho_outstanding';

      OPEN all_claim_stat;

      LOOP
         FETCH all_claim_stat INTO ho_claim_stat;

         EXIT WHEN all_claim_stat%NOTFOUND;
         
         IF        ho_claim_stat.state_cd = 'NJ'
               AND ho_claim_stat.eff_date >
                      TO_DATE ('03/31/2008', 'mm/dd/yyyy')
               AND (   SUBSTR (ho_claim_stat.Policy_number, 1, 1) = 'H'
                    OR SUBSTR (ho_claim_stat.policy_number, 1, 1) = 'D'
                    OR SUBSTR (ho_claim_stat.policy_number, 1, 1) = 'F')
               AND (ho_claim_stat.group_line = '24')
            OR (    ho_claim_stat.group_line = '54'
                AND (   ho_claim_stat.csp_subline = '460'
                     OR ho_claim_stat.csp_subline = '470'
                     OR ho_claim_stat.csp_subline = '480'))
         THEN
            NULL;
         ELSE
            /*  if ho_claim_stat.state_cd = 'NJ' and
                 ho_claim_stat.eff_date > to_date('03/31/2011', 'mm/dd/yyyy') and
                 substr(ho_claim_stat.Policy_number ,1,2) = 'IM' and
                 ho_claim_stat.group_line = '68'  then   --- this might be user line not sure
                      null;
              else  */
            GOTO skip_ho_claim;
         /* end if; */
         END IF;

         
         IF ho_claim_stat.CURRENT_RESERVE > 0
         THEN
            v_TRANS_CODE := '8';
            v_ORIG_TRANS_CODE := '8';
         ELSE
            v_TRANS_CODE := '9';
            v_ORIG_TRANS_CODE := '9';
         END IF;

         convert_territory_ho (TO_CHAR (LPAD (ho_claim_stat.TERR, 2, '0')),
                               v_terr_code);



         IF ho_claim_stat.form_num = '4' OR ho_claim_stat.form_num = '6'
         THEN
            get_limits_master_for_loss (TRIM (ho_claim_stat.eff_date),
                                        TRIM (ho_claim_stat.exp_date),
                                        TRIM (ho_claim_stat.actg_date),
                                        TRIM (ho_claim_stat.loss_date),
                                        TRIM (ho_claim_stat.user_line),
                                        TRIM (ho_claim_stat.policy_number),
                                        '802',
                                        v_amt_of_ins);
         ELSE
            get_limits_master_for_loss (TRIM (ho_claim_stat.eff_date),
                                        TRIM (ho_claim_stat.exp_date),
                                        TRIM (ho_claim_stat.actg_date),
                                        TRIM (ho_claim_stat.loss_date),
                                        TRIM (ho_claim_stat.user_line),
                                        TRIM (ho_claim_stat.policy_number),
                                        '800',
                                        v_amt_of_ins);
         END IF;


         ws_exposure := ROUND (TO_NUMBER (v_amt_of_ins) / 1000);

         IF ws_exposure < -999 AND ws_exposure < 999
         THEN
            n_amt_of_ins := 999;
         ELSE
            IF ws_exposure = 0
            THEN
               n_amt_of_ins := 1;
            ELSE
               n_amt_of_ins := ws_exposure;
            END IF;
         END IF;

         v_amt_of_ins := LPAD (TO_CHAR (n_amt_of_ins), 3, '0');

         -----------------------------------

         IF SUBSTR (v_filename, 9, 2) > '14'
         THEN                                        ---use new codes its 2015
            CASE TRIM (ho_claim_stat.construct_code)
               WHEN 'FR'
               THEN
                  v_construct_code := '2';
               WHEN 'MV'
               THEN
                  v_construct_code := '4';
               WHEN 'MA'
               THEN
                  v_construct_code := '5';
               WHEN 'RE'
               THEN
                  v_construct_code := '6';
               WHEN 'AL'
               THEN
                  v_construct_code := '7';
               --   when '??'  then   v_construct_code := '8'; --specially rated
               ELSE
                  v_construct_code := '9';
            END CASE;
         ELSE
            CASE TRIM (ho_claim_stat.construct_code)
               WHEN 'FR'
               THEN
                  v_construct_code := '1';
               ELSE
                  v_construct_code := '3';
            END CASE;
         END IF;

         v_num_ded_amt := TO_NUMBER (ho_claim_stat.DED_AMT);

         CASE v_num_ded_amt
            WHEN 50
            THEN
               v_ded_amt := 'a';
            WHEN 100
            THEN
               v_ded_amt := '1';
            WHEN 200
            THEN
               v_ded_amt := '2';
            WHEN 250
            THEN
               v_ded_amt := 'd';
            WHEN 500
            THEN
               v_ded_amt := '3';
            WHEN 750
            THEN
               v_ded_amt := '4';
            WHEN 1000
            THEN
               v_ded_amt := '5';
            WHEN 2000
            THEN
               v_ded_amt := '6';
            WHEN 3000
            THEN
               v_ded_amt := '7';
            ELSE
               IF ho_claim_stat.DED_AMT > 101 AND ho_claim_stat.DED_AMT < 199
               THEN
                  v_ded_amt := 'b';
               ELSE
                  IF     ho_claim_stat.DED_AMT > 201
                     AND ho_claim_stat.DED_AMT < 249
                  THEN
                     v_ded_amt := 'c';
                  ELSE
                     v_ded_amt := '9';
                  END IF;
               END IF;
         END CASE;


         v_liab_limit := TRIM (ho_claim_stat.cove);

         CASE v_liab_limit
            WHEN '3'
            THEN
               v_liab_limit := '1';
            WHEN '5'
            THEN
               v_liab_limit := '3';
            WHEN '7'
            THEN
               v_liab_limit := '5';
            WHEN '8'
            THEN
               v_liab_limit := '6';
            ELSE
               v_liab_limit := '9';
         END CASE;

         CASE TRIM (ho_claim_stat.PROT_CLASS)
            WHEN 'A'
            THEN
               v_prot_rating_ter := '1';
            WHEN 'OA'
            THEN
               v_prot_rating_ter := '1';
            WHEN 'B'
            THEN
               v_prot_rating_ter := '3';
            WHEN 'OB'
            THEN
               v_prot_rating_ter := '3';
            WHEN 'C'
            THEN
               v_prot_rating_ter := '6';
            WHEN 'OC'
            THEN
               v_prot_rating_ter := '6';
            WHEN '10'
            THEN
               v_prot_rating_ter := '6';
            ELSE
               IF ho_claim_stat.feet_hydrant > 1000
               THEN
                  v_prot_rating_ter := '3';
               ELSE
                  v_prot_rating_ter := '1';
               END IF;
         END CASE;

         EXIT WHEN v_err_fl != 0;

         get_loss_type (ho_claim_stat.cov_code,
                        ho_claim_stat.type_loss,
                        v_loss_type);

         ---test1 v_loss_amount := ho_claim_stat.loss_amount;
         -- this is an open and claim count needs to be counted
         IF ho_claim_stat.current_reserve = ho_claim_stat.starting_reserve
         THEN
            v_claim_count := 1;
         ELSE
            v_claim_count := 0;
         END IF;

         --coverage code position 46
         CASE TRIM (ho_claim_stat.DWELL_CODE)
            WHEN 'P'
            THEN
               v_dwell_code := '1';
            WHEN 'S'
            THEN
               v_dwell_code := '5';
            WHEN 'R'
            THEN
               v_dwell_code := '5';
            WHEN '2'
            THEN
               v_dwell_code := '7';
            WHEN '3'
            THEN
               v_dwell_code := '7';
            ELSE
               v_dwell_code := '1';
         END CASE;

         ----------------------------------------------
         --position coverage code positon 46
         v_return_value := 'N';
         get_endorsement_at_loss (TRIM (ho_claim_stat.eff_date),
                                  TRIM (ho_claim_stat.exp_date),
                                  TRIM (ho_claim_stat.actg_date),
                                  TRIM (ho_claim_stat.loss_date),
                                  TRIM (ho_claim_stat.user_line),
                                  TRIM (ho_claim_stat.policy_number),
                                  'MPL47',
                                  v_return_value,
                                  v_return_parm1);
         V_MPL47_MPL49 := TRIM (v_return_value);

         EXIT WHEN v_err_fl != 0;

         IF v_mpl47_mpl49 = 'N'
         THEN
            get_endorsement_at_loss (TRIM (ho_claim_stat.eff_date),
                                     TRIM (ho_claim_stat.exp_date),
                                     TRIM (ho_claim_stat.actg_date),
                                     TRIM (ho_claim_stat.loss_date),
                                     TRIM (ho_claim_stat.user_line),
                                     TRIM (ho_claim_stat.policy_number),
                                     'MPL49',
                                     v_return_value,
                                     v_return_parm1);
            V_MPL47_MPL49 := TRIM (v_return_value);
         END IF;

         ---------------------------------------------------
         --- position 46 dwell code

         IF V_MPL47_MPL49 = 'Y'
         THEN
            CASE v_dwell_code
               WHEN '1'
               THEN
                  v_dwell_code := '2';
               WHEN '5'
               THEN
                  v_dwell_code := '4';
               WHEN '7'
               THEN
                  v_dwell_code := '6';
            END CASE;
         END IF;

         EXIT WHEN v_err_fl != 0;
         ---------------------------------------------------
         ---program code position 41
         v_return_value := 'N';
         get_endorsement_at_loss (TRIM (ho_claim_stat.eff_date),
                                  TRIM (ho_claim_stat.exp_date),
                                  TRIM (ho_claim_stat.actg_date),
                                  TRIM (ho_claim_stat.loss_date),
                                  TRIM (ho_claim_stat.user_line),
                                  TRIM (ho_claim_stat.policy_number),
                                  'PRFD',
                                  v_return_value,
                                  v_return_parm1);

         IF TRIM (v_return_value) = 'Y'
         THEN
            v_program_code := '2';
         ELSE
            v_program_code := '1';
         END IF;

         --------------------------------------
         ----- windstorm position 106

         v_return_value := 'N';
         get_endorsement_at_loss (TRIM (ho_claim_stat.eff_date),
                                  TRIM (ho_claim_stat.exp_date),
                                  TRIM (ho_claim_stat.actg_date),
                                  TRIM (ho_claim_stat.loss_date),
                                  TRIM (ho_claim_stat.user_line),
                                  TRIM (ho_claim_stat.policy_number),
                                  'MPL22',
                                  v_return_value,
                                  v_return_parm1);

         IF TRIM (v_return_value) = 'N'
         THEN
            v_windstorm_ded := ' ';
         ELSE
            CASE TRIM (v_return_parm1)
               WHEN ''
               THEN
                  v_windstorm_ded := ' ';
               WHEN ' '
               THEN
                  v_windstorm_ded := ' ';
               WHEN '050'
               THEN
                  v_windstorm_ded := '7';
               WHEN '030'
               THEN
                  v_windstorm_ded := '6';
               WHEN '020'
               THEN
                  v_windstorm_ded := '5';
               WHEN '010'
               THEN
                  v_windstorm_ded := '4';
               WHEN '005'
               THEN
                  v_windstorm_ded := '3';
               ELSE
                  v_windstorm_ded := '9';
            END CASE;
         END IF;

         EXIT WHEN v_err_fl != 0;
         -------------------------------------------------------
         ----pct of manual position 52-54 n/a to claims

         v_pct_of_manual := '   ';

         -------------------------------------------
         v_type_of_business := '1';

         -------------------------------------------
         --position 169-172

         IF ho_claim_stat.const_year = 0
         THEN
            v_const_year := 9999;
         ELSE
            v_const_year := ho_claim_stat.const_year;
         END IF;

         IF ho_claim_stat.LOC_ZIP2 = '0000'
         THEN
            v_zip2 := '    ';
         ELSE
            v_zip2 := ho_claim_stat.LOC_ZIP2;
         END IF;

         -------------------------------------------
         --positon 173-176
         v_misc_end := ' ';
         v_return_value := 'N';
         get_endorsement_at_loss (TRIM (ho_claim_stat.eff_date),
                                  TRIM (ho_claim_stat.exp_date),
                                  TRIM (ho_claim_stat.actg_date),
                                  TRIM (ho_claim_stat.loss_date),
                                  TRIM (ho_claim_stat.user_line),
                                  TRIM (ho_claim_stat.policy_number),
                                  'HO 04 54',
                                  v_return_value,
                                  v_return_parm1);

         IF RTRIM (v_return_value) = 'Y'
         THEN
            v_misc_end := '001';                                 -- Earthquake
         END IF;

         ----------------------------------------------

         IF TRIM (ho_claim_stat.company) = '04'
         THEN
            v_company := '0056';
         ELSE
            v_company := '0060';
         END IF;

         v_id_cd := '01';

         INSERT INTO RPT_CLAIMS_MSO_HO_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             ACCIDENT_DATE,
                                             REPORT_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             CAT_CODE,
                                             FILLER_1,
                                             PROT_RATING_TERR,
                                             POLICY_FORM,
                                             AMOUNT_OF_INS,
                                             PROGRAM_CODE,
                                             NUM_OF_FAMILIES,
                                             CONSTRUCTION,
                                             LIAB_LIMIT_COVE,
                                             DEDUCTIBLE_SIZE,
                                             COVERAGE,
                                             TERR_CODE,
                                             FILLER_2,
                                             RATE_SET,
                                             PCT_OF_MANUAL,
                                             CAUSE_OF_LOSS,
                                             CLAIM_COUNT,
                                             LOSS_AMOUNT,
                                             MSO_MODULE,
                                             CLAIM_NUMBER,
                                             ZIP_CODE,
                                             ZIP_CODE2,
                                             FILLER_3,
                                             LOSS_COST_MULT,
                                             INSURANCE_SCORE,
                                             WINDSTORM_DED,
                                             FILLER_4,
                                             FILLER_5,
                                             FILLER_6,
                                             ALAE,
                                             FILLER_7,
                                             TYPE_OF_BUSINESS,
                                             YEAR_OF_CONSTRUCTION,
                                             MISC_END,
                                             FILLER_8)
              VALUES (v_company,                                     --company
                      v_trans_code,                                --transcode
                      v_orig_trans_code,
                      '2',                                        -- stat plan
                      TO_CHAR (ho_claim_stat.ACTG_DATE, 'MMDDYY'), --acctng_date
                      TO_CHAR (ho_claim_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE ,
                      TO_CHAR (ho_claim_stat.LOSS_DATE, 'MMDDYY'), -- TRANS_EFF_DATE,
                      TO_CHAR (ho_claim_stat.REPORTED_DATE, 'MMDDYY'), -- TRANS_EXP_DATE ,
                      '29',                                           -- state
                      '040',                                            -- ASL
                      '040',                                       -- SUBLINE,
                      --dmb 04/29 to_char(ho_claim_stat.cat_number),                                -- CAT CODE
                      NVL (ho_claim_stat.cat_number, ' '), -- CAT CODE   -dmb 04/29
                      ' ',                                         -- FILLER_1
                      v_prot_rating_ter,                  -- PROT_RATING_TERR,
                      TRIM (ho_claim_stat.form_num),            -- POLICY_FORM
                      v_amt_of_ins,      -- AMOUNT_OF_INS this is not rounded,
                      v_program_code,                           --PROGRAM_CODE
                      ho_claim_stat.FAMILIES,              -- NUM_OF_FAMILIES,
                      v_construct_code,                        -- CONSTRUCTION
                      v_liab_limit,                             --- LIAB-LIMIT
                      v_ded_amt,                          -- DEDUCTIBLE_SIZE ,
                      v_dwell_code,                    -- COVERAGE position 46
                      v_terr_code, -- TERR_CODE,47-48 pretty sure these are incorrect. codes over 30
                      ' ',                                         -- filler_3
                      '  ',                           -- RATE_SET na to claims
                      v_pct_of_manual,       -- PCT_OF_MANUAL,  - na to claims
                      v_loss_type,
                      v_CLAIM_COUNT,
                      ho_claim_stat.current_reserve, ---- TEST OSS_AMOUNT,              -- Round this to whole dollar  PREMIUM_AMOUNT,
                      v_id_cd,                                  -- MSO_MODULE,
                      ---4/29    (rpad(ho_claim_stat.CLAIM_NUMBER,10,' ') || trim(ho_claim_stat.cov_code) ),-- trim( ho_stat.CLAIM_NUMBER),      -- POLICY_NUMBER,
                      (RPAD (ho_claim_stat.CLAIM_NUMBER, 10, ' ')) || RPAD (ho_claim_stat.COV_CODE, 3, ' '), -- trim( ho_stat.CLAIM_NUMBER),      -- POLICY_NUMBER,
                      ho_claim_stat.LOC_ZIP,                     -- ZIP_CODE ,
                      NVL (v_zip2, ' '),                        -- ZIP_CODE2 ,
                      ' ',                                        -- filler_6,
                      '   ',                                -- LOSS_COST_MULT,
                      '   ',                               -- INSURANCE_SCORE,
                      v_windstorm_ded,          -- WIND STORM DED position 106
                      ' ',                                         -- filler_7
                      (rpad(to_char(ho_claim_stat.cov_code),3,' ') || rpad(to_char(ho_claim_stat.user_line),2,' ') || lpad(to_char(ho_claim_stat.item_num),3,'0') || ho_claim_stat.policy_number),                                    -- filler_8  new
                      ' ',                                    -- filler 9  new
                      v_alae_amount, --- '       ',                         -- ALAE     new
                      ' ',                                    -- filler 10 new
                      v_type_of_business,              -- type of business new
                      v_const_year,                 --YEAR_OF_CONSTRUCTION new
                      v_misc_end,                              -- MISC_END new
                      ' ');                                   --filler 11  new


         COMMIT;

        <<skip_ho_claim>>
         NULL;
      END LOOP;

      CLOSE all_claim_stat;
   --  commit;  ---test


   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || ho_claim_stat.claim_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;



   PROCEDURE collect_prem_mso_im_data_loop
   IS
      v_procname          RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.COLLECT_PREM_MSO_IM_DATA_LOOP';
      v_err_mssg          VARCHAR2 (200);
      v_err_loc           VARCHAR2 (100);

      CURSOR all_im_stat
      IS
           SELECT *
             FROM RPT_POLICY_IM_STAT A
            WHERE   ---test88  a.company = '04'
               -- tes88t   AND a.state_cd = 'NJ'
               -- test88   AND A.GROUP_LINE IN ('24', '68')
                   a.company in ('04','01')
                         AND a.state_cd in ('NJ','AR') --test88
                         AND A.GROUP_LINE IN ('24', '68', '26') --test88
                  AND a.book_date >= TO_DATE (v_begin_date)
                  AND a.book_date <= TO_DATE (v_end_date)
              --test    and a.book_date <= TO_DATE ('01312015', 'MMDDYYYY')--test88 hard code this for testing purposes only
                  AND A.COV_CODE < '990'
                  AND a.sdac_ind = '1'
         ORDER BY a.company,
                  a.state_cd,
                  a.group_line,
                  a.book_date,
                  A.POLICY_NUMBER;


      im_stat             all_im_stat%ROWTYPE;
      v_trans_code        VARCHAR2 (1);
      v_orig_trans_code   VARCHAR2 (2);
      v_type_of_policy    VARCHAR (2);
      v_class_code        VARCHAR (3);
      v_ho_terr           VARCHAR (2);
      v_ho_families       VARCHAR (1);
      v_ho_row_town       VARCHAR (1);
      v_limit_of_liab     VARCHAR (2);
      v_ho_dwell_code     VARCHAR (1);
      v_written_prem      NUMBER;
      v_id_cd             VARCHAR (2);
      v_company           VARCHAR (4);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_prem_mso_im_data_loop_insert';

      OPEN all_im_stat;

      LOOP
         FETCH all_im_stat INTO im_stat;

         EXIT WHEN all_im_stat%NOTFOUND;

         get_trans_code (im_stat.trans_code,
                         im_stat.old_new_stat,
                         im_stat.chg_date,
                         im_stat.eff_date,
                         v_trans_code);


         --if fixed get from IM stat otherwise get from the ho stat
         IF im_stat.group_line = '24'
         THEN
            IF (    LPAD (TO_CHAR (im_stat.terr), 2, '0') > '00'
                AND LPAD (TO_CHAR (im_stat.terr), 2, '0') < '46')
            THEN
               v_ho_terr := LPAD (TO_CHAR (im_stat.terr), 2, '0');
            ELSE
               get_homeowners_stat (TRIM (im_stat.company),
                                    TRIM (im_stat.state_cd),
                                    TRIM (im_stat.group_line),
                                    TRIM (im_stat.eff_date),
                                    TRIM (im_stat.exp_date),
                                    TRIM (im_stat.book_date),
                                    TRIM (im_stat.actg_date),
                                    TRIM (im_stat.chg_date),
                                    TRIM (im_stat.item_state_cd),
                                    TRIM (im_stat.location),
                                    TRIM (im_stat.item_num),
                                    TRIM (im_stat.policy_number),
                                    TRIM (im_stat.old_new_stat),
                                    TRIM (im_stat.proc_ctr),
                                    TRIM (im_stat.trans_code),
                                    TRIM (im_stat.sdac_ind),
                                    v_ho_dwell_code,
                                    v_ho_terr,
                                    v_ho_families,
                                    v_ho_row_town);
            END IF;

            v_ho_terr := LPAD (TO_CHAR (v_ho_terr), 2, '0');
         ELSE
            v_ho_terr := LPAD (TO_CHAR (im_stat.terr), 2, '0');
         END IF;

         IF im_stat.group_line = '24' then
             convert_territory_ho (v_ho_terr, v_ho_terr);
         else
             convert_territory_fo (v_ho_terr, v_ho_terr);
         end if;

         CASE TRIM (im_stat.class_code)  when '331'
             THEN
               v_class_code := '150';                       --personal jewelry
            when '332'
            THEN
               v_class_code := '998';                       --farmowners commerical inland marine class code Jane at MSO will get back to me straw in open
            when '333'
            THEN
               v_class_code := '998';                       --farmowners commerical inland marine class code Jane at MSO will get back to me straw in structures
          
            
            WHEN '070'
            THEN
               v_class_code := '372';                       --personal jewelry
            WHEN '071'
            THEN
               v_class_code := '372';                       --personal jewelry
            WHEN '079'
            THEN
               v_class_code := '372';                       --jewlery in vault
            WHEN '091'
            THEN
               v_class_code := '371';                          --personal furs
            WHEN '140'
            THEN
               v_class_code := '373';                                  --bikes
            WHEN '141'
            THEN
               v_class_code := '373';                                   --golf
            WHEN '142'
            THEN
               v_class_code := '373';                                   --guns
            WHEN '144'
            THEN
               v_class_code := '999';                             --silverware
            WHEN '180'
            THEN
               v_class_code := '012';          -- mom comm all otherr outboard
            WHEN '190'
            THEN
               v_class_code := '032';                               -- cameras
            WHEN '199'
            THEN
               v_class_code := '998';                                  -- misc
            WHEN '335'
            THEN
               v_class_code := '208';              -- fine arts non commercial
            WHEN '336'
            THEN
               v_class_code := '208';              -- fine arts non commercial
            WHEN '450'
            THEN
               v_class_code := '316';    -- musical instruments non commercial
            WHEN '451'
            THEN
               v_class_code := '315';                  -- i dont know  -- test
            WHEN '452'
            THEN
               v_class_code := '315'; --musical instrument professional use w/MPL92
            WHEN '453'
            THEN
               v_class_code := '316';                   -- i dont know ---test
            WHEN '455'
            THEN
               v_class_code := '316';                      -- organ non mobile
            WHEN '456'
            THEN
               v_class_code := '315'; -- organ non mobile with mpl92 professional
            WHEN '513'
            THEN
               v_class_code := '998';                                -- stamps
            WHEN '515'
            THEN
               v_class_code := '998';                                 -- coins
            WHEN '516'
            THEN
               v_class_code := '998';                         -- coins w mpl93
            WHEN '676'
            THEN
               v_class_code := '372';                         --Jewelery
            WHEN '675'
            THEN
               v_class_code := '999';                         -- Guns
            ELSE
               v_class_code := TRIM (im_stat.class_code); -- if no match report the class on the record
         END CASE;

         v_written_prem := ROUND (im_stat.WRITTEN_PREM);

         IF TRIM (im_stat.company) = '04'
         THEN
            v_company := '0056';
            v_id_cd := '05';
         ELSE
            v_company := '0060';
            v_id_cd := '03';
         END IF;

         -- test 5 INSERT INTO DBOHLMAN.RPT_POLICY_MSO_IM_STAT
         INSERT INTO RPT_POLICY_MSO_IM_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             TRANS_EFF_DATE,
                                             TRANS_EXP_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             FILLER_1,
                                             TERR_CODE,
                                             TYPE_OF_POLICY,
                                             CLASS_CODE,
                                             FILLER_2,
                                             FILLER_3,
                                             PREMIUM_AMOUNT,
                                             MSO_MODULE,
                                             POLICY_NUMBER,
                                             FILLER_4)
              VALUES (v_company,                                     --company
                      v_trans_code,                                --transcode
                      RTRIM (im_stat.trans_code),
                      '2',                                        -- stat plan
                      TO_CHAR (im_stat.ACTG_DATE, 'MMDDYY'), -- end of quarter date
                      TO_CHAR (im_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE ,
                      TO_CHAR (im_stat.CHG_DATE, 'MMDDYY'), -- TRANS_EFF_DATE,
                      TO_CHAR (im_stat.EXP_DATE, 'MMDDYY'), -- TRANS_EXP_DATE ,
                      '29',                                           -- state
                      '090',                                            -- ASL
                      '920',                                       -- SUBLINE,
                      ' ',                                         -- filler_1
                      LPAD(Trim(v_ho_terr),2,'0'),                -- TERR_CODE
                      '10',                                  -- TYPE_OF_POLICY
                      TRIM (v_class_code),                       -- CLASS_CODE
                      ' ',                                         -- FILLER_2
                      ' ',                                         -- FILLER_3
                      im_stat.WRITTEN_PREM, -- Round this to whole dollar  PREMIUM_AMOUNT,
                      v_id_cd,                                 --- MSO_MODULE,
                      TRIM (im_stat.policy_number),          -- POLICY_NUMBER,
                      ' ');                                        -- FILLER_4

         COMMIT;
      END LOOP;

      CLOSE all_im_stat;
   -- commit; --test


   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || im_stat.policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;


   PROCEDURE collect_claim_im_OUTSTANDING
   IS
      v_procname          RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.COLLECT_CLAIM_IM_OUTSTANDING';
      v_err_mssg          VARCHAR2 (200);
      v_err_loc           VARCHAR2 (100);

  
      CURSOR all_claim_stat
      IS
           SELECT distinct
                           s.Claim_Number,
                           s.Policy_Number,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as CURRENT_RESERVE,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, '01012015', s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as Starting_reserve,
                           s.state_cd,
                           s.company,
                           s.cat_number,
                           s.group_line,
                           s.user_line,
                           s.eff_date,
                           s.exp_date,
                           s.actg_date,
                           s.reported_date,
                           s.trans_code,
                           s.loss_date,
                           s.item_num,
                           s.loc_zip,
                           s.loc_zip2,
                           --- s.type_loss,
                           Get_IM_MSO_Type_Loss (s.claim_number, s.class_code, s.Cov_Code, v_end_date) as type_loss,
                           s.terr,
                           s.class_code,
                           s.cov_code

             FROM RPT_CLAIMS_IM_STAT s
            WHERE    ( (s.company = '04'
                  AND s.state_cd = 'NJ'
                  AND s.GROUP_LINE IN ('24', '68')
                  AND s.user_line in ('68') )
                        OR
                  (s.company = '01'
                  AND s.state_cd = 'AR'
                  AND s.GROUP_LINE IN ('26')
                  AND s.user_line in ('68', '70') ) )

                  AND s.book_date <= v_end_date
                  AND s.COV_CODE < '990'
                  AND s.sdac_ind = '1'
                  AND RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                       <> 0

                  AND s.actg_date = 
                         (SELECT MAX (s1.actg_date)
                            FROM rpt_claims_IM_stat s1
                           WHERE     s.claim_number = s1.claim_number
                                 AND s.group_line = s1.group_line
                                 AND s.user_line = s1.user_line
                                 AND s.cov_code = s1.cov_code
                                 AND s.company = s1.company
                                 AND s.state_cd = s1.state_cd
                                 AND s.policy_number = s1.policy_number
                                 AND s.eff_date = s1.eff_date
                                 AND s.exp_date = s1.exp_date
                                 AND s.item_state_cd = s1.item_state_cd
                                 AND s.location = s1.location
                                 AND s.user_line = s1.user_line
                                 AND s.item_num = s1.item_num
                                 AND s.cov_code = s1.cov_code
                                 AND s.end_num = s1.end_num
                                 AND s.sdac_ind = s1.sdac_ind
                                 AND s1.book_date <= v_end_date);

     im_claim_stat       all_claim_stat%ROWTYPE;
      v_trans_code        VARCHAR (1);
      v_orig_trans_code   VARCHAR (2);
      v_item_families     VARCHAR (1);
      v_item_dwell_code   VARCHAR (1);
      v_type_of_policy    VARCHAR (2);
      v_class_code        VARCHAR (4);
      v_ho_terr           VARCHAR (2);
      v_ho_families       VARCHAR (1);
      v_ho_row_town       VARCHAR (1);
      v_limit_of_liab     VARCHAR (2);
      v_ho_dwell_code     VARCHAR (1);
      v_loss_type         VARCHAR (2);
      v_claim_count       NUMBER;
      v_loss_amount       NUMBER;
      v_alae_amount       NUMBER := 0;
      v_company           VARCHAR (4);
      v_id_cd             VARCHAR (2);
   --      v_ho_terr varchar(2);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_claim_im_OUTSTANDING';

      OPEN all_CLAIM_stat;

      LOOP
         FETCH all_CLAIM_stat INTO IM_CLAIM_stat;

         EXIT WHEN all_CLAIM_stat%NOTFOUND;
         
         if im_CLAIM_stat.state_cd = 'NJ'
         THEN
             IF  im_CLAIM_stat.state_cd = 'NJ'
                AND im_CLAIM_stat.eff_date > TO_DATE ('03/31/2008', 'mm/dd/yyyy')
                AND (   SUBSTR (im_CLAIM_stat.Policy_number, 1, 1) = 'H'
                     OR SUBSTR (im_claim_stat.policy_number, 1, 1) = 'D'
                     OR SUBSTR (im_claim_stat.policy_number, 1, 1) = 'F')
                AND (im_claim_stat.group_line = '24')
             THEN
                NULL;
             ELSE
                IF     im_claim_stat.state_cd = 'NJ'
                   AND im_claim_stat.eff_date >
                          TO_DATE ('03/31/2011', 'mm/dd/yyyy')
                   AND SUBSTR (im_claim_stat.Policy_number, 1, 2) = 'IM'
                   AND im_claim_stat.group_line = '68'
                THEN                          --- this might be user line not sure
                   NULL;
                ELSE
                   GOTO skip_im_claim;
                END IF;
             END IF;
         END IF;
         
         IF im_claim_stat.CURRENT_RESERVE > 0
         THEN
            v_TRANS_CODE := '8';
            v_orig_trans_code := '8';
         ELSE
            v_TRANS_CODE := '9';
            v_orig_trans_code := '9';
         END IF;

         convert_territory_ho (TRIM (im_claim_stat.terr), v_ho_terr);

         get_loss_type (im_claim_stat.cov_code,
                        im_claim_stat.type_loss,
                        v_loss_type);

         --  v_loss_type := '23';
         --  v_loss_amount := im_claim_stat.loss_amount;

         IF im_claim_stat.current_reserve = im_claim_stat.starting_reserve
         THEN
            v_claim_count := 1;
         ELSE
            v_claim_count := 0;
         END IF;

         CASE TRIM (im_claim_stat.class_code)
            WHEN '070'
            THEN
               v_class_code := '372';                       --personal jewelry
            WHEN '071'
            THEN
               v_class_code := '372';                       --personal jewelry
            WHEN '079'
            THEN
               v_class_code := '372';                       --jewlery in vault
            WHEN '091'
            THEN
               v_class_code := '371';                          --personal furs
            WHEN '140'
            THEN
               v_class_code := '373';                                  --bikes
            WHEN '141'
            THEN
               v_class_code := '373';                                   --golf
            WHEN '142'
            THEN
               v_class_code := '373';                                   --guns
            WHEN '144'
            THEN
               v_class_code := '999';                             --silverware
            WHEN '180'
            THEN
               v_class_code := '012';          -- mom comm all otherr outboard
            WHEN '190'
            THEN
               v_class_code := '032';                               -- cameras
            WHEN '199'
            THEN
               v_class_code := '998';                                  -- misc
            WHEN '335'
            THEN
               v_class_code := '208';              -- fine arts non commercial
            WHEN '336'
            THEN
               v_class_code := '208';              -- fine arts non commercial
            WHEN '450'
            THEN
               v_class_code := '316';    -- musical instruments non commercial
            WHEN '451'
            THEN
               v_class_code := '315';                           -- i dont know
            WHEN '452'
            THEN
               v_class_code := '315'; --musical instrument professional use w/MPL92
            WHEN '453'
            THEN
               v_class_code := '316';                           -- i dont know
            WHEN '455'
            THEN
               v_class_code := '316';                      -- organ non mobile
            WHEN '456'
            THEN
               v_class_code := '315'; -- organ non mobilet with mpl92 professional
            WHEN '513'
            THEN
               v_class_code := '998';                                -- stamps
            WHEN '515'
            THEN
               v_class_code := '998';                                 -- coins
            WHEN '516'
            THEN
               v_class_code := '998';                         -- coins w mpl93
            WHEN '676'
            THEN
               v_class_code := '372';                         --Jewelery
            WHEN '675'
            THEN
               v_class_code := '999';                         -- Guns
            WHEN '3310'
            THEN
               v_class_code := '150';                         -- Guns
            ELSE
               v_class_code := TRIM (im_claim_stat.class_code); -- if no match report the class on the record
         END CASE;
         
           IF TRIM (im_claim_stat.company) = '01' THEN
             IF V_CLASS_CODE is null THEN
               get_item_master_for_loss (TRIM (im_claim_stat.eff_date),
                                   TRIM (im_claim_stat.exp_date),
                                   TRIM (im_claim_stat.actg_date),
                                   TRIM (im_claim_stat.loss_date),         
                                   trim (im_claim_stat.user_line),
                                   TRIM (im_claim_stat.policy_number),
                                   trim (im_claim_stat.item_num)  ,
                                   v_item_families,
                                   v_item_dwell_code,
                                   v_class_code);
               CASE V_CLASS_CODE
                  when '3310'   THEN
                          v_class_code := '150';                       --personal jewelry
                  when '3320'   THEN
                       v_class_code := '998';                       --farmowners commerical inland marine class code Jane at MSO will get back to me straw in open
                  when '3330'    THEN
                       v_class_code := '998';                       --farmowners commerical inland marine class code Jane at MSO will get back to me straw in structures
                  END CASE;    
             END IF;
         
         END IF ;

         IF TRIM (im_claim_stat.company) = '04'
         THEN
            v_id_cd := '05';
            v_company := '0056';
         ELSE
            v_id_cd := '03';
            v_company := '0060';
         END IF;

         --INSERT INTO DBOHLMAN.RPT_CLAIMS_MSO_IM_STAT
         INSERT INTO RPT_CLAIMS_MSO_IM_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             ACCIDENT_DATE,
                                             REPORT_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             CAT_CODE,
                                             TERR_CODE,
                                             TYPE_OF_POLICY,
                                             CLASS_CODE,
                                             FILLER_1,
                                             CAUSE_OF_LOSS,
                                             CLAIM_COUNT,
                                             LOSS_AMOUNT,
                                             MSO_MODULE,
                                             CLAIM_NUMBER,
                                             FILLER_2,
                                             ALAE,
                                             FILLER_3)
              VALUES (v_company,                                     --company
                      v_trans_code,                                --transcode
                      v_orig_trans_code,
                      '2',                                        -- stat plan
                      TO_CHAR (im_claim_stat.ACTG_DATE, 'MMDDYY'), -- end of quarter date
                      TO_CHAR (im_claim_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE ,
                      TO_CHAR (im_claim_stat.LOSS_DATE, 'MMDDYY'), -- ACCIDENT_DATE ,
                      TO_CHAR (im_claim_stat.REPORTED_DATE, 'MMDDYY'), -- REPORT_DATE ,
                      '29',                                           -- state
                      '090',                                            -- ASL
                      '920',                                       -- SUBLINE,
                      --  nvl(to_char(im_claim_stat.cat_number), ' '),            -- CAT CODE
                      NVL (im_claim_stat.cat_number, ' '),        ---dmb 04/29
                      LPAD(Trim(v_ho_terr),2,'0'), -- TERR_CODE these are incorrect. ND is correcting
                      '10',                                  -- TYPE_OF_POLICY
                      TRIM (v_class_code),                       -- CLASS_CODE
                      ' ',                                         -- FILLER_1
                      v_loss_type,                            -- CAUSE_OF_LOSS
                      TO_CHAR (v_claim_count), -- CLAIM COUNT  calculate b2clm
                      IM_claim_STAT.CURRENT_RESERVE, -- Round this to whole dollar  LOSS_AMOUNT,
                      v_id_cd, --- this is a 5 for IM under company 0056 home and looks like a '3' for farm MSO_MODULE,
                      --4/29   (rpad(im_claim_stat.CLAIM_NUMBER,10,' ') || trim(im_claim_stat.cov_code) ),-- trim( ho_stat.CLAIM_NUMBER),      -- POLICY_NUMBER,
                      --(RPAD (im_claim_stat.CLAIM_NUMBER, 13, ' ')), -- trim( ho_stat.CLAIM_NUMBER),      -- POLICY_NUMBER,
                      (RPAD (TRIM (im_claim_stat.CLAIM_number), 10, ' ') || TRIM (TO_CHAR (im_claim_stat.cov_code))),
                      (RPAD(' ', 50, ' ') || rpad(im_claim_stat.cov_code,3,' ') || rpad(to_char(im_claim_stat.user_line),2,' ') || lpad(to_char(im_claim_stat.item_num),3,'0') || im_claim_stat.policy_number),                                         -- FILLER_2
                      v_alae_amount, --' ',                             --- ALAE
                      ' ');                                        -- FILLER_3

         COMMIT;

        <<skip_im_claim>>
         NULL;
      END LOOP;

      CLOSE all_claim_stat;
   ---  commit; --test


   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || im_claim_stat.claim_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE collect_claim_im_paid
   IS
      v_procname          RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.COLLECT_CLAIM_IM_PAID';
      v_err_mssg          VARCHAR2 (200);
      v_err_loc           VARCHAR2 (100);

      CURSOR all_im_stat
      IS
           SELECT *
             FROM RPT_CLAIMS_IM_STAT A
            WHERE   ( ( a.company = '04'
                  AND a.state_cd = 'NJ'
                  AND A.GROUP_LINE IN ('24', '68')) or 
                  ( a.company = '01'
                  AND a.state_cd = 'AR'
                  AND A.GROUP_LINE IN ('26')
                  AND A.USER_LINE IN ('68', '70')) )
                  AND a.book_date >= TO_DATE (v_begin_date)
                  AND a.book_date <= TO_DATE (v_end_date)
                  AND A.COV_CODE < '990'
                  AND a.sdac_ind = '1'
                  AND a.trans_code IN
                         ('41',
                          '51',
                          '61',                               ---loss payments
                          '42',
                          '52',
                          '62',                            -- expense payments
                          '44',
                          '54',
                          '64',
                          '47',
                          '57',
                          '67',
                          '48',
                          '58',
                          '68',
                          '71',
                          '81',
                          '91',                         ---recoveries   -05/05
                          '72',
                          '82',
                          '92',
                          '86',                                  --subrogation
                          '73',
                          '83',
                          '93',
                          '87')                                --contribution)
         ORDER BY a.company,
                  a.state_cd,
                  a.group_line,
                  a.book_date,
                  A.CLAIM_NUMBER;


      im_stat             all_im_stat%ROWTYPE;
      v_trans_code        VARCHAR (1);

      v_orig_trans_code   VARCHAR (2);
      v_type_of_policy    VARCHAR (2);
      v_class_code        VARCHAR (4);
      v_ho_terr           VARCHAR (2);
      v_ho_families       VARCHAR (1);
      v_ho_row_town       VARCHAR (1);
      v_limit_of_liab     VARCHAR (2);
      v_ho_dwell_code     VARCHAR (1);
      v_loss_type         VARCHAR (2);
      v_claim_count       NUMBER;
      v_loss_amount       NUMBER;
      v_alae_amount       NUMBER;
      v_company           VARCHAR (4);
      v_id_cd             VARCHAR (2);
      v_item_dwell_code     VARCHAR (1);
      v_item_families       VARCHAR (1);
   --      v_ho_terr varchar(2);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_claim_im_paid';

      OPEN all_im_stat;

      LOOP
         FETCH all_im_stat INTO im_stat;

         EXIT WHEN all_im_stat%NOTFOUND;

         IF        im_stat.state_cd = 'NJ'
               AND im_stat.eff_date > TO_DATE ('03/31/2008', 'mm/dd/yyyy')
               AND (   SUBSTR (im_stat.Policy_number, 1, 1) = 'H'
                    OR SUBSTR (im_stat.policy_number, 1, 1) = 'D'
                    OR SUBSTR (im_stat.policy_number, 1, 1) = 'F')
               AND (im_stat.group_line = '24')
            OR (    im_stat.group_line = '54'
                AND (   im_stat.csp_subline = '460'
                     OR im_stat.csp_subline = '470'
                     OR im_stat.csp_subline = '480'))
         THEN
            NULL;
         ELSE
            IF     im_stat.state_cd = 'NJ'
               AND im_stat.eff_date > TO_DATE ('03/31/2011', 'mm/dd/yyyy')
               AND SUBSTR (im_stat.Policy_number, 1, 2) = 'IM'
               AND im_stat.group_line = '68'
            THEN                          --- this might be user line not sure
               NULL;
            ELSE
               -- GOTO skip_im_claim;
               NULL;
            END IF;
         END IF;

        --If im_stat.state_cd != 'AR' then
        --    GOTO skip_im_claim;        
        --END IF; 


         IF im_stat.loss_amount > 0
         THEN
            IF    im_stat.trans_code = '41'
               OR im_stat.trans_code = '51'
               OR im_stat.trans_code = '61'
            THEN
               v_TRANS_CODE := '6';
               v_orig_trans_code := '6L';
               v_loss_amount := im_stat.loss_amount;
               v_alae_amount := 0;
            END IF;

            IF    im_stat.trans_code = '71'
               OR                                                    --salvage
                 im_stat.trans_code = '81'
               OR im_stat.trans_code = '91'
               OR im_stat.trans_code = '72'
               OR                                                       -- sub
                 im_stat.trans_code = '82'
               OR im_stat.trans_code = '92'
               OR im_stat.trans_code = '86'
               
               
               OR im_stat.trans_code = '87'
               OR im_stat.trans_code = '73'
               OR                                             -- contributioni
                 im_stat.trans_code = '83'
               OR im_stat.trans_code = '93'
            THEN
               v_TRANS_CODE := '7';
               v_orig_trans_code := '7L';
               v_loss_amount := (im_stat.loss_amount * -1);
               v_alae_amount := 0;
            END IF;

            IF    im_stat.trans_code = '42'
               OR im_stat.trans_code = '52'
               OR im_stat.trans_code = '62'                         -- expense
               OR im_stat.trans_code = '44'
               
               OR im_stat.trans_code = '54'
               OR im_stat.trans_code = '64'
               OR im_stat.trans_code = '47'
               OR im_stat.trans_code = '57'
               OR im_stat.trans_code = '67'
               OR im_stat.trans_code = '48'
               OR im_stat.trans_code = '58'
               OR im_stat.trans_code = '68'
            THEN
               v_trans_code := '6';
               v_orig_trans_code := '6X';
               v_loss_amount := 0;
               v_alae_amount := im_stat.loss_amount;
            END IF;
         ELSE
            IF    im_stat.trans_code = '41'
               OR im_stat.trans_code = '51'
               OR im_stat.trans_code = '61'
            THEN                                             --- loss payments
               v_TRANS_CODE := '7';
               v_orig_trans_code := '7L';                    --- loss payments
               v_loss_amount := im_stat.loss_amount;
               v_alae_amount := 0;
            END IF;

            IF    im_stat.trans_code = '71'
               OR                                                    --salvage
                 im_stat.trans_code = '81'
               OR im_stat.trans_code = '91'
               OR im_stat.trans_code = '72'
               OR                                                       -- sub
                 im_stat.trans_code = '82'
               OR im_stat.trans_code = '92'
               OR im_stat.trans_code = '86'
               OR im_stat.trans_code = '87'
               OR im_stat.trans_code = '73'
               OR                                             -- contributioni
                 im_stat.trans_code = '83'
               OR im_stat.trans_code = '93'
            THEN
               v_trans_code := '6';
               v_orig_trans_code := '6L';
               v_loss_amount := (im_stat.loss_amount * -1);
               v_alae_amount := 0;
            END IF;

            IF                                                      -- expense
                 im_stat.trans_code = '42'
               OR im_stat.trans_code = '52' 
               OR im_stat.trans_code = '62'                         -- expense
               OR im_stat.trans_code = '44'
               OR im_stat.trans_code = '54'
               OR im_stat.trans_code = '64'
               OR im_stat.trans_code = '47'
               OR im_stat.trans_code = '57'
               OR im_stat.trans_code = '67'
               OR im_stat.trans_code = '48'
               OR im_stat.trans_code = '58'
               OR im_stat.trans_code = '68'
            THEN
               v_trans_code := '7';
               v_orig_trans_code := '7X';                           -- expense
               v_loss_amount := 0;
               v_alae_amount := im_stat.loss_amount;
            END IF;
         END IF;

         --TEST DOES THE TERRITORY EXIST ON THE im ITEM OR THE HOME ON THE CLAIM?
         IF TRIM (im_stat.company) != '01' THEN
              convert_territory_ho (TRIM (im_stat.terr), v_ho_terr);
         ELSE 
             ---THIS IS MISSING GET FROM SOMEWHERE
              convert_territory_Fo (TRIM (im_stat.terr), v_ho_terr);
         END IF;

         get_loss_type (im_stat.cov_code, im_stat.type_loss, v_loss_type);
         -- '05-11 v_loss_type := '23';

         v_claim_count := 0;
         v_class_code := ' ';
         CASE TRIM (im_stat.class_code)
            WHEN '070'
            THEN
               v_class_code := '372';                       --personal jewelry
            WHEN '071'
            THEN
               v_class_code := '372';                       --personal jewelry
            WHEN '079'
            THEN
               v_class_code := '372';                       --jewlery in vault
            WHEN '091'
            THEN
               v_class_code := '371';                          --personal furs
            WHEN '140'
            THEN
               v_class_code := '373';                                  --bikes
            WHEN '141'
            THEN
               v_class_code := '373';                                   --golf
            WHEN '142'
            THEN
               v_class_code := '373';                                   --guns
            WHEN '144'
            THEN
               v_class_code := '999';                             --silverware
            WHEN '180'
            THEN
               v_class_code := '012';          -- mom comm all otherr outboard
            WHEN '190'
            THEN
               v_class_code := '032';                               -- cameras
            WHEN '199'
            THEN
               v_class_code := '998';                                  -- misc
            WHEN '335'
            THEN
               v_class_code := '208';              -- fine arts non commercial
            WHEN '336'
            THEN
               v_class_code := '208';              -- fine arts non commercial
            WHEN '450'
            THEN
               v_class_code := '316';    -- musical instruments non commercial
            WHEN '451'
            THEN
               v_class_code := '315';                           -- i dont know
            WHEN '452'
            THEN
               v_class_code := '315'; --musical instrument professional use w/MPL92
            WHEN '453'
            THEN
               v_class_code := '316';                           -- i dont know
            WHEN '455'
            THEN
               v_class_code := '316';                      -- organ non mobile
            WHEN '456'
            THEN
               v_class_code := '315'; -- organ non mobilet with mpl92 professional
            WHEN '513'
            THEN
               v_class_code := '998';                                -- stamps
            WHEN '515'
            THEN
               v_class_code := '998';                                 -- coins
            WHEN '516'
            THEN
               v_class_code := '998';                         -- coins w mpl93
            WHEN '676'
            THEN
               v_class_code := '372';                         --Jewelery
            WHEN '675'
            THEN
               v_class_code := '999';                         -- Guns
            WHEN '3310'
            THEN
               v_class_code := '150';                         -- Guns
            ELSE
               v_class_code := TRIM (im_stat.class_code); -- if no match report the class on the record
         END CASE;

         IF TRIM (im_stat.company) = '01' THEN
             IF V_CLASS_CODE is null THEN
               get_item_master_for_loss (TRIM (im_stat.eff_date),
                                   TRIM (im_stat.exp_date),
                                   TRIM (im_stat.actg_date),
                                   TRIM (im_stat.loss_date),         
                                   trim (im_stat.user_line),
                                   TRIM (im_stat.policy_number),
                                   trim (im_stat.item_num)  ,
                                   v_item_families,
                                   v_item_dwell_code,
                                   v_class_code);
               CASE V_CLASS_CODE
                  when '3310'   THEN
                          v_class_code := '150';                       --personal jewelry
                  when '3320'   THEN
                       v_class_code := '998';                       --farmowners commerical inland marine class code Jane at MSO will get back to me straw in open
                  when '3330'    THEN
                       v_class_code := '998';                       --farmowners commerical inland marine class code Jane at MSO will get back to me straw in structures
                  END CASE;    
             END IF;
         
         END IF ;


         IF TRIM (im_stat.company) = '04'
         THEN
            v_id_cd := '05';
            v_company := '0056';
         ELSE
            v_id_cd := '03';
            v_company := '0060';
         END IF;

         INSERT INTO RPT_CLAIMS_MSO_IM_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             ACCIDENT_DATE,
                                             REPORT_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             CAT_CODE,
                                             TERR_CODE,
                                             TYPE_OF_POLICY,
                                             CLASS_CODE,
                                             FILLER_1,
                                             CAUSE_OF_LOSS,
                                             CLAIM_COUNT,
                                             LOSS_AMOUNT,
                                             MSO_MODULE,
                                             CLAIM_NUMBER,
                                             FILLER_2,
                                             ALAE,
                                             FILLER_3)
              VALUES (v_company,                                     --company
                      v_trans_code,                                --transcode
                      v_orig_trans_code,
                      '2',                                        -- stat plan
                      TO_CHAR (im_stat.ACTG_DATE, 'MMDDYY'), -- end of quarter date
                      TO_CHAR (im_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE ,
                      TO_CHAR (im_stat.LOSS_DATE, 'MMDDYY'), -- ACCIDENT_DATE ,
                      TO_CHAR (im_stat.REPORTED_DATE, 'MMDDYY'), -- REPORT_DATE ,
                      '29',                                           -- state
                      '090',                                            -- ASL
                      '920',                                       -- SUBLINE,
                      --  to_char(im_stat.cat_number),            -- CAT CODE
                      NVL (im_stat.cat_number, ' '),              ---dmb 04/29
                      LPAD(Trim(v_ho_terr),2,'0'),
                      -- TERR_CODE these are incorrect. ND is correcting
                      '10',                                  -- TYPE_OF_POLICY
                      TRIM (v_class_code),                       -- CLASS_CODE
                      ' ',                                         -- FILLER_1
                      v_loss_type,                            -- CAUSE_OF_LOSS
                      TO_CHAR (v_claim_count), -- CLAIM COUNT  calculate b2clm
                      v_loss_amount, -- Round this to whole dollar  LOSS_AMOUNT,
                      v_id_cd, --- this is a 5 for IM under company 0056 home and looks like a '3' for farm MSO_MODULE,
                      -- 4/20  (rpad(im_stat.CLAIM_NUMBER,10,' ') || trim(im_stat.cov_code) ),-- trim( ho_stat.CLAIM_NUMBER),      -- POLICY_NUMBER,
                      (RPAD (TRIM (im_stat.CLAIM_number), 10, ' ') || TRIM (TO_CHAR (im_stat.cov_code))), -- trim( ho_stat.CLAIM_NUMBER),      -- POLICY_NUMBER,
                      (RPAD(' ', 50, ' ') || rpad(im_stat.cov_code,3,' ') || rpad(to_char(im_stat.user_line),2,' ') || lpad(to_char(im_stat.item_num),3,'0') || im_stat.policy_number),                                         -- FILLER_2
                      v_alae_amount,                                  --- ALAE
                      ' ');                                        -- FILLER_3

         COMMIT;

        <<skip_im_claim>>
         NULL;
      END LOOP;

      CLOSE all_im_stat;
   -- commit; --test


   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || im_stat.claim_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE get_loss_type_fo (v_in_cov_code     IN     VARCHAR2,
                            v_in_loss_type    IN     VARCHAR2,
                            v_out_loss_type      OUT VARCHAR2)
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.get_loss_type';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      v_err_loc := 'get_loss_type';
      v_out_loss_type := v_in_loss_type;

   Case v_in_loss_type
      WHEN '01'  THEN  v_out_loss_type := '29';      --- Exposure
      WHEN '02'  THEN  v_out_loss_type := '29';      --- Electrical
      WHEN '03'  THEN  v_out_loss_type := '01';      --- Kitchen/grease
      WHEN '04'  THEN  v_out_loss_type := '01';      --- Arson/Suspicious
      WHEN '05'  THEN  v_out_loss_type := '01';      --- Careless disposal of smoking material
      WHEN '06'  THEN  v_out_loss_type := '01';      --- Lightning
      WHEN '07'  THEN  v_out_loss_type := '01';      --- Heater/furnace/boiler
      WHEN '08'  THEN  v_out_loss_type := '01';      --- Woodstove/chimney
      WHEN '09'  THEN  v_out_loss_type := '01';      --- Accidental
      WHEN '10'  THEN  v_out_loss_type := '01';      --- Undetermined
      WHEN '19'  THEN  v_out_loss_type := '01';      --- Other fire
      WHEN '20'  THEN  v_out_loss_type := '04';      --- Burglary
      WHEN '21'  THEN  v_out_loss_type := '04';      --- Mysterious disappearance
      WHEN '22'  THEN  v_out_loss_type := '04';      --- Robbery on premises
      WHEN '23'  THEN  v_out_loss_type := '04';      --- Robbery off premises
      WHEN '29'  THEN  v_out_loss_type := '04';      --- Other theft
      WHEN '30'  THEN  v_out_loss_type := '03';      --- Frozen pipe
      WHEN '31'  THEN  v_out_loss_type := '03';      --- Plumbing related
      WHEN '32'  THEN  v_out_loss_type := '03';      --- Entering rain
      WHEN '33'  THEN  v_out_loss_type := '03';      --- Appliance Related
      WHEN '34'  THEN  v_out_loss_type := '03';      --- Condensation/Humidity
      WHEN '35'  THEN  v_out_loss_type := '03';      --- Drain Backup/Overflow
      WHEN '36'  THEN  v_out_loss_type := '03';      --- Flood/Ground/Surface
      WHEN '37'  THEN  v_out_loss_type := '03';      --- Ice Daming
      WHEN '38'  THEN  v_out_loss_type := '03';      --- Sump Backup/Overflow
      WHEN '39'  THEN  v_out_loss_type := '03';      --- Other water
      WHEN '40'  THEN  v_out_loss_type := '02';      --- Wind
      WHEN '41'  THEN  v_out_loss_type := '02';      --- Wind and Trees
      WHEN '50'  THEN  v_out_loss_type := '29';      --- Oil spill
      WHEN '51'  THEN  v_out_loss_type := '29';      --- Puff back
      WHEN '52'  THEN  v_out_loss_type := '15';      --- Vandalism
      WHEN '53'  THEN  v_out_loss_type := '02';      --- Hail
      WHEN '54'  THEN  v_out_loss_type := '29';      --- Scheduled items
      WHEN '55'  THEN  v_out_loss_type := '13';      --- Explosion
      WHEN '56'  THEN  v_out_loss_type := '27';      --- Collapse
      WHEN '59'  THEN  v_out_loss_type := '29';      --- Other property
      WHEN '70'  THEN  v_out_loss_type := '28';      --- Dog bite
      WHEN '71'  THEN  v_out_loss_type := '32';      --- Fall doun inside
      WHEN '72'  THEN  v_out_loss_type := '32';      --- Fall down outside
      WHEN '73'  THEN  v_out_loss_type := '32';      --- Fall down ice/Snow related
      WHEN '74'  THEN  v_out_loss_type := '37';      --- Lead paint
      WHEN '75'  THEN  v_out_loss_type := '32';      --- Child molestation/Severe abuse
      WHEN '76'  THEN  v_out_loss_type := '33';      --- Tree related
      WHEN '77'  THEN  v_out_loss_type := '32';      --- Swimming pool
      WHEN '78'  THEN  v_out_loss_type := '32';      --- Porch railing
      WHEN '79'  THEN  v_out_loss_type := '32';      --- Rape
      WHEN '80'  THEN  v_out_loss_type := '36';      --- Oil spill
      WHEN '81'  THEN  v_out_loss_type := '36';      --- Asbestosis
      WHEN '82'  THEN  v_out_loss_type := '32';      --- Assault 
      WHEN '83'  THEN  v_out_loss_type := '49';      --- Fire legal liability
      WHEN '84'  THEN  v_out_loss_type := '32';      --- Liquor liability
      WHEN '85'  THEN  v_out_loss_type := '32';      --- Gunshot
      WHEN '86'  THEN  v_out_loss_type := '39';      --- Products liability
      WHEN '87'  THEN  v_out_loss_type := '32';      --- Burns
      WHEN '88'  THEN  v_out_loss_type := '49';      --- Fire
      WHEN '89'  THEN  v_out_loss_type := '32';      --- Water
      WHEN '90'  THEN  v_out_loss_type := '32';      --- Ceiling
      WHEN '91'  THEN  v_out_loss_type := '43';      --- Auto
      WHEN '92'  THEN  v_out_loss_type := '55';      --- EPLI
      WHEN '93'  THEN  v_out_loss_type := '47';      --- Director's and Officers
      WHEN '94'  THEN  v_out_loss_type := '35';      --- Slander and Liable
      WHEN '95'  THEN  v_out_loss_type := '38';      --- Other Animals
      WHEN '96'  THEN  v_out_loss_type := '32';      --- Trampoline
      WHEN '97'  THEN  v_out_loss_type := '58';      --- Internet Security
      WHEN '99'  THEN  v_out_loss_type := '32';      --- Other liability
      Else
         v_out_loss_type := 'XX';
    End Case;

   End;




   PROCEDURE get_loss_type (v_in_cov_code     IN     VARCHAR2,
                            v_in_loss_type    IN     VARCHAR2,
                            v_out_loss_type      OUT VARCHAR2)
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.get_loss_type';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      v_err_loc := 'get_loss_type';
      v_out_loss_type := v_in_loss_type;

      IF    v_in_cov_code = '800'
         OR v_in_cov_code = '801'
         OR v_in_cov_code = '803'
      THEN
         --good_2007_cause_bldg
         IF    v_in_loss_type = '03'
            OR v_in_loss_type = '04'
            OR v_in_loss_type = '05'
            OR v_in_loss_type = '06'
            OR v_in_loss_type = '07'
            OR v_in_loss_type = '08'
            OR v_in_loss_type = '10'
            OR v_in_loss_type = '11'
            OR v_in_loss_type = '12'
            OR v_in_loss_type = '13'
            OR v_in_loss_type = '14'
            OR v_in_loss_type = '15'
            OR v_in_loss_type = '16'
            OR v_in_loss_type = '17'
            OR v_in_loss_type = '18'
            OR v_in_loss_type = '19'
            OR v_in_loss_type = '20'
            OR v_in_loss_type = '21'
            OR v_in_loss_type = '22'
            OR v_in_loss_type = '25'
            OR v_in_loss_type = '27'
            OR v_in_loss_type = '29'
            OR v_in_loss_type = '38'
            OR v_in_loss_type = '39'
            OR v_in_loss_type = '54'
            OR v_in_loss_type = '55'
            OR v_in_loss_type = '56'
            OR v_in_loss_type = '57'
            OR v_in_loss_type = '58'
            OR v_in_loss_type = '59'
            OR v_in_loss_type = '64'
            OR v_in_loss_type = '65'
            OR v_in_loss_type = '66'
            OR v_in_loss_type = '67'
            OR v_in_loss_type = '68'
            OR v_in_loss_type = '69'
         THEN
            v_out_loss_type := v_in_loss_type;
         ELSE
            v_out_loss_type := '11';
         END IF;
      END IF;

      IF v_in_cov_code = '802'
      THEN
         --good_2007_cause_bld-p10
         IF v_in_loss_type = '38'
         THEN
            v_out_loss_type := '48';                                 -- add 10
         ELSE
            --good_2007_cause_bld-p20
            IF    v_in_loss_type = '03'
               OR v_in_loss_type = '08'
               OR v_in_loss_type = '10'
               OR v_in_loss_type = '11'
               OR v_in_loss_type = '12'
               OR v_in_loss_type = '14'
               OR v_in_loss_type = '16'
               OR v_in_loss_type = '17'
               OR v_in_loss_type = '21'
               OR v_in_loss_type = '22'
               OR v_in_loss_type = '29'
            THEN
               v_out_loss_type := TO_CHAR (TO_NUMBER (v_in_loss_type) + 20);
            ELSE
               --good_2007_cause_bld-p40
               IF    v_in_loss_type = '04'
                  OR v_in_loss_type = '05'
                  OR v_in_loss_type = '06'
                  OR v_in_loss_type = '07'
               THEN
                  v_out_loss_type := TO_CHAR (TO_NUMBER (v_in_loss_type) + 40);
               ELSE
                  --good_2007_cause_cont
                  IF    v_in_loss_type = '09'
                     OR v_in_loss_type = '23'
                     OR v_in_loss_type = '28'
                     OR v_in_loss_type = '30'
                     OR v_in_loss_type = '31'
                     OR v_in_loss_type = '32'
                     OR v_in_loss_type = '33'
                     OR v_in_loss_type = '34'
                     OR v_in_loss_type = '35'
                     OR v_in_loss_type = '36'
                     OR v_in_loss_type = '37'
                     OR v_in_loss_type = '39'
                     OR v_in_loss_type = '40'
                     OR v_in_loss_type = '41'
                     OR v_in_loss_type = '42'
                     OR v_in_loss_type = '43'
                     OR v_in_loss_type = '44'
                     OR v_in_loss_type = '45'
                     OR v_in_loss_type = '46'
                     OR v_in_loss_type = '47'
                     OR v_in_loss_type = '48'
                     OR v_in_loss_type = '49'
                     OR v_in_loss_type = '54'
                     OR v_in_loss_type = '55'
                     OR v_in_loss_type = '56'
                     OR v_in_loss_type = '57'
                     OR v_in_loss_type = '58'
                     OR v_in_loss_type = '59'
                     OR v_in_loss_type = '64'
                     OR v_in_loss_type = '65'
                     OR v_in_loss_type = '66'
                     OR v_in_loss_type = '67'
                     OR v_in_loss_type = '68'
                     OR v_in_loss_type = '69'
                     OR v_in_loss_type = '93'
                     OR v_in_loss_type = '94'
                  THEN
                     v_out_loss_type := v_in_loss_type;       ---straight move
                  ELSE
                     v_out_loss_type := '31';
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;


      IF v_in_cov_code = '804' OR v_in_cov_code = '805'
      THEN
         --05'11       v_in_cov_code = '740' then
         --good_2007-cause-liab
         IF    v_in_loss_type = '51'
            OR v_in_loss_type = '52'
            OR v_in_loss_type = '53'
            OR v_in_loss_type = '5A'
            OR v_in_loss_type = '5B'
            OR v_in_loss_type = '5C'
            OR v_in_loss_type = '5D'
            OR v_in_loss_type = '5X'
            OR v_in_loss_type = '61'
            OR v_in_loss_type = '62'
            OR v_in_loss_type = '6A'
            OR v_in_loss_type = '6B'
            OR v_in_loss_type = '6C'
            OR v_in_loss_type = '6D'
            OR v_in_loss_type = '6X'
            OR v_in_loss_type = '71'
            OR v_in_loss_type = '72'
            OR v_in_loss_type = '79'
            OR v_in_loss_type = '7A'
            OR v_in_loss_type = '7B'
            OR v_in_loss_type = '7C'
            OR v_in_loss_type = '7D'
            OR v_in_loss_type = '7X'
            OR v_in_loss_type = '80'
            OR v_in_loss_type = '81'
            OR v_in_loss_type = '82'
            OR v_in_loss_type = '83'
            OR v_in_loss_type = '90'
            OR v_in_loss_type = '91'
            OR v_in_loss_type = '98'
            OR v_in_loss_type = '99'
         THEN
            v_out_loss_type := v_in_loss_type;
         ELSE
            IF v_in_cov_code = '805'
            THEN
               v_out_loss_type := '98';
            ELSE
               v_out_loss_type := '79';
            END IF;
         END IF;
      END IF;


      --05-11 dmb valid im codes begin per Helen Petterson
      IF v_in_cov_code = '740'
      THEN
         IF    v_in_loss_type = '11'
            OR v_in_loss_type = '12'
            OR v_in_loss_type = '13'
            OR v_in_loss_type = '14'
            OR v_in_loss_type = '15'
            OR v_in_loss_type = '16'
            OR v_in_loss_type = '17'
            OR v_in_loss_type = '18'
            OR v_in_loss_type = '19'
            OR v_in_loss_type = '21'
            OR v_in_loss_type = '22'
            OR v_in_loss_type = '23'
            OR v_in_loss_type = '24'
            OR v_in_loss_type = '25'
            OR v_in_loss_type = '26'
            OR v_in_loss_type = '27'
            OR v_in_loss_type = '28'
            OR v_in_loss_type = '29'
            OR v_in_loss_type = '1A'
            OR v_in_loss_type = '2A'
            OR v_in_loss_type = '1B'
            OR v_in_loss_type = '2B'
         THEN
            v_out_loss_type := v_in_loss_type;
         ELSE
            v_out_loss_type := '29';
         END IF;
      END IF;

      ---05-11 end

      -- convert to mso codes
      --test   case v_out_loss_type
      IF v_in_cov_code = '740'
      THEN                                                       --05/11 begin
         CASE v_in_loss_type
            WHEN '11'
            THEN
               v_out_loss_type := '01';
            WHEN '12'
            THEN
               v_out_loss_type := '15';
            WHEN '13'
            THEN
               v_out_loss_type := '23';
            WHEN '14'
            THEN
               v_out_loss_type := '24';
            WHEN '15'
            THEN
               v_out_loss_type := '04';
            WHEN '16'
            THEN
               v_out_loss_type := '29';
            WHEN '17'
            THEN
               v_out_loss_type := '27';
            WHEN '18'
            THEN
               v_out_loss_type := '03';
            WHEN '19'
            THEN
               v_out_loss_type := '29';
            WHEN '21'
            THEN
               v_out_loss_type := '01';
            WHEN '22'
            THEN
               v_out_loss_type := '15';
            WHEN '23'
            THEN
               v_out_loss_type := '23';
            WHEN '24'
            THEN
               v_out_loss_type := '24';
            WHEN '25'
            THEN
               v_out_loss_type := '04';
            WHEN '26'
            THEN
               v_out_loss_type := '29';
            WHEN '27'
            THEN
               v_out_loss_type := '27';
            WHEN '28'
            THEN
               v_out_loss_type := '03';
            WHEN '29'
            THEN
               v_out_loss_type := '29';
            WHEN '1A'
            THEN
               v_out_loss_type := '02';
            WHEN '1B'
            THEN
               v_out_loss_type := '33';
            WHEN '2A'
            THEN
               v_out_loss_type := '02';
            WHEN '2B'
            THEN
               v_out_loss_type := '33';
            ELSE
               v_out_loss_type := '29';
         END CASE;
      ELSE                                                        --/05-11 end
         CASE v_in_loss_type
            WHEN '03'
            THEN
               v_out_loss_type := '03';         -- WATER DAMAGE DUE TO APPLI".
            WHEN '04'
            THEN
               v_out_loss_type := '02';          --WINDSTORM DUE TO HURRICAN".
            WHEN '05'
            THEN
               v_out_loss_type := '02';         -- WINDSTORM DUE TO TORNADO ".
            WHEN '06'
            THEN
               v_out_loss_type := '02';          --WINDSTORM OTHER THAN HURR".
            WHEN '07'
            THEN
               v_out_loss_type := '03';                             -- ICE DAM
            WHEN '08'
            THEN
               v_out_loss_type := '03';          --WATER DAMAGE DUE PLUMBING".
            WHEN '09'
            THEN
               v_out_loss_type := '27';         -- ALL OTHER CAUSE OF COLLAP".
            WHEN '10'
            THEN
               v_out_loss_type := '03';         -- ALL OTHER WATER DAMAGE LO".
            WHEN '11'
            THEN
               v_out_loss_type := '01';        --- Fire (Including fire caus".
            WHEN '12'
            THEN
               v_out_loss_type := '01';         -- Lightning (not resulting ".
            --      when '13' then v_out_loss_type := '06';-- Windstorm                ".
            WHEN '13'
            THEN
               v_out_loss_type := '02';         -- Windstorm                ".
            WHEN '14'
            THEN
               v_out_loss_type := '02';         -- Hail                     ".
            --     when '15' then v_out_loss_type := '10';-- Water Damage (accidental ".
            WHEN '15'
            THEN
               v_out_loss_type := '03';         -- Water Damage (accidental ".
            WHEN '16'
            THEN
               v_out_loss_type := '03';         -- Freezing                 ".
            WHEN '17'
            THEN
               v_out_loss_type := '04';         -- Theft                    ".
            WHEN '18'
            THEN
               v_out_loss_type := 'XX';          --Mass. Tenant Relocation E".
            WHEN '19'
            THEN
               v_out_loss_type := '07';          --Credit Card Forgery and C".
            WHEN '20'
            THEN
               v_out_loss_type := '51';          --LOSS OF BUSINESS INCOME/E".
            WHEN '21'
            THEN
               v_out_loss_type := '29';          --ESCAPED FUEL FROM ON-PREM".
            WHEN '22'
            THEN
               v_out_loss_type := '29';          --ALL OTHER PHYSICAL DAMAGE".
            WHEN '23'
            THEN
               v_out_loss_type := '03';          --WATER DAMAGE APPLIANCE FA".
            WHEN '25'
            THEN
               v_out_loss_type := '52';          --EXPENSES RELATED TO IDENT".
            WHEN '27'
            THEN
               v_out_loss_type := '27';          --ALL OTHER CAUSE OF COLLAP".
            WHEN '28'
            THEN
               v_out_loss_type := '03';          --WATER DAMAGE PLUMBING SYS".
            WHEN '29'
            THEN
               v_out_loss_type := '29';          --All Other Section I Losse".
            WHEN '30'
            THEN
               v_out_loss_type := '03';          --ALL OTHER WATER DAMAGE LO".
            WHEN '31'
            THEN
               v_out_loss_type := '01';          --Contents - Fire          ".
            WHEN '32'
            THEN
               v_out_loss_type := '01';          --Contents - Lightning     ".
            --    when '33' then v_out_loss_type := '46' ;--Contents - Windstorm     ".
            WHEN '33'
            THEN
               v_out_loss_type := '02';          --Contents - Windstorm     ".
            WHEN '34'
            THEN
               v_out_loss_type := '02';          --Contents - Hail          ".
            --     when '35' then v_out_loss_type := '30'; --Contents - Water Damage  ".
            WHEN '35'
            THEN
               v_out_loss_type := '03';          --Contents - Water Damage  ".
            WHEN '35'
            THEN
               v_out_loss_type := '03';                                     --
            WHEN '36'
            THEN
               v_out_loss_type := '03';          --Contents - Freezing      ".
            WHEN '37'
            THEN
               v_out_loss_type := '04';          --Contents - Theft         ".
            WHEN '38'
            THEN
               v_out_loss_type := '27';          --COLLAPSE DUE TO SINKHOLE ".
            WHEN '39'
            THEN
               v_out_loss_type := '45';          --Mold - All other causes  ".
            WHEN '40'
            THEN
               v_out_loss_type := '29';          --ACCOUNTS RECEIVABLE      ".
            WHEN '41'
            THEN
               v_out_loss_type := '29';          --ESCAPED FUEL FROM ON-PREM".
            WHEN '42'
            THEN
               v_out_loss_type := '29';          --ALL OTHER POLLUTION CAUSE".
            WHEN '43'
            THEN
               v_out_loss_type := '29';          --VALUABLE PAPERS          ".
            WHEN '44'
            THEN
               v_out_loss_type := '02';          --WINDSTORM DUE TO HURRICAN".
            WHEN '45'
            THEN
               v_out_loss_type := '02';          --WINDSTORM DUE TO TORNADO ".
            WHEN '46'
            THEN
               v_out_loss_type := '02';          --WINDSTORM OTHER THAN HURR".
            WHEN '47'
            THEN
               v_out_loss_type := '03';          --ICE DAM                  ".
            WHEN '48'
            THEN
               v_out_loss_type := '27';          --COLLAPSE DUE TO SINKHOLE ".
            WHEN '49'
            THEN
               v_out_loss_type := '29';          --Contents - All Other Sect".
            --     when '50' then v_out_loss_type := '5X' ;--Bodily Injury Liability -".
            WHEN '50'
            THEN
               v_out_loss_type := '32';          --Bodily Injury Liability -".
            WHEN '51'
            THEN
               v_out_loss_type := '36';          --Bodily Injury Liability -".
            WHEN '52'
            THEN
               v_out_loss_type := '37';          --Bodily Injury Liability -".
            WHEN '53'
            THEN
               v_out_loss_type := '45';          --Bodily Injury Liability -".
            WHEN '54'
            THEN
               v_out_loss_type := '01';          --Fire (Including fire caus".
            WHEN '55'
            THEN
               v_out_loss_type := '01';          --Lightning (not resulting ".
            WHEN '56'
            THEN
               v_out_loss_type := '02';          --Windstorm                ".
            WHEN '57'
            THEN
               v_out_loss_type := '02';          --Hail                     ".
            WHEN '58'
            THEN
               v_out_loss_type := '03';          --Water Damage (accidental ".
            WHEN '59'
            THEN
               v_out_loss_type := '03';          --Freezing                 ".
            WHEN '5A'
            THEN
               v_out_loss_type := '31';          --SLIP AND FALL            ".
            WHEN '5B'
            THEN
               v_out_loss_type := '38';          --DOG BITE                 ".
            WHEN '5C'
            THEN
               v_out_loss_type := '31';          --SWIMMING POOL OR HOT TUB ".
            WHEN '5D'
            THEN
               v_out_loss_type := '31';          --TRAMPOLINE ACCIDENTS     ".
            WHEN '5X'
            THEN
               v_out_loss_type := '31';          --ALL OTHER NON-POLLUTION C".
            --     when '60' then v_out_loss_type := '6X'; --Bodily Injury Liability -".
            WHEN '60'
            THEN
               v_out_loss_type := '32';          --Bodily Injury Liability -".
            WHEN '61'
            THEN
               v_out_loss_type := '36';          --Bodily Injury Liability -".
            WHEN '62'
            THEN
               v_out_loss_type := '37';          --Bodily Injury Liability -".
            WHEN '64'
            THEN
               v_out_loss_type := '01';          --Fire - Remediation Expens".
            WHEN '65'
            THEN
               v_out_loss_type := '01';          --Lightning - Remediation E".
            WHEN '66'
            THEN
               v_out_loss_type := '02';          --Windstorm - Remediation E".
            WHEN '67'
            THEN
               v_out_loss_type := '02';          --Hail - Remediation Expens".
            WHEN '68'
            THEN
               v_out_loss_type := '03';          --Water Damage - Remediatio".
            WHEN '69'
            THEN
               v_out_loss_type := '03';          --Freezing - Remediation Ex".
            WHEN '6A'
            THEN
               v_out_loss_type := '32';          --SLIP AND FALL            ".
            WHEN '6B'
            THEN
               v_out_loss_type := '38';          --DOG BITE                 ".
            WHEN '6C'
            THEN
               v_out_loss_type := '32';          --SWIMMING POOL OR HOT TUB ".
            WHEN '6D'
            THEN
               v_out_loss_type := '32';          --TRAMPOLINE ACCIDENTS     ".
            WHEN '6X'
            THEN
               v_out_loss_type := '32';          --ALL OTHER NON-POLLUTION C".
            --      when '70' then v_out_loss_type := '7X'; --Bodily Injury Liability -".
            WHEN '70'
            THEN
               v_out_loss_type := '32';          --Bodily Injury Liability -".
            WHEN '71'
            THEN
               v_out_loss_type := '36';          --Bodily Injury Liability -".
            WHEN '72'
            THEN
               v_out_loss_type := '37';          --Bodily Injury Liability -".
            WHEN '79'
            THEN
               v_out_loss_type := '36';          --Bodily Injury Liability -".
            WHEN '7A'
            THEN
               v_out_loss_type := '32';          --SLIP AND FALL            ".
            WHEN '7B'
            THEN
               v_out_loss_type := '38';          --DOG BITE                 ".
            WHEN '7C'
            THEN
               v_out_loss_type := '32';          --SWIMMING POOL OR HOT TUB ".
            WHEN '7D'
            THEN
               v_out_loss_type := '32';          --TRAMPOLINE ACCIDENTS     ".
            WHEN '7X'
            THEN
               v_out_loss_type := '32';          --ALL OTHER POLLUTION CAUSE".
            WHEN '80'
            THEN
               v_out_loss_type := '33';          --Property Damage Liability".
            WHEN '81'
            THEN
               v_out_loss_type := '36';          --Property Damage Liability".
            WHEN '82'
            THEN
               v_out_loss_type := '37';          --Property Damage Liability".
            WHEN '83'
            THEN
               v_out_loss_type := '45';          --Property Damage Liabilty ".
            WHEN '89'
            THEN
               v_out_loss_type := '36';          --Property Damage Liability".
            WHEN '90'
            THEN
               v_out_loss_type := '35';          --ADVERTISING INJURY AND PE".
            WHEN '91'
            THEN
               v_out_loss_type := '39';          --PRODUCTS/COMPLETED OPERAT".
            WHEN '93'
            THEN
               v_out_loss_type := '29';          --MOTORIZED GOLF CART OTHER".
            WHEN '94'
            THEN
               v_out_loss_type := '29';          --MOTORIZED GOLF CART COLLI".
            WHEN '98'
            THEN
               v_out_loss_type := '31';          --MEDICAL PAYMENTS         ".
            WHEN '99'
            THEN
               v_out_loss_type := '33';          --All Other Section II Loss".
            WHEN 'XX'
            THEN
               v_out_loss_type := '29';          --INVALID                  ".
            ELSE
               v_out_loss_type := '03';
         END CASE;
      END IF;

      IF v_in_cov_code = '920' then
        v_out_loss_type := '29';       --- Convert  All 920 Cov Codes lossType 29 - 'All other Physical Damage'  
      End If;

      IF TRIM (v_out_loss_type) = ''
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
            'Loss type is blank ' || v_in_loss_type || ' ' || v_in_cov_code;
         DBMS_OUTPUT.put_line (
            'Loss type is blank ' || v_in_loss_type || ' ' || v_in_cov_code);
      END IF;
   END;

   ---***********************************

   PROCEDURE collect_claim_pu_outstanding
   IS
      v_procname            RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                               := 'ND_BUREAU.COLLECT_CLAIM_PU_OUTSTANDING';
      v_err_mssg            VARCHAR2 (200);
      v_err_loc             VARCHAR2 (100);

      CURSOR all_pu_stat
      IS
           SELECT distinct
                           s.Claim_Number,
                           s.Policy_Number,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as CURRENT_RESERVE,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, '01012015', s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as Starting_reserve,
                           s.company,
                           s.group_line,
                           s.user_line,
                           s.state_cd,
                           s.eff_date,
                           s.exp_date,
                           s.actg_date,
                           s.change_date,
                           s.book_date,
                           s.trans_code,
                           s.cov_code,
                           s.terr,
                           s.loc_zip,
                           s.loc_zip2,
                           ---s.type_loss,
                           Get_PU_MSO_Type_Loss (s.claim_number, s.class_code, s.Cov_Code, v_end_date) as type_loss,
                           s.loss_date,
                           s.cat_number,
                           s.reported_date,
                           s.item_num

             FROM RPT_CLAIMS_GL_STAT s
            WHERE     s.company = '04'
                  AND s.state_cd = 'NJ'
                  AND s.GROUP_LINE IN ('24')
                  AND s.user_line in ('44')
                  AND s.book_date <= v_end_date
                  AND s.COV_CODE < '990'
                  AND s.sdac_ind = '1'
                  AND RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                       <> 0
                  AND s.actg_date = 
                         (SELECT MAX (s1.actg_date)
                            FROM rpt_claims_gl_stat s1
                           WHERE     s.claim_number = s1.claim_number
                                 AND s.group_line = s1.group_line
                                 AND s.user_line = s1.user_line
                                 AND s.cov_code = s1.cov_code
                                 AND s.company = s1.company
                                 AND s.state_cd = s1.state_cd
                                 AND s.policy_number = s1.policy_number
                                 AND s.eff_date = s1.eff_date
                                 AND s.exp_date = s1.exp_date
                                 AND s.item_state_cd = s1.item_state_cd
                                 AND s.location = s1.location
                                 AND s.user_line = s1.user_line
                                 AND s.item_num = s1.item_num
                                 AND s.cov_code = s1.cov_code
                                 AND s.end_num = s1.end_num
                                 AND s.sdac_ind = s1.sdac_ind
                                 AND s1.book_date <= v_end_date);
                                 
      pu_stat               all_pu_stat%ROWTYPE;
      v_pct_of_manual_flg   VARCHAR (1);
      v_trans_code          VARCHAR (1);
      v_orig_trans_code     VARCHAR (2);
      v_pct_of_manual       VARCHAR (3);
      v_item_terr           VARCHAR (4);
      v_item_families       VARCHAR (1);
      v_item_row_town       VARCHAR (1);
      v_item_dwell_code     VARCHAR (1);
      v_class_code          VARCHAR (2);
      v_liab_limit          VARCHAR (1);
      v_med_limit           VARCHAR (1);
      V_MPL47_MPL49         VARCHAR (1);
      v_company             VARCHAR (4);
      v_id_cd               VARCHAR (2);
      v_claim_number_new    VARCHAR (13);
      v_claim_count         NUMBER;
      v_loss_type           VARCHAR (2);
      v_alae_amount         NUMBER := 0;
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_claim_pu_outstanding';

      OPEN all_pu_stat;

      LOOP
         FETCH all_pu_stat INTO pu_stat;

         EXIT WHEN all_pu_stat%NOTFOUND;

         IF     pu_stat.state_cd = 'NJ'
            AND pu_stat.eff_date > TO_DATE ('03/31/2008', 'mm/dd/yyyy')
            AND (   SUBSTR (pu_stat.Policy_number, 1, 1) = 'H'
                 OR SUBSTR (pu_stat.policy_number, 1, 1) = 'D'
                 OR SUBSTR (pu_stat.policy_number, 1, 1) = 'F')
            AND (pu_stat.group_line = '24')
         THEN
            NULL;
         ELSE
            IF     pu_stat.state_cd = 'NJ'
               AND pu_stat.eff_date > TO_DATE ('03/31/2011', 'mm/dd/yyyy')
               AND SUBSTR (pu_stat.Policy_number, 1, 2) = 'IM'
               AND pu_stat.group_line = '68'
            THEN                          --- this might be user line not sure
               NULL;
            ELSE
               GOTO skip_pu_claim;
            END IF;
         END IF;

         IF pu_stat.current_reserve > 0
         THEN
            v_TRANS_CODE := '8';
            v_orig_trans_code := '8';
         ELSE
            v_TRANS_CODE := '9';
            v_orig_trans_code := '9';
         END IF;

         --read  stat from the home item for the missing stat records
         IF pu_stat.terr > 0
         THEN
            v_item_terr := TO_CHAR (pu_stat.terr);
         END IF;

         --test 2

         v_claim_number_new :=
               RPAD (TRIM (pu_stat.CLAIM_number), 10, ' ')
            || TRIM (TO_CHAR (pu_stat.cov_code));
         v_class_code := '99';

         get_limits_master_for_loss (TRIM (pu_stat.eff_date),
                                     TRIM (pu_stat.exp_date),
                                     TRIM (pu_stat.actg_date),
                                     TRIM (pu_stat.loss_date),
                                     TRIM (pu_stat.user_line),
                                     TRIM (pu_stat.policy_number),
                                     '401',
                                     v_liab_limit);

         EXIT WHEN v_err_fl != 0;

         get_limits_master_for_loss (TRIM (pu_stat.eff_date),
                                     TRIM (pu_stat.exp_date),
                                     TRIM (pu_stat.actg_date),
                                     TRIM (pu_stat.loss_date),        ---test3
                                     '24',
                                     TRIM (pu_stat.policy_number),
                                     '805',
                                     v_med_limit);

         EXIT WHEN v_err_fl != 0;
         --test 2
         get_item_master_for_loss (TRIM (pu_stat.eff_date),
                                   TRIM (pu_stat.exp_date),
                                   TRIM (pu_stat.actg_date),
                                   TRIM (pu_stat.loss_date),           ---test
                                   '24',
                                   TRIM (pu_stat.policy_number),
                                   1,                           ----tem_number
                                   v_item_families,
                                   v_item_dwell_code,
                                   v_class_code);

         EXIT WHEN v_err_fl != 0;

         CASE v_item_dwell_code
            WHEN 'P'
            THEN
               v_item_dwell_code := '1';
            WHEN 'S'
            THEN
               v_item_dwell_code := '5';
            WHEN 'R'
            THEN
               v_item_dwell_code := '5';
            WHEN '2'
            THEN
               v_item_dwell_code := '7';
            WHEN '3'
            THEN
               v_item_dwell_code := '7';
            ELSE
               v_item_dwell_code := '1';
         END CASE;


         get_loss_type (pu_stat.cov_code, pu_stat.type_loss, v_loss_type);

         --this is an open
         IF pu_stat.current_reserve = pu_stat.starting_reserve
         THEN
            v_claim_count := 1;
         ELSE
            v_claim_count := 0;
         END IF;

         IF pu_stat.company = '04'
         THEN
            v_company := '0056';
            v_id_cd := '06';
         ELSE
            v_company := '0060';
            v_id_cd := '06';                                      ---???? test
         END IF;


         INSERT INTO RPT_CLAIMS_MSO_GL_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             ACCIDENT_DATE,
                                             REPORT_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             CAT_CODE,
                                             FILLER_1,
                                             POLICY_FORM,
                                             LIMIT_LIAB_COV,
                                             LIMIT_MED_COV,
                                             FILLER_2,
                                             NUMBER_FAMILIES,
                                             FILLER_3,
                                             COV_CODE,
                                             TERRITORY_CODE,
                                             FILLER_4,
                                             PCT_OF_MANUAL,
                                             cause_of_loss,
                                             claim_count,
                                             LOSS_AMOUNT,
                                             MSO_MODULE,
                                             CLAIM_NUMBER,
                                             FILLER_6,
                                             LOSS_COST_MULT,
                                             INSURANCE_SCORE,
                                             FILLER_7,
                                             ALAE,
                                             FILLER_8,
                                             class_code,
                                             FILLER_9)
              VALUES (v_company,                      --company          01-04
                      v_trans_code,                   --transcode        05-05
                      v_orig_trans_code,
                      '2',                            -- stat plan       06-06
                      TO_CHAR (pu_stat.actg_date, 'MMDDYY'),         -----test
                      TO_CHAR (pu_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE 11-14
                      TO_CHAR (pu_stat.LOSS_DATE, 'MMDDYY'), --accident_DATE, 15-18
                      TO_CHAR (pu_stat.REPORTED_DATE, 'MMDDYY'), --reprt _DATE  19-22
                      '29',                           -- state           23-24
                      '170',                          -- ASL             25-27
                      '171',                          -- SUBLINE,        28-30
                      --    to_char(pu_stat.cat_number),      -- cat code        31-33
                      NVL (pu_stat.cat_number, ' '),              ---dmb 04/29
                      '   ',                           -- filler1        34-36
                      '2',                              -- POLICY_FORM      37
                      v_liab_limit,                    -- policy limit liab 38
                      v_med_limit,                     -- policy med limit  39
                      ' ',                            -- filler 2        40-41
                      v_item_families,                   -- number families 42
                      ' ',                             -- filler 3       43-45
                      v_item_dwell_code,                  --coverage code   46
                      v_item_terr,                     -- territory code 47-48
                      ' ',                              -- filler 4      49-51
                      '   ',                           -- percent of man 52-54
                      v_loss_type,                       -- cause oflocc 55-56
                      TO_CHAR (v_claim_count),              ---claim count  57
                      pu_stat.current_reserve,       --loss_AMOUNT  58-65 test
                      v_id_cd,                        -- MSO_MODULE,     66-67
                      v_claim_number_new,                 --claim_number 68-80
                      ' ',                        -- filler 6       81-99 (19)
                      '   ',                        -- LOSS_COST_MULT  100-102
                      '   ',                        -- INSURANCE SCORE 103-105
                      (RPAD(' ', 25, ' ') || rpad(pu_stat.cov_code,3,' ') || rpad(to_char(pu_stat.user_line),2,' ') || lpad(to_char(pu_stat.item_num),3,'0') || pu_stat.policy_number),                     -- FILLER_7        106-154 (49)
                      v_alae_amount,             -- alae           155-162 (8)
                      ' ',                      ---filler 8       163-176 (14)
                      '99', --v_class_code,                     --CLASS CODE   177-178
                      ' ');                              -- FILLER_9   179-192

         COMMIT;

        <<skip_pu_claim>>
         NULL;
      END LOOP;

      CLOSE all_pu_stat;
   -- commit; --test


   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || pu_stat.claim_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;


   PROCEDURE collect_claim_pu_paid
   IS
      v_procname            RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                               := 'ND_BUREAU.COLLECT_CLAIM_PU_PAID';
      v_err_mssg            VARCHAR2 (200);
      v_err_loc             VARCHAR2 (100);

      CURSOR all_pu_stat
      IS
           SELECT *
             FROM RPT_CLAIMS_GL_STAT A
            WHERE     A.company = '04'
                  AND a.state_cd = 'NJ'
                  AND A.GROUP_LINE = '24'
                  AND a.book_date >= TO_DATE (v_begin_date)
                  AND a.book_date <= TO_DATE (v_end_date)
                  AND A.COV_CODE < '990'
                  AND a.sdac_ind = '1'
                  AND a.trans_code IN
                         ('41',
                          '51',
                          '61',                               ---loss payments
                          '42',
                          '62',                            -- expense payments
                          '44',
                          '54',
                          '64',
                          '47',
                          '57',
                          '67',
                          '48',
                          '58',
                          '68',
                          '71',
                          '81',
                          '91',
                          '86',                         ---recoveries   -05/05
                          '72',
                          '82',
                          '92',
                          '87',                                  --subrogation
                          '73',
                          '83',
                          '93')                                --contribution)
         ORDER BY a.company,
                  a.state_cd,
                  a.group_line,
                  a.book_date,
                  A.claim_number;

      pu_stat               all_pu_stat%ROWTYPE;
      v_pct_of_manual_flg   VARCHAR (1);
      v_trans_code          VARCHAR (1);
      v_orig_trans_code     VARCHAR (2);
      v_pct_of_manual       VARCHAR (3);
      v_item_terr           VARCHAR (4);
      v_item_families       VARCHAR (1);
      v_item_row_town       VARCHAR (1);
      v_item_dwell_code     VARCHAR (1);
      v_class_code          VARCHAR (3);
      v_liab_limit          VARCHAR (1);
      v_med_limit           VARCHAR (1);
      V_MPL47_MPL49         VARCHAR (1);
      v_company             VARCHAR (4);
      v_id_cd               VARCHAR (2);
      v_claim_number_new    VARCHAR (13);
      v_claim_count         NUMBER;
      v_loss_type           VARCHAR (2);
      v_loss_amount         NUMBER;
      v_alae_amount         NUMBER;
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_claim_pu_paid';

      OPEN all_pu_stat;

      LOOP
         FETCH all_pu_stat INTO pu_stat;

         EXIT WHEN all_pu_stat%NOTFOUND;

         IF        pu_stat.state_cd = 'NJ'
               AND pu_stat.eff_date > TO_DATE ('03/31/2008', 'mm/dd/yyyy')
               AND (   SUBSTR (pu_stat.Policy_number, 1, 1) = 'H'
                    OR SUBSTR (pu_stat.policy_number, 1, 1) = 'D'
                    OR SUBSTR (pu_stat.policy_number, 1, 1) = 'F')
               AND (pu_stat.group_line = '24')
            OR (    pu_stat.group_line = '54'
                AND (   pu_stat.csp_subline = '460'
                     OR pu_stat.csp_subline = '470'
                     OR pu_stat.csp_subline = '480'))
         THEN
            NULL;
         ELSE
            IF     pu_stat.state_cd = 'NJ'
               AND pu_stat.eff_date > TO_DATE ('03/31/2011', 'mm/dd/yyyy')
               AND SUBSTR (pu_stat.Policy_number, 1, 2) = 'IM'
               AND pu_stat.group_line = '68'
            THEN                          --- this might be user line not sure
               NULL;
            ELSE
               GOTO skip_pu_claim;
            END IF;
         END IF;

         ---05/05
         IF pu_stat.loss_amount > 0
         THEN
            IF    pu_stat.trans_code = '41'
               OR pu_stat.trans_code = '51'
               OR pu_stat.trans_code = '61'
            THEN
               v_trans_code := '6';
               v_orig_trans_code := '6L';
               v_loss_amount := pu_stat.loss_amount;
               v_alae_amount := 0;
            END IF;

            IF    pu_stat.trans_code = '71'
               OR                                                    --salvage
                 pu_stat.trans_code = '81'
               OR pu_stat.trans_code = '91'
               OR pu_stat.trans_code = '72'
               OR                                                       -- sub
                 pu_stat.trans_code = '82'
               OR pu_stat.trans_code = '92'
               OR pu_stat.trans_code = '86'
               OR pu_stat.trans_code = '87'
               OR pu_stat.trans_code = '73'
               OR                                             -- contributioni
                 pu_stat.trans_code = '83'
               OR pu_stat.trans_code = '93'
            THEN
               v_trans_code := '7';
               v_orig_trans_code := '7L';
               v_loss_amount := (pu_stat.loss_amount * -1);
               v_alae_amount := 0;
            END IF;

            IF    pu_stat.trans_code = '42'
               OR                                                   -- expense
                 pu_stat.trans_code = '62'
               OR pu_stat.trans_code = '44'
               OR pu_stat.trans_code = '54'
               OR pu_stat.trans_code = '64'
               OR pu_stat.trans_code = '47'
               OR pu_stat.trans_code = '57'
               OR pu_stat.trans_code = '67'
               OR pu_stat.trans_code = '48'
               OR pu_stat.trans_code = '58'
               OR pu_stat.trans_code = '68'
            THEN
               v_trans_code := '6';
               v_orig_trans_code := '6X';
               v_loss_amount := 0;
               v_alae_amount := pu_stat.loss_amount;
            END IF;
         ELSE
            IF    pu_stat.trans_code = '41'
               OR pu_stat.trans_code = '51'
               OR pu_stat.trans_code = '61'
            THEN                                             --- loss payments
               v_TRANS_CODE := '7';
               v_orig_trans_code := '7L';                    --- loss payments
               v_loss_amount := pu_stat.loss_amount;
               v_alae_amount := 0;
            END IF;

            IF    pu_stat.trans_code = '71'
               OR                                                    --salvage
                 pu_stat.trans_code = '81'
               OR pu_stat.trans_code = '91'
               OR pu_stat.trans_code = '72'
               OR                                                       -- sub
                 pu_stat.trans_code = '82'
               OR pu_stat.trans_code = '92'
               OR pu_stat.trans_code = '86'
               OR pu_stat.trans_code = '87'
               OR pu_stat.trans_code = '73'
               OR                                             -- contributioni
                 pu_stat.trans_code = '83'
               OR pu_stat.trans_code = '93'
            THEN
               v_TRANS_CODE := '6';
               v_orig_trans_code := '6L';
               v_loss_amount := (pu_stat.loss_amount * -1); -- make positive and a 6
               v_alae_amount := 0;
            END IF;

            IF    pu_stat.trans_code = '42'
               OR                                                   -- expense
                 pu_stat.trans_code = '62'
               OR pu_stat.trans_code = '44'
               OR pu_stat.trans_code = '54'
               OR pu_stat.trans_code = '64'
               OR pu_stat.trans_code = '47'
               OR pu_stat.trans_code = '57'
               OR pu_stat.trans_code = '67'
               OR pu_stat.trans_code = '48'
               OR pu_stat.trans_code = '58'
               OR pu_stat.trans_code = '68'
            THEN
               v_trans_code := '7';
               v_orig_trans_code := '7X';                           -- expense
               v_loss_amount := 0;
               v_alae_amount := pu_stat.loss_amount;
            END IF;
         END IF;


         --read  stat from the home item for the missing stat records
         IF pu_stat.terr > 0
         THEN
            v_item_terr := TO_CHAR (pu_stat.terr);
         END IF;

         ---4/29   v_claim_number_new :=   rpad(trim(pu_stat.CLAIM_number),10,' ') ||   trim(to_char(pu_stat.cov_code))  ;
         v_claim_number_new := RPAD (TRIM (pu_stat.CLAIM_number), 10, ' ') || TRIM (TO_CHAR (pu_stat.cov_code));

         v_class_code := '99';

         get_limits_master_for_loss (TRIM (pu_stat.eff_date),
                                     TRIM (pu_stat.exp_date),
                                     TRIM (pu_stat.actg_date),
                                     TRIM (pu_stat.loss_date),
                                     TRIM (pu_stat.user_line),
                                     TRIM (pu_stat.policy_number),
                                     '401',
                                     v_liab_limit);

         EXIT WHEN v_err_fl != 0;

         get_limits_master_for_loss (TRIM (pu_stat.eff_date),
                                     TRIM (pu_stat.exp_date),
                                     TRIM (pu_stat.actg_date),         ---test
                                     TRIM (pu_stat.loss_date),
                                     '24',
                                     TRIM (pu_stat.policy_number),
                                     '805',
                                     v_med_limit);

         EXIT WHEN v_err_fl != 0;

         get_item_master_for_loss (TRIM (pu_stat.eff_date),
                                   TRIM (pu_stat.exp_date),
                                   TRIM (pu_stat.actg_date),           ---test
                                   TRIM (pu_stat.loss_date),
                                   '24',
                                   TRIM (pu_stat.policy_number),
                                   1,                              -- item seq
                                   v_item_families,
                                   v_item_dwell_code,
                                   v_class_code);

         EXIT WHEN v_err_fl != 0;

         CASE v_item_dwell_code
            WHEN 'P'
            THEN
               v_item_dwell_code := '1';
            WHEN 'S'
            THEN
               v_item_dwell_code := '5';
            WHEN 'R'
            THEN
               v_item_dwell_code := '5';
            WHEN '2'
            THEN
               v_item_dwell_code := '7';
            WHEN '3'
            THEN
               v_item_dwell_code := '7';
            ELSE
               v_item_dwell_code := '1';
         END CASE;

         get_loss_type (pu_stat.cov_code, pu_stat.type_loss, v_loss_type);
         --  v_claim_count := pu_stat.clm_cnt_occur_new;
         --test 5
         v_claim_count := 0;

         IF pu_stat.company = '04'
         THEN
            v_company := '0056';
            v_id_cd := '06';
         ELSE
            v_company := '0060';
            v_id_cd := '06';                                              --??
         END IF;

         INSERT INTO RPT_CLAIMS_MSO_GL_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             ACCIDENT_DATE,
                                             REPORT_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             CAT_CODE,
                                             FILLER_1,
                                             POLICY_FORM,
                                             LIMIT_LIAB_COV,
                                             LIMIT_MED_COV,
                                             FILLER_2,
                                             NUMBER_FAMILIES,
                                             FILLER_3,
                                             COV_CODE,
                                             TERRITORY_CODE,
                                             FILLER_4,
                                             PCT_OF_MANUAL,
                                             CLAIM_COUNT,
                                             LOSS_AMOUNT,
                                             MSO_MODULE,
                                             CLAIM_NUMBER,
                                             FILLER_6,
                                             LOSS_COST_MULT,
                                             INSURANCE_SCORE,
                                             FILLER_7,
                                             ALAE,
                                             FILLER_8,
                                             class_code,
                                             FILLER_9)
              VALUES (v_company,                      --company          01-04
                      v_trans_code,                   --transcode        05-05
                      v_orig_trans_code,
                      '2',                            -- stat plan       06-06
                      TO_CHAR (pu_stat.actg_date, 'MMDDYY'),         -----test
                      TO_CHAR (pu_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE 11-14
                      TO_CHAR (pu_stat.LOSS_DATE, 'MMDDYY'), -- TRANS_EFF_DATE, 15-18
                      TO_CHAR (pu_stat.REPORTED_DATE, 'MMDDYY'), -- TRANS_EXP_DATE  19-22
                      '29',                           -- state           23-24
                      '170',                          -- ASL             25-27
                      '171',                          -- SUBLINE,        28-30
                      --    to_char(pu_stat.cat_number),                  -- cat code
                      NVL (pu_stat.cat_number, ' '),              ---dmb 04/29
                      '   ',                          -- filler 1        34-36
                      '2',                              -- POLICY_FORM      37
                      v_liab_limit,                    -- policy limit liab 38
                      v_med_limit,                     -- policy med limit  39
                      ' ',                            -- filler 2        40-41
                      v_item_families,                   -- number families 42
                      ' ',                             -- filler 3       43-45
                      v_item_dwell_code,                  --coverage code   46
                      v_item_terr,                     -- territory code 47-48
                      ' ',                              -- filler 4      49-51
                      v_pct_of_manual,                 -- percent of man 52-54
                      ' ',                                         -- filler 5
                      v_loss_amount, ---test 1pu_stat.LOSS_AMOUNT ,             -- PREMIUM_AMOUNT  58-65
                      v_id_cd,                        -- MSO_MODULE,     66-67
                      v_claim_number_new, -- (substr(trim(pu_stat.CLAIM_number),10,' ') ||   trim(pu_stat.cov_code)) ,    --test      -- CLAIM,
                      ' ',                        -- filler 6       81-99 (19)
                      '   ',                        -- LOSS_COST_MULT  100-102
                      '   ',                        -- INSURANCE SCORE 103-105
                      (RPAD(' ', 25, ' ') || rpad(pu_stat.cov_code,3,' ') || rpad(to_char(pu_stat.user_line),2,' ') || lpad(to_char(pu_stat.item_num),3,'0') || pu_stat.policy_number),                     -- FILLER_7        106-154 (49)
                      v_alae_amount,             -- alae           155-162 (8)
                      ' ',                      ---filler 8       163-176 (14)
                      '99',   --v_class_code,                     --CLASS CODE   177-178
                      ' ');                              -- FILLER_9   179-192


         COMMIT;                                                        --test

        <<skip_pu_claim>>
         NULL;
      END LOOP;

      CLOSE all_pu_stat;
   -- commit;-- test


   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || pu_stat.claim_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE collect_prem_mso_pu_data_loop
   IS
      v_procname            RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                               := 'ND_BUREAU.COLLECT_PREM_MSO_PU_DATA_LOOP';
      v_err_mssg            VARCHAR2 (200);
      v_err_loc             VARCHAR2 (100);

      CURSOR all_pu_stat
      IS
           SELECT *
             FROM RPT_POLICY_GL_STAT A
            WHERE     A.company = '04'
                  AND a.state_cd = 'NJ'
                  AND A.GROUP_LINE = '24'
                  AND a.book_date >= TO_DATE (v_begin_date)
                  AND a.book_date <= TO_DATE (v_end_date)
                  AND A.COV_CODE < '990'
                  AND a.sdac_ind = '1'
         ORDER BY a.company,
                  a.state_cd,
                  a.group_line,
                  a.book_date,
                  A.POLICY_NUMBER;

      pu_stat               all_pu_stat%ROWTYPE;

      v_trans_code          VARCHAR (1);
      v_orig_trans_code     VARCHAR (2);
      v_pct_of_manual_flg   VARCHAR (1);
      v_pct_of_manual       VARCHAR (3);
      v_item_terr           VARCHAR (4);
      v_item_families       VARCHAR (1);
      v_item_row_town       VARCHAR (1);
      v_item_dwell_code     VARCHAR (1);
      v_class_code          VARCHAR (2);
      v_liab_limit          VARCHAR (1);
      v_med_limit           VARCHAR (1);
      V_MPL47_MPL49         VARCHAR (1);
      v_written_prem        NUMBER := 0;
      v_company             VARCHAR (4);
      v_id_cd               VARCHAR (2);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'collect_prem_mso_pu_data_loop_insert';

      OPEN all_pu_stat;

      LOOP
         FETCH all_pu_stat INTO pu_stat;

         EXIT WHEN all_pu_stat%NOTFOUND;

         get_trans_code (pu_stat.trans_code,
                         pu_stat.old_new_stat,
                         pu_stat.chg_date,
                         pu_stat.eff_date,
                         v_trans_code);

         get_homeowners_stat (TRIM (pu_stat.company),
                              TRIM (pu_stat.state_cd),
                              TRIM (pu_stat.group_line),
                              TRIM (pu_stat.eff_date),
                              TRIM (pu_stat.exp_date),
                              TRIM (pu_stat.book_date),
                              TRIM (pu_stat.actg_date),
                              TRIM (pu_stat.chg_date),
                              TRIM (pu_stat.item_state_cd),
                              TRIM (pu_stat.location),
                              TRIM (pu_stat.item_num),
                              TRIM (pu_stat.policy_number),
                              TRIM (pu_stat.old_new_stat),
                              TRIM (pu_stat.proc_ctr),
                              TRIM (pu_stat.trans_code),
                              TRIM (pu_stat.sdac_ind),
                              v_item_dwell_code,
                              v_item_terr,
                              v_item_families,
                              v_item_row_town);

         EXIT WHEN v_err_fl != 0;

         --read  stat from the home item for the missing stat records

         IF     LPAD (TO_CHAR (pu_stat.terr), 2, '0') > '00'
            AND LPAD (TO_CHAR (pu_stat.terr), 2, '0') < '46'
         THEN
            v_item_terr := LPAD (TO_CHAR (pu_stat.terr), 2, '0');
         ELSE
            V_ITEM_TERR := LPAD (V_ITEM_TERR, 2, '0');
         END IF;

         convert_territory_ho (v_item_terr, v_item_terr);              ---test

         CASE v_item_dwell_code
            WHEN 'P'
            THEN
               v_item_dwell_code := '1';
            WHEN 'S'
            THEN
               v_item_dwell_code := '5';
            WHEN 'R'
            THEN
               v_item_dwell_code := '5';
            WHEN '2'
            THEN
               v_item_dwell_code := '7';
            WHEN '3'
            THEN
               v_item_dwell_code := '7';
            ELSE
               v_item_dwell_code := '1';
         END CASE;

         v_class_code := '99';

         get_limits_master (TRIM (pu_stat.eff_date),
                            TRIM (pu_stat.exp_date),
                            TRIM (pu_stat.actg_date),
                            TRIM (pu_stat.chg_date),
                            TRIM (pu_stat.user_line),
                            TRIM (pu_stat.policy_number),
                            '401',
                            v_liab_limit);

         EXIT WHEN v_err_fl != 0;

         get_limits_master (TRIM (pu_stat.eff_date),
                            TRIM (pu_stat.exp_date),
                            TRIM (pu_stat.actg_date),
                            TRIM (pu_stat.chg_date),
                            TRIM ('24'),
                            TRIM (pu_stat.policy_number),
                            '805',
                            v_med_limit);

         EXIT WHEN v_err_fl != 0;

         --Read the homeowners item stat for these endorsements on item 1
         v_return_value := 'N';
         get_endorsement_master (TRIM (pu_stat.eff_date),
                                 TRIM (pu_stat.exp_date),
                                 TRIM (pu_stat.actg_date),
                                 TRIM (pu_stat.chg_date),
                                 '24',                      ---homeowners item
                                 TRIM (pu_stat.policy_number),
                                 'FM-518',
                                 v_return_value,
                                 v_return_parm1,
                                 v_return_limit);
         EXIT WHEN v_err_fl != 0;
         v_pct_of_manual_flg := TRIM (v_return_value);

         IF v_pct_of_manual_flg = 'N'
         THEN
            v_return_value := 'N';
            get_endorsement_master (TRIM (pu_stat.eff_date),
                                    TRIM (pu_stat.exp_date),
                                    TRIM (pu_stat.actg_date),
                                    TRIM (pu_stat.chg_date),
                                    '24',                   ---homeowners item
                                    TRIM (pu_stat.policy_number),
                                    'FM-424',
                                    v_return_value,
                                    v_return_parm1,
                                    v_return_limit);
            EXIT WHEN v_err_fl != 0;
            v_pct_of_manual_flg := TRIM (v_return_value);
         END IF;

         IF v_pct_of_manual_flg = 'Y'
         THEN
            v_pct_of_manual := '095';
         ELSE
            v_pct_of_manual := '100';
         END IF;


         /* v_return_value:= 'N';
          get_endorsement_stat (trim(pu_stat.company),
                             trim(pu_stat.state_cd),
                             trim(pu_stat.group_line),
                             trim(pu_stat.eff_date),
                             trim(pu_stat.exp_date),
                             trim(pu_stat.book_date),
                             trim(pu_stat.actg_date),
                             trim(pu_stat.chg_date),
                             trim(pu_stat.item_state_cd),
                             trim(pu_stat.location),
                             trim('24'), ---pu_stat.user_line),
                             trim(pu_stat.item_num),
                             trim(pu_stat.policy_number),
                             '959',
                             trim(pu_stat.old_new_stat),
                             'FM-518',
                             trim(pu_stat.proc_ctr),
                             trim(pu_stat.trans_code),
                             trim(pu_stat.sdac_ind),
                             v_return_value,
                             v_return_parm1);
          v_pct_of_manual_flg := trim(v_return_value);
          if v_pct_of_manual_flg = 'N' then
              v_return_value:= 'N';
              get_endorsement_stat (trim(pu_stat.company),
                             trim(pu_stat.state_cd),
                             trim(pu_stat.group_line),
                             trim(pu_stat.eff_date),
                             trim(pu_stat.exp_date),
                             trim(pu_stat.book_date),
                             trim(pu_stat.actg_date),
                             trim(pu_stat.chg_date),
                             trim(pu_stat.item_state_cd),
                             trim(pu_stat.location),
                             trim('24'),    ---read home item
                             trim(pu_stat.item_num),
                             trim(pu_stat.policy_number),
                             '959',
                             trim(pu_stat.old_new_stat),
                              'FM-424',
                             trim(pu_stat.proc_ctr),
                             trim(pu_stat.trans_code),
                             trim(pu_stat.sdac_ind),
                             v_return_value,
                             v_return_parm1);
             v_pct_of_manual_flg := trim(v_return_value);
          end if;

          if v_pct_of_manual_flg = 'Y' then
            v_pct_of_manual := '095';
          else
            v_pct_of_manual := '100';
          end if;
    */
         v_written_prem := ROUND (pu_stat.WRITTEN_PREM);


         IF pu_stat.company = '04'
         THEN
            v_id_cd := '06';
            v_company := '0056';
         ELSE
            v_company := '0060';
            v_id_cd := '06';
         END IF;

         INSERT INTO RPT_POLICY_MSO_GL_STAT (COMPANY_ID,
                                             TRANS_TYPE,
                                             ORIG_TRANS_TYPE,
                                             STAT_PLAN,
                                             ACCOUNTING_DATE,
                                             POLICY_EFF_DATE,
                                             TRANS_EFF_DATE,
                                             TRANS_EXP_DATE,
                                             STATE,
                                             ASL,
                                             SUBLINE,
                                             FILLER_1,
                                             FILLER_2,
                                             POLICY_FORM,
                                             LIMIT_LIAB_COV,
                                             LIMIT_MED_COV,
                                             FILLER_3,
                                             NUMBER_FAMILIES,
                                             FILLER_4,
                                             COV_CODE,
                                             TERRITORY_CODE,
                                             FILLER_5,
                                             PCT_OF_MANUAL,
                                             FILLER_6,
                                             PREMIUM_AMOUNT,
                                             MSO_MODULE,
                                             POLICY_NUMBER,
                                             FILLER_7,
                                             LOSS_COST_MULT,
                                             INSURANCE_SCORE,
                                             FILLER_8,
                                             CLASS_CODE,
                                             FILLER_9)
              VALUES (v_company,                      --company          01-04
                      v_trans_code,                   --transcode        05-05
                      pu_stat.trans_code,                      ---testing summ
                      '2', -- stat plan       06-06  -- test this might have to be a '2'
                      TO_CHAR (pu_stat.actg_date, 'MMDDYY'),
                      TO_CHAR (pu_stat.EFF_DATE, 'MMDDYY'), -- POLICY_EFF_DATE 11-14
                      TO_CHAR (pu_stat.CHG_DATE, 'MMDDYY'), -- TRANS_EFF_DATE, 15-18
                      TO_CHAR (pu_stat.EXP_DATE, 'MMDDYY'), -- TRANS_EXP_DATE  19-22
                      '29',                           -- state           23-24
                      '170',                          -- ASL             25-27
                      '171',                          -- SUBLINE,        28-30
                      ' ',                            -- filler 1        31-33
                      ' ',                            -- filler 2        34-36
                      '2',                              -- POLICY_FORM      37
                      v_liab_limit,                    -- policy limit liab 38
                      v_med_limit,                     -- policy med limit  39
                      ' ',                            -- filler 3        40-41
                      v_item_families,                   -- number families 42
                      ' ',                             -- filler 4       43-45
                      v_item_dwell_code,                  --coverage code   46
                      v_item_terr,                     -- territory code 47-48
                      ' ', -- filler 5  the old cobol program is moving rate pct of '04' to this field. it really s/b blank     49-51
                      v_pct_of_manual,                 -- percent of man 52-54
                      ' ',                                         -- filler 6
                      pu_stat.WRITTEN_PREM,           -- PREMIUM_AMOUNT  58-65
                      v_id_cd,                        -- MSO_MODULE,     66-67
                      TRIM (pu_stat.POLICY_NUMBER),   -- POLICY_NUMBER,  68-80
                      ' ',                        -- filler 7       81-99 (19)
                      '   ',                        -- LOSS_COST_MULT  100-102
                      '   ',                        -- INSURANCE SCORE 103-105
                      ' ',                          -- FILLER_8        106-176
                      v_class_code,                     --CLASS CODE   177-178
                      ' ');                              -- FILLER_9   179-192

         COMMIT;
      END LOOP;

      CLOSE all_pu_stat;
   --  commit; --test


   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || V_ERR_MSSG || pu_stat.policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE get_endorsement_master (v_eff_date        IN     DATE,
                                     v_exp_date        IN     DATE,
                                     v_actg_date       IN     DATE,
                                     v_chg_date        IN     DATE,
                                     v_user_line       IN     VARCHAR2,
                                     v_policy_number   IN     VARCHAR2,
                                     v_end_num         IN     VARCHAR2,
                                     v_return_value       OUT VARCHAR2,
                                     v_return_parm1       OUT VARCHAR2,
                                     v_return_limit       OUT VARCHAR2)
   IS
      v_procname       RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                          := 'ND_BUREAU.GET_ENDORSEMENT_MASTER';
      v_err_mssg       VARCHAR2 (200);
      v_err_loc        VARCHAR2 (100);

      ----rewrite make faste
      CURSOR end_master
      IS
         SELECT p.eff_date,
                p.exp_date,
                p.run_date,
                p.change_date,
                c.end_num,
                c.cov_parm_1,
                c.cov_limit
           FROM staging.history_wang_policy p,            ---test 999
                staging.history_wang_coverage_record c   --- test 999
          WHERE     c.rec_id = 6
                AND c.end_num = TRIM (v_end_num)
                AND p.pol_num = c.pol_num
                AND p.run_date = c.run_date
                AND p.pol_num = c.pol_num
                AND p.pol_num = TRIM (v_policy_number)
                AND sds_line = TRIM (v_user_line)
                --  and cov_code =  trim(v_cov_code)
                AND eff_date = v_eff_date
                AND exp_date = v_exp_date;
                --- AND change_date = v_chg_date
                --- AND p.run_date = v_actg_date;

      one_end_master   end_master%ROWTYPE;
      v_rowcount       NUMBER;
   BEGIN
      v_err_loc := 'get_endorsement_master';
      v_return_value := 'N';

      OPEN end_master;

      LOOP
         FETCH end_master INTO one_end_master;

         EXIT WHEN end_master%NOTFOUND;

         v_return_value := 'Y';
         v_return_parm1 := TRIM (one_end_master.COV_PARM_1);
         v_return_limit := TRIM (one_end_master.cov_limit);
         EXIT;
      END LOOP;

      CLOSE end_master;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_return_value := 'N';
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || '            :'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || ' ' || V_ERR_MSSG || ' ' || v_policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;



   PROCEDURE get_endorsement_at_loss (v_eff_date        IN     DATE,
                                      v_exp_date        IN     DATE,
                                      v_actg_date       IN     DATE,
                                      v_loss_date       IN     DATE,
                                      v_user_line       IN     VARCHAR2,
                                      v_policy_number   IN     VARCHAR2,
                                      v_end_num         IN     VARCHAR2,
                                      v_return_value       OUT VARCHAR2,
                                      v_return_parm1       OUT VARCHAR2)
   IS
      v_procname       RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                          := 'ND_BUREAU.GET_ENDORSEMENT_AT_LOSS';
      v_err_mssg       VARCHAR2 (200);
      v_err_loc        VARCHAR2 (100);

      CURSOR end_master
      IS
         SELECT p.eff_date,
                p.exp_date,
                p.run_date,
                p.change_date,
                c.end_num,
                c.cov_parm_1
           FROM staging.history_wang_policy p,                 --test
                staging.history_wang_coverage_record c         --test
          --       from staging.history_wang_policy p, ---test 99
          --    staging.history_wang_coverage_record c   --test 999
          WHERE     c.rec_id = 6
                AND c.end_num = TRIM (v_end_num)
                AND p.pol_num = c.pol_num
                AND p.run_date = c.run_date
                AND p.pol_num = c.pol_num
                AND p.pol_num = TRIM (v_policy_number)
                AND c.sds_line = TRIM (v_user_line)
                AND p.eff_date <= v_loss_date --   TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.exp_date >= v_loss_date --TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.change_date <= v_loss_date --TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.run_date <= v_loss_date --TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.run_date =
                       (SELECT MAX (p2.run_date)
                          FROM staging.history_wang_policy p2  --test
                         --- and p.run_date = (select max(p2.run_date) from staging.history_wang_policy p2 --test
                         WHERE     p2.pol_num = p.pol_num
                               AND p2.eff_date = p.eff_date
                               AND p2.exp_date = p.exp_date
                               AND P2.CHANGE_DATE = p.change_date
                               AND p2.run_date <= v_loss_date)
                AND p.change_date =
                       (SELECT MAX (p3.change_date)
                          FROM staging.history_wang_policy p3
                         --    and p.change_date = (select max(p3.change_date) from staging.history_wang_policy p3  --test
                         WHERE     p3.pol_num = p.pol_num
                               AND p3.eff_date = p.eff_date
                               AND p3.exp_date = p.exp_date
                               AND p3.run_date = p.run_date
                               AND p3.change_date <= v_loss_date);

      one_end_master   end_master%ROWTYPE;
   BEGIN
      v_err_loc := 'get_endorsement_at_loss';
      v_return_value := 'N';

      OPEN end_master;

      LOOP
         FETCH end_master INTO one_end_master;

         EXIT WHEN end_master%NOTFOUND;

         v_return_value := 'Y';
         v_return_parm1 := TRIM (one_end_master.COV_PARM_1);
         EXIT;
      END LOOP;

      CLOSE end_master;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_return_value := 'N';
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || '            :'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || ' ' || V_ERR_MSSG || ' ' || v_policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE get_item_master (v_eff_date        IN     DATE,
                              v_exp_date        IN     DATE,
                              v_actg_date       IN     DATE,
                              v_chg_date        IN     DATE,
                              v_user_line       IN     VARCHAR2,
                              v_policy_number   IN     VARCHAR2,
                              v_item_number     IN     NUMBER,
                              v_class_code         OUT VARCHAR2,
                              v_prot_class         OUT VARCHAR2,
                              v_total_prem         OUT NUMBER,
                              v_return_value       OUT VARCHAR2)
   IS
      v_procname        RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                           := 'ND_BUREAU.GET_item_MASTER';
      v_err_mssg        VARCHAR2 (200);
      v_err_loc         VARCHAR2 (100);

      ----rewrite make faste
      CURSOR item_master
      IS
         SELECT p.eff_date,
                p.exp_date,
                p.run_date,
                c.class_code,
                c.rec_id,
                c.item_seq,
                c.user_line,
                p.change_date,
                c.prot_class,
                p.total_prem
           FROM staging.history_wang_policy p,                     ---test 999
                staging.history_wang_item c --- test 999
          WHERE     c.rec_id = 4
                AND c.item_seq = TRIM (v_item_number)
                AND p.pol_num = c.pol_num
                AND p.run_date = c.run_date
                AND p.pol_num = TRIM (v_policy_number)
              --  AND c.sds_line = TRIM (v_user_line) -- test999
                AND c.user_line = trim(v_user_line) --test999
                
                AND eff_date = v_eff_date
                AND exp_date = v_exp_date
            --    AND change_date = v_chg_date  ---test9999
               AND p.run_date <= v_actg_date
               order by p.run_date desc;
             --   AND p.trans_date = v_actg_date;  --test9999

      one_item_master   item_master%ROWTYPE;
      v_rowcount        NUMBER;
   BEGIN
      v_err_loc := 'get_item_master';
      v_return_value := 'N';

      OPEN item_master;

      LOOP
         FETCH item_master INTO one_item_master;

         EXIT WHEN item_master%NOTFOUND;

         v_return_value := 'Y';
         v_class_code := TRIM (one_item_master.class_code);
         v_prot_class := TRIM (one_item_master.prot_class);
         v_total_prem := TRIM (one_item_master.total_prem);
         EXIT;
      END LOOP;

      CLOSE item_master;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_return_value := 'N';
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || '            :'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || ' ' || V_ERR_MSSG || ' ' || v_policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE get_item_master_fo_class_code (v_eff_date        IN     DATE,
                              v_exp_date        IN     DATE,
                              v_actg_date       IN     DATE,
                              v_chg_date        IN     DATE,
                              v_user_line       IN     VARCHAR2,
                              v_policy_number   IN     VARCHAR2,
                              v_item_number     IN     NUMBER,
                              v_class_code         OUT VARCHAR2,
                              v_prot_class         OUT VARCHAR2,
                              v_total_prem         OUT NUMBER,
                              v_return_value       OUT VARCHAR2)
   IS
      v_procname        RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                           := 'ND_BUREAU.GET_item_MASTER';
      v_err_mssg        VARCHAR2 (200);
      v_err_loc         VARCHAR2 (100);

      ----rewrite make faste
      CURSOR item_master
      IS
         SELECT p.eff_date,
                p.exp_date,
                p.run_date,
                c.class_code,
                c.rec_id,
                c.item_seq,
                c.user_line,
                p.change_date,
                c.prot_class,
                p.total_prem
           FROM staging.history_wang_policy p,                     ---test 999
                staging.history_wang_item c --- test 999
          WHERE     c.rec_id = 4
                AND c.item_seq = TRIM (v_item_number)
                AND p.pol_num = c.pol_num
                AND p.run_date = c.run_date
                AND p.pol_num = TRIM (v_policy_number)
              --  AND c.sds_line = TRIM (v_user_line) -- test999
                AND c.user_line = trim(v_user_line) --test999
                
                AND eff_date = v_eff_date
                AND exp_date = v_exp_date
          order by p.run_date desc;

            --    AND change_date = v_chg_date  ---test9999
               -- AND p.run_date = v_actg_date;----test9999
             --   AND p.trans_date = v_actg_date;  --test9999

      one_item_master   item_master%ROWTYPE;
      v_rowcount        NUMBER;
   BEGIN
      v_err_loc := 'get_item_master';
      v_return_value := 'N';

      OPEN item_master;

      LOOP
         FETCH item_master INTO one_item_master;

         EXIT WHEN item_master%NOTFOUND;

         v_return_value := 'Y';
         v_class_code := TRIM (one_item_master.class_code);
         v_prot_class := TRIM (one_item_master.prot_class);
         v_total_prem := TRIM (one_item_master.total_prem);
         EXIT;
      END LOOP;

      CLOSE item_master;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_return_value := 'N';
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || '            :'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || ' ' || V_ERR_MSSG || ' ' || v_policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE get_item_master_for_loss (v_eff_date          IN     DATE,
                                       v_exp_date          IN     DATE,
                                       v_actg_date         IN     DATE,
                                       v_loss_date         IN     DATE,
                                       v_user_line         IN     VARCHAR2,
                                       v_policy_number     IN     VARCHAR2,
                                       v_item_number       IN     NUMBER,
                                       v_number_families      OUT VARCHAR2,
                                       v_dwell_code           OUT VARCHAR2,
                                       v_class_code           out varchar2)
   IS
      v_procname        RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                           := 'ND_BUREAU.GET_item_MASTER_FOR_LOSS';
      v_err_mssg        VARCHAR2 (200);
      v_err_loc         VARCHAR2 (100);

      CURSOR item_master
      IS
         SELECT p.eff_date,
                p.exp_date,
                p.run_date,
                p.change_date,
                i.item_seq,
                i.families,
                i.dwell_code,
                i.class_code
           FROM staging.history_wang_policy p,
                staging.history_wang_item i                   ---test
          -- from staging.history_wang_policy p, ---test 999
          --       staging.history_wang_item i   ---test 999
          WHERE     p.pol_num = i.pol_num
                AND p.run_date = i.run_date
                AND p.pol_num = i.pol_num
                AND p.pol_num = TRIM (v_policy_number)
                AND sds_line = TRIM (v_user_line)
            ---    AND i.item_seq = 1
                AND i.item_seq = V_ITEM_NUMBER -- TEST55
                AND p.eff_date <= v_loss_date --   TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.exp_date >= v_loss_date --TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.change_date <= v_loss_date --TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.run_date <= v_loss_date --TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.run_date =
                       (SELECT MAX (p2.run_date)
                          FROM staging.history_wang_policy p2 --test 999
                         --   and p.run_date = (select max(p2.run_date) from staging.history_wang_policy p2 --test
                         WHERE     p2.pol_num = p.pol_num
                               AND p2.eff_date = p.eff_date
                               AND p2.exp_date = p.exp_date
                               AND P2.CHANGE_DATE = p.change_date
                               AND p2.run_date <= v_loss_date)
                AND p.change_date =
                       (SELECT MAX (p3.change_date)
                          FROM staging.history_wang_policy p3 --test9999
                         --    and p.change_date = (select max(p3.change_date) from staging.history_wang_policy p3  --test
                         WHERE     p3.pol_num = p.pol_num
                               AND p3.eff_date = p.eff_date
                               AND p3.exp_date = p.exp_date
                               AND p3.run_date = p.run_date
                               AND p3.change_date <= v_loss_date);



      one_item_master   item_master%ROWTYPE;
      v_rowcount        NUMBER;
   BEGIN
      v_err_loc := 'get_item_master_for_loss';
      v_rowcount := 0;

      OPEN item_master;

      LOOP
         EXIT WHEN item_master%NOTFOUND OR v_rowcount > 0;

         FETCH item_master INTO one_item_master;

         IF v_user_line = '24'
         THEN
            v_number_families := one_item_master.families;
            v_dwell_code := one_item_master.dwell_code;
         END IF;
         
        IF  V_USER_LINE = '70'
         THEN
            v_class_code := one_item_master.class_code;
         END IF;
         
         v_rowcount := v_rowcount + 1;
      END LOOP;

      CLOSE item_master;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_number_families := ' ';
         v_dwell_code := ' ';
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || '            :'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || ' ' || V_ERR_MSSG || ' ' || v_policy_number);

         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE get_limits_master_for_loss (v_eff_date        IN     DATE,
                                         v_exp_date        IN     DATE,
                                         v_actg_date       IN     DATE,
                                         v_loss_date       IN     DATE,
                                         v_user_line       IN     VARCHAR2,
                                         v_policy_number   IN     VARCHAR2,
                                         v_cov_code        IN     VARCHAR2,
                                         v_limit              OUT VARCHAR2)
   IS
      v_procname       RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                          := 'ND_BUREAU.GET_LIMITS_MASTER_for_loss';
      v_err_mssg       VARCHAR2 (200);
      v_err_loc        VARCHAR2 (100);

      CURSOR cov_master
      IS
         SELECT p.eff_date,
                p.exp_date,
                p.run_date,
                p.change_date,
                c.cov_code,
                c.cov_limit
           FROM staging.history_wang_policy p,             --test 999
                staging.history_wang_coverage_record c      --test999
          --  from staging.history_wang_policy p,   --test
          --       staging.history_wang_coverage_record c  --test
          WHERE     p.pol_num = c.pol_num
                AND p.run_date = c.run_date
                AND p.pol_num = c.pol_num
                AND p.pol_num = TRIM (v_policy_number)
                AND sds_line = TRIM (v_user_line)
                AND cov_code = TRIM (v_cov_code)
                --    and P.eff_date = v_eff_date --dmb
                --    and p.exp_date = v_exp_date ---dmb

                AND p.eff_date <= v_loss_date --   TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.exp_date >= v_loss_date --TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.change_date <= v_loss_date --TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.run_date <= v_loss_date --TO_DATE('04/27/2014', 'mm/dd/yyyy')
                AND p.run_date =
                       (SELECT MAX (p2.run_date)
                          FROM staging.history_wang_policy p2 --test 999
                         --    and p.run_date = (select max(p2.run_date) from staging.history_wang_policy p2 --test
                         WHERE     p2.pol_num = p.pol_num
                               AND p2.eff_date = p.eff_date
                               AND p2.exp_date = p.exp_date
                               AND P2.CHANGE_DATE = p.change_date
                               AND p2.run_date <= v_loss_date)
                AND p.change_date =
                       (SELECT MAX (p3.change_date)
                          FROM staging.history_wang_policy p3 --test 999
                         ---    and p.change_date = (select max(p3.change_date) from staging.history_wang_policy p3
                         WHERE     p3.pol_num = p.pol_num
                               AND p3.eff_date = p.eff_date
                               AND p3.exp_date = p.exp_date
                               AND p3.run_date = p.run_date
                               AND p3.change_date <= v_loss_date);


      one_cov_master   cov_master%ROWTYPE;
      v_rowcount       NUMBER;
   BEGIN
      v_err_loc := 'get_limits_master_for_loss';
      v_rowcount := 0;

      OPEN cov_master;

      LOOP
         EXIT WHEN cov_master%NOTFOUND OR v_rowcount > 0;

         FETCH cov_master INTO one_cov_master;

         IF TRIM (v_cov_code) = '800' AND v_user_line = '24'
         THEN
            v_limit := TRIM (TO_CHAR (one_cov_master.cov_limit));
         END IF;

         IF TRIM (v_cov_code) = '802' AND v_user_line = '24'
         THEN
            v_limit := TRIM (TO_CHAR (one_cov_master.cov_limit));
         END IF;


         IF TRIM (v_cov_code) = '804' AND v_user_line = '24'
         THEN
            CASE one_cov_master.cov_limit
               WHEN 2000000
               THEN
                  v_limit := '7';
               WHEN 1000000
               THEN
                  v_limit := '6';
               WHEN 500000
               THEN
                  v_limit := '5';
               WHEN 300000
               THEN
                  v_limit := '3';
               WHEN 100000
               THEN
                  v_limit := '1';
               ELSE
                  v_limit := '9';
            END CASE;
         END IF;

         IF TRIM (v_cov_code) = '805' AND v_user_line = '24'
         THEN
            CASE one_cov_master.cov_limit
               WHEN 5000
               THEN
                  v_limit := '5';
               WHEN 3000
               THEN
                  v_limit := '3';
               WHEN 2500
               THEN
                  v_limit := '2';
               ELSE
                  v_limit := '9';
            END CASE;
         END IF;

         IF TRIM (v_cov_code) = '401' AND v_user_line = '44'
         THEN
            CASE one_cov_master.cov_limit
               WHEN 2000000
               THEN
                  v_limit := '7';
               WHEN 1000000
               THEN
                  v_limit := '6';
               WHEN 500000
               THEN
                  v_limit := '5';
               WHEN 300000
               THEN
                  v_limit := '3';
               WHEN 100000
               THEN
                  v_limit := '1';
               ELSE
                  v_limit := '9';
            END CASE;
         END IF;

         v_rowcount := v_rowcount + 1;
      END LOOP;

      CLOSE cov_master;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_limit := '9';
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || '            :'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || ' ' || V_ERR_MSSG || ' ' || v_policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;


   PROCEDURE get_limits_master (v_eff_date        IN     DATE,
                                v_exp_date        IN     DATE,
                                v_actg_date       IN     DATE,
                                v_chg_date        IN     DATE,
                                v_user_line       IN     VARCHAR2,
                                v_policy_number   IN     VARCHAR2,
                                v_cov_code        IN     VARCHAR2,
                                v_limit              OUT VARCHAR2)
   IS
      v_procname       RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                          := 'ND_BUREAU.GET_LIMITS_MASTER';
      v_err_mssg       VARCHAR2 (200);
      v_err_loc        VARCHAR2 (100);

      CURSOR cov_master
      IS
         SELECT c.cov_limit
           FROM staging.history_wang_policy p,            ---test 999
                staging.history_wang_coverage_record c  ---- test 999
          ---      from staging.history_wang_policy p,
          ---        staging.history_wang_coverage_record c
          WHERE     p.pol_num = c.pol_num
                AND p.run_date = c.run_date
                AND p.pol_num = c.pol_num
                AND p.pol_num = TRIM (v_policy_number)
                AND sds_line = TRIM (v_user_line)
                AND cov_code = TRIM (v_cov_code)
                AND eff_date = v_eff_date
                AND exp_date = v_exp_date;
                --- AND change_date = v_chg_date
                --- AND p.run_date = v_actg_date;

      one_cov_master   cov_master%ROWTYPE;
      v_rowcount       NUMBER;
   BEGIN
      v_err_loc := 'get_limits_master';
      v_rowcount := 0;

      OPEN cov_master;

      LOOP
         EXIT WHEN cov_master%NOTFOUND OR v_rowcount > 0;

         FETCH cov_master INTO one_cov_master;

         IF TRIM (v_cov_code) = '834' AND v_user_line = '26'
         THEN
            CASE one_cov_master.cov_limit
               WHEN 3000000
               THEN
                  v_limit := '13';
               WHEN 2000000
               THEN
                  v_limit := '12';
               WHEN 1500000
               THEN
                  v_limit := '11';
               WHEN 1000000
               THEN
                  v_limit := '10';
               WHEN 500000
               THEN
                  v_limit := '06';
               WHEN 300000
               THEN
                  v_limit := '05';
               WHEN 200000
               THEN
                  v_limit := '04';
               WHEN 100000
               THEN
                  v_limit := '03';
               WHEN 50000
               THEN
                  v_limit := '02';
               WHEN 25000
               THEN
                  v_limit := '01';
               ELSE
                  v_limit := '99';
            END CASE;
         END IF;

         IF TRIM (v_cov_code) = '835' AND v_user_line = '26'
         THEN
            v_limit := TO_CHAR (one_cov_master.cov_limit / 1000);
         END IF;

         IF TRIM (v_cov_code) = '804' AND v_user_line = '24'
         THEN
            CASE one_cov_master.cov_limit
               WHEN 2000000
               THEN
                  v_limit := '7';
               WHEN 1000000
               THEN
                  v_limit := '6';
               WHEN 500000
               THEN
                  v_limit := '5';
               WHEN 300000
               THEN
                  v_limit := '3';
               WHEN 100000
               THEN
                  v_limit := '1';
               ELSE
                  v_limit := '9';
            END CASE;
         END IF;

         IF TRIM (v_cov_code) = '805' AND v_user_line = '24'
         THEN
            CASE one_cov_master.cov_limit
               WHEN 5000
               THEN
                  v_limit := '5';
               WHEN 3000
               THEN
                  v_limit := '3';
               WHEN 2500
               THEN
                  v_limit := '2';
               ELSE
                  v_limit := '9';
            END CASE;
         END IF;

         IF TRIM (v_cov_code) = '401' AND v_user_line = '44'
         THEN
            CASE one_cov_master.cov_limit
               WHEN 2000000
               THEN
                  v_limit := '7';
               WHEN 1000000
               THEN
                  v_limit := '6';
               WHEN 500000
               THEN
                  v_limit := '5';
               WHEN 300000
               THEN
                  v_limit := '3';
               WHEN 100000
               THEN
                  v_limit := '1';
               ELSE
                  v_limit := '9';
            END CASE;
         END IF;

         v_rowcount := v_rowcount + 1;
      END LOOP;

      CLOSE cov_master;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_limit := '9';
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || '            :'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || ' ' || V_ERR_MSSG || ' ' || v_policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;



   PROCEDURE get_trans_code (v_in_trans_code     IN     VARCHAR2,
                             v_in_old_new_stat   IN     VARCHAR2,
                             v_in_chg_date       IN     DATE,
                             v_in_eff_date       IN     DATE,
                             v_out_trans_code       OUT VARCHAR2)
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.GET_TRANS_CODE';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      IF    (v_in_trans_code = '10')
         OR (v_in_trans_code = '40')
         OR (v_in_trans_code = '80')
      THEN                         -- TRANS_CODE  need to comback to this test
         v_out_TRANS_CODE := '1';
      ELSE
         IF v_in_trans_code = '60'
         THEN
            v_out_TRANS_CODE := '2';
         ELSE
            IF v_in_trans_code = '20'
            THEN
               IF v_in_chg_date = v_in_eff_date
               THEN                                --change on the effect date
                  IF v_in_old_new_stat = '0'
                  THEN                                  -- backout/offset stat
                     v_out_TRANS_CODE := '2';
                  ELSE
                     v_out_TRANS_CODE := '1';
                  END IF;
               ELSE
                  --- mid term change
                  --    if   ho_stat.written_prem > 0 then
                  -- if v_in_old_new_stat = '1' then-- on stat
                  --       v_out_trans_code := '3';
                  --   else
                  --       v_out_trans_code := '4';
                  --   end if;
                  --end if;
                  v_out_trans_code := 'X';
               END IF;
            END IF;
         END IF;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || '            :'
            || SQLERRM (SQLCODE);


         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || ' ' || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE get_homeowners_stat (v_company           IN     VARCHAR2,
                                  v_state_cd          IN     VARCHAR2,
                                  v_group_line        IN     VARCHAR2,
                                  v_eff_date          IN     DATE,
                                  v_exp_date          IN     DATE,
                                  v_book_date         IN     DATE,
                                  v_actg_date         IN     DATE,
                                  v_chg_date          IN     DATE,
                                  v_item_state_cd     IN     VARCHAR2,
                                  v_location          IN     VARCHAR2,
                                  v_item_num          IN     VARCHAR2,
                                  v_policy_number     IN     VARCHAR2,
                                  v_old_new_stat      IN     VARCHAR2,
                                  v_proc_ctr          IN     VARCHAR2,
                                  v_trans_code        IN     VARCHAR2,
                                  v_sdac_ind          IN     VARCHAR2,
                                  v_item_dwell_code      OUT VARCHAR2,
                                  v_item_terr            OUT VARCHAR2,
                                  v_item_families        OUT VARCHAR2,
                                  v_item_row_town        OUT VARCHAR2)
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.GET_HOMEOWNERS_ITEM_STAT';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);

      CURSOR one_ho_stat
      IS
         SELECT B.TERR,
                B.FAMILIES,
                B.TOWN_ROWHOUSE,
                B.DWELL_CODE
           FROM rpt_policy_ho_stat B
          WHERE     (B.end_num) = '        '
                AND TRIM (B.company) = TRIM (v_company)
                AND TRIM (B.POLICY_NUMBER) = TRIM (v_policy_number)
                AND TRIM (B.STATE_CD) = TRIM (v_state_cd)
                AND TRIM (B.GROUP_LINE) = TRIM (v_group_line)
                AND TRIM (B.EFF_DATE) = TRIM (v_eff_date)
                AND TRIM (B.EXP_DATE) = TRIM (V_EXP_DATE)
                AND TRIM (B.BOOK_DATE) = TRIM (V_BOOK_DATE)
                AND TRIM (B.ACTG_DATE) = TRIM (V_ACTG_DATE)
                AND TRIM (B.CHG_DATE) = TRIM (V_CHG_DATE)
                AND TRIM (B.item_state_cd) = TRIM (V_item_state_cd)
                AND TRIM (B.ITEM_NUM) = TRIM (V_ITEM_NUM)
                AND TRIM (B.LOCATION) = TRIM (V_LOCATION)
                AND TRIM (B.USER_LINE) = '24'
                AND TRIM (B.OLD_NEW_STAT) = TRIM (v_old_new_stat);

      ho_stat      one_ho_stat%ROWTYPE;
      v_rowcount   NUMBER;
   BEGIN
      v_rowcount := 0;

      OPEN one_ho_stat;

      LOOP
         FETCH one_ho_stat INTO ho_stat;

         EXIT WHEN one_ho_stat%NOTFOUND OR v_rowcount > 0;

         v_item_terr := ho_stat.terr;
         v_item_families := ho_stat.families;
         v_item_row_town := ho_stat.town_rowhouse;
         v_item_dwell_code := ho_stat.dwell_code;
         v_rowcount := v_rowcount + 1;
      END LOOP;

      CLOSE one_ho_stat;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_item_terr := ' ';
         v_item_families := ' ';
         v_item_row_town := ' ';
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || '            :'
            || SQLERRM (SQLCODE);


         DBMS_OUTPUT.PUT_LINE (
            V_PROCNAME || ' ' || V_ERR_MSSG || ' ' || v_policy_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   /* this code works but takes way to long
         PROCEDURE GET_ENDORSEMENT_STAT (v_company in varchar2,
                                        v_state_cd in varchar2,
                                        v_group_line in varchar2,
                                        v_eff_date in date,
                                        v_exp_date in date,
                                        v_book_date in date,
                                        v_actg_date in date,
                                        v_chg_date in date,
                                        v_item_state_cd in varchar2,
                                        v_location in varchar2,
                                        v_user_line in varchar2,
                                        v_item_num in varchar2,
                                        v_policy_number in varchar2,
                                        v_cov_code in varchar2,
                                        v_old_new_stat in varchar2,
                                        v_endorsement_num in varchar2,
                                        v_proc_ctr in varchar2,
                                        v_trans_code in varchar2,
                                        v_sdac_ind in varchar2,
                                        v_return_value out varchar2,
                                        v_return_parm1 out varchar2)

                               IS

            v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                         := 'ND_BUREAU. GET_ENDORSEMENT_STAT';
             v_err_mssg   VARCHAR2 (200);
             v_err_loc    VARCHAR2 (100);

          begin
                v_err_loc := 'get_endorsement_stat';
                v_return_value := 'N';
                FOR some_rec IN ( select b1.end_num,  B1.AMS_PARM_1
                                   from rpt_policy_ho_stat B1
                  where  trim(B1.end_num) in trim(v_endorsement_num )
                   AND trim(b1.company) = trim(v_company)
                   AND TRIM(b1.POLICY_NUMBER) = trim(v_policy_number)
                   AND TRIM(B1.STATE_CD) = trim(v_state_cd)
                   AND TRIM(B1.GROUP_LINE) = trim (v_group_line)
                   AND TRIM(B1.EFF_DATE) = trim (v_eff_date)
                   AND TRIM(B1.EXP_DATE) = TRIM(V_EXP_DATE)
                   AND TRIM(B1.BOOK_DATE) = TRIM(V_BOOK_DATE)
                   AND TRIM(b1.ACTG_DATE) = TRIM(V_ACTG_DATE)
                   AND TRIM(B1.CHG_DATE) = TRIM(V_CHG_DATE)
                   AND TRIM(B1.item_state_cd) = TRIM(V_item_state_cd)

                   AND TRIM(B1.ITEM_NUM) = TRIM(V_ITEM_NUM)
                   AND TRIM(B1.LOCATION) = TRIM(V_LOCATION)
                   AND TRIM(B1.USER_LINE) = TRIM (V_USER_LINE)
                   and trim(b1.cov_code) = trim(v_cov_code)
                    and trim(b1.old_new_stat) = trim(v_old_new_stat))
                    loop
                       if trim(some_rec.end_num) = trim(v_endorsement_num) then
                           v_return_value:= 'Y';
                           v_return_parm1:= trim(some_rec.AMS_PARM_1);
                           EXIT;
                       end if;
                   END loop;

          EXCEPTION
          WHEN NO_DATA_FOUND then
             v_return_value := 'N';

          WHEN OTHERS
          THEN
            v_err_fl := 1;
            v_err_MSSG :=
                  'FAILED at:'
               || v_err_loc
               || '-'
               || SQLCODE
               || ':'
               || SQLERRM (SQLCODE);

                 DBMS_OUTPUT.PUT_LINE (V_PROCNAME||' '||
                                           V_ERR_MSSG ||' '||
                                           v_policy_number||' '||
                                           v_endorsement_num );
                 rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);

            end;
      */
   PROCEDURE summarize_prem_mso_fo_data
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMMARIZE_MSO_FO_DATA';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc :=
         'At First Insert dbohlman.RPT_POLICY_MSO_FO_STAT_SUMM statement';

      INSERT INTO rpt_policy_mso_fo_stat_summ
           SELECT DISTINCT COMPANY_ID,
                           TRANS_TYPE,
                           ORIG_TRANS_TYPE,
                           STAT_PLAN,
                           ACCOUNTING_DATE,
                           POLICY_EFF_DATE,
                           TRANS_EFF_DATE,
                           TRANS_EXP_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           ' ',
                           PROT_RATING_TERR,
                           POLICY_FORM,
                           OCCUPANCY_CLASS,
                           PROP_LIAB_FIELDS,
                           RATE_MOD_FACTOR,
                           ' ',
                           SUM (PREMIUM_AMOUNT),
                           MSO_MODULE,
                           POLICY_NUMBER,
                           ZIP_CODE,
                           ' ',
                           LOSS_COST_MULT,
                           ' ',
                           WINDSTORM_DED,
                           ' '
                          FROM rpt_policy_mso_fo_stat
         GROUP BY COMPANY_ID,
                  TRANS_TYPE,
                  ORIG_TRANS_TYPE,
                  STAT_PLAN,
                  ACCOUNTING_DATE,
                  POLICY_EFF_DATE,
                  TRANS_EFF_DATE,
                  TRANS_EXP_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  PROT_RATING_TERR,
                  POLICY_FORM,
                  OCCUPANCY_CLASS,
                  PROP_LIAB_FIELDS,
                  RATE_MOD_FACTOR,
                  MSO_MODULE,
                  POLICY_NUMBER,
                  ZIP_CODE,
                  LOSS_COST_MULT,
                  WINDSTORM_DED;

     
      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE summarize_prem_mso_ho_data
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMMARIZE_MSO_HO_DATA';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc :=
         'At First Insert dbohlman.RPT_POLICY_MSO_HO_STAT_SUMM statement';

      INSERT INTO rpt_policy_mso_ho_stat_summ
           SELECT DISTINCT COMPANY_ID,
                           TRANS_TYPE,
                           ORIG_TRANS_TYPE,
                           STAT_PLAN,
                           ACCOUNTING_DATE,
                           POLICY_EFF_DATE,
                           TRANS_EFF_DATE,
                           TRANS_EXP_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           ' ',
                           ' ',
                           PROT_RATING_TERR,
                           POLICY_FORM,
                           AMOUNT_OF_INS,
                           PROGRAM_CODE,
                           NUM_OF_FAMILIES,
                           CONSTRUCTION,
                           LIAB_LIMIT_COVE,
                           DEDUCTIBLE_SIZE,
                           COVERAGE,
                           TERR_CODE,
                           ' ',
                           RATE_SET,
                           PCT_OF_MANUAL,
                           ' ',
                           SUM (PREMIUM_AMOUNT),
                           MSO_MODULE,
                           POLICY_NUMBER,
                           ZIP_CODE,
                           ZIP_CODE2,
                           ' ',
                           LOSS_COST_MULT,
                           INSURANCE_SCORE,
                           WINDSTORM_DED,
                           ' ',
                           ' ',
                           ' ',
                           ---0507         ALAE,
                           ' ',
                           TYPE_OF_BUSINESS,
                           YEAR_OF_CONSTRUCTION,
                           MISC_END,
                           ' '
             FROM rpt_policy_mso_ho_stat
         GROUP BY COMPANY_ID,
                  Trans_type,
                  orig_trans_type,
                  STAT_PLAN,
                  ACCOUNTING_DATE,
                  POLICY_EFF_DATE,
                  TRANS_EFF_DATE,
                  TRANS_EXP_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  PROT_RATING_TERR,
                  POLICY_FORM,
                  AMOUNT_OF_INS,
                  PROGRAM_CODE,
                  NUM_OF_FAMILIES,
                  CONSTRUCTION,
                  LIAB_LIMIT_COVE,
                  DEDUCTIBLE_SIZE,
                  COVERAGE,
                  TERR_CODE,
                  RATE_SET,
                  PCT_OF_MANUAL,
                  MSO_MODULE,
                  POLICY_NUMBER,
                  ZIP_CODE,
                  ZIP_CODE2,
                  LOSS_COST_MULT,
                  INSURANCE_SCORE,
                  WINDSTORM_DED,
                  --00507                          ALAE,
                  TYPE_OF_BUSINESS,
                  YEAR_OF_CONSTRUCTION,
                  MISC_END;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE summ_fo_data_again
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMM_FO_DATA_AGAIN';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);

      CURSOR all_fo_stat
      IS
           SELECT DISTINCT COMPANY_ID,
                           --                TRANS_TYPE ,
                           ORIG_TRANS_TYPE,
                           STAT_PLAN,
                           ACCOUNTING_DATE,
                           POLICY_EFF_DATE,
                           TRANS_EFF_DATE,
                           TRANS_EXP_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           PROT_RATING_TERR,
                           POLICY_FORM,
                           OCCUPANCY_CLASS,
                           PROP_LIAB_FIELDS,
                           RATE_MOD_FACTOR,
                           MSO_MODULE,
                           POLICY_NUMBER,
                           ZIP_CODE,
                           LOSS_COST_MULT,
                           WINDSTORM_DED
             FROM rpt_policy_mso_fo_stat_summ
            WHERE orig_trans_type = '20'
         GROUP BY COMPANY_ID,
                  --     TRANS_TYPE ,
                  ORIG_TRANS_TYPE,
                  STAT_PLAN,
                  ACCOUNTING_DATE,
                  POLICY_EFF_DATE,
                  TRANS_EFF_DATE,
                  TRANS_EXP_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  PROT_RATING_TERR,
                  POLICY_FORM,
                  OCCUPANCY_CLASS,
                  PROP_LIAB_FIELDS,
                  RATE_MOD_FACTOR,
                  MSO_MODULE,
                  POLICY_NUMBER,
                  ZIP_CODE,
                  LOSS_COST_MULT,
                  WINDSTORM_DED
           HAVING SUM (PREMIUM_AMOUNT) = 0;

      fo_stat      all_fo_stat%ROWTYPE;
   BEGIN
      --Need to summarize further. This only affects changes. If no change on the record and
      -- the next premium change is 0, don't send these records.

      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'summ_fo_data_again';

      OPEN all_fo_stat;

      LOOP
         FETCH all_fo_stat INTO fo_stat;

         EXIT WHEN all_fo_stat%NOTFOUND;


         DELETE FROM rpt_policy_mso_fo_stat_summ
               WHERE     rpt_policy_mso_fo_stat_summ.COMPANY_ID =
                            fo_stat.COMPANY_ID
                     AND --    TRANS_TYPE,
                         rpt_policy_mso_fo_stat_summ.ORIG_TRANS_TYPE =
                            fo_stat.ORIG_TRANS_TYPE
                     AND rpt_policy_mso_fo_stat_summ.STAT_PLAN =
                            fo_stat.STAT_PLAN
                     AND rpt_policy_mso_fo_stat_summ.ACCOUNTING_DATE =
                            fo_stat.ACCOUNTING_DATE
                     AND rpt_policy_mso_fo_stat_summ.POLICY_EFF_DATE =
                            fo_stat.POLICY_EFF_DATE
                     AND rpt_policy_mso_fo_stat_summ.TRANS_EFF_DATE =
                            fo_stat.TRANS_EFF_DATE
                     AND rpt_policy_mso_fo_stat_summ.TRANS_EXP_DATE =
                            fo_stat.TRANS_EXP_DATE
                     AND rpt_policy_mso_fo_stat_summ.STATE = fo_stat.STATE
                     AND rpt_policy_mso_fo_stat_summ.ASL = fo_stat.ASL
                     AND rpt_policy_mso_fo_stat_summ.SUBLINE =
                            fo_stat.SUBLINE
                     AND rpt_policy_mso_fo_stat_summ.PROT_RATING_TERR =
                            fo_stat.PROT_RATING_TERR
                     AND rpt_policy_mso_fo_stat_summ.POLICY_FORM =
                            fo_stat.POLICY_FORM
                     AND rpt_policy_mso_fo_stat_summ.OCCUPANCY_CLASS =
                            FO_STAT.OCCUPANCY_CLASS
                     AND rpt_policy_mso_fo_stat_summ.PROP_LIAB_FIELDS =
                            FO_STAT.PROP_LIAB_FIELDS
                     AND rpt_policy_mso_fo_stat_summ.RATE_MOD_FACTOR =
                            FO_STAT.RATE_MOD_FACTOR
                     AND rpt_policy_mso_fo_stat_summ.MSO_MODULE =
                            FO_STAT.MSO_MODULE
                     AND rpt_policy_mso_fo_stat_summ.POLICY_NUMBER =
                            FO_STAT.POLICY_NUMBER
                     AND rpt_policy_mso_fo_stat_summ.ZIP_CODE =
                            FO_STAT.ZIP_CODE
                     AND rpt_policy_mso_fo_stat_summ.LOSS_COST_MULT =
                            FO_STAT.LOSS_COST_MULT
                     AND rpt_policy_mso_fo_stat_summ.WINDSTORM_DED =
                            FO_STAT.WINDSTORM_DED;
      END LOOP;

      CLOSE all_fo_stat;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;


   PROCEDURE summ_ho_data_again
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMM_HO_DATA_AGAIN';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);

      CURSOR all_ho_stat
      IS
           SELECT DISTINCT COMPANY_ID,
                           --    TRANS_TYPE,
                           ORIG_TRANS_TYPE,
                           STAT_PLAN,
                           ACCOUNTING_DATE,
                           POLICY_EFF_DATE,
                           TRANS_EFF_DATE,
                           TRANS_EXP_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           PROT_RATING_TERR,
                           POLICY_FORM,
                           AMOUNT_OF_INS,
                           PROGRAM_CODE,
                           NUM_OF_FAMILIES,
                           CONSTRUCTION,
                           LIAB_LIMIT_COVE,
                           DEDUCTIBLE_SIZE,
                           COVERAGE,
                           TERR_CODE,
                           RATE_SET,
                           PCT_OF_MANUAL,
                           MSO_MODULE,
                           POLICY_NUMBER,
                           ZIP_CODE,
                           ZIP_CODE2,
                           LOSS_COST_MULT,
                           INSURANCE_SCORE,
                           WINDSTORM_DED,
                           FILLER_5,
                           --0507       ALAE,
                           TYPE_OF_BUSINESS,
                           YEAR_OF_CONSTRUCTION,
                           MISC_END
             FROM rpt_policy_mso_ho_stat_summ
            WHERE orig_trans_type = '20'
         GROUP BY COMPANY_ID,
                  --    Trans_type,
                  orig_trans_type,
                  STAT_PLAN,
                  ACCOUNTING_DATE,
                  POLICY_EFF_DATE,
                  TRANS_EFF_DATE,
                  TRANS_EXP_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  PROT_RATING_TERR,
                  POLICY_FORM,
                  AMOUNT_OF_INS,
                  PROGRAM_CODE,
                  NUM_OF_FAMILIES,
                  CONSTRUCTION,
                  LIAB_LIMIT_COVE,
                  DEDUCTIBLE_SIZE,
                  COVERAGE,
                  TERR_CODE,
                  RATE_SET,
                  PCT_OF_MANUAL,
                  MSO_MODULE,
                  POLICY_NUMBER,
                  ZIP_CODE,
                  ZIP_CODE2,
                  LOSS_COST_MULT,
                  INSURANCE_SCORE,
                  WINDSTORM_DED,
                  FILLER_5,
                  --0705            ALAE,
                  TYPE_OF_BUSINESS,
                  YEAR_OF_CONSTRUCTION,
                  MISC_END
           HAVING SUM (PREMIUM_AMOUNT) = 0;

      ho_stat      all_ho_stat%ROWTYPE;
   BEGIN
      --Need to summarize further. This only affects changes. If no change on the record and
      -- the next premium change is 0, don't send these records.

      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'summ_ho_data_again';

      OPEN all_ho_stat;

      LOOP
         FETCH all_ho_stat INTO ho_stat;

         EXIT WHEN all_ho_stat%NOTFOUND;


         DELETE FROM rpt_policy_mso_ho_stat_summ
               WHERE     rpt_policy_mso_ho_stat_summ.COMPANY_ID =
                            ho_stat.COMPANY_ID
                     AND --    TRANS_TYPE,
                         rpt_policy_mso_ho_stat_summ.ORIG_TRANS_TYPE =
                            ho_stat.ORIG_TRANS_TYPE
                     AND rpt_policy_mso_ho_stat_summ.STAT_PLAN =
                            ho_stat.STAT_PLAN
                     AND rpt_policy_mso_ho_stat_summ.ACCOUNTING_DATE =
                            ho_stat.ACCOUNTING_DATE
                     AND rpt_policy_mso_ho_stat_summ.POLICY_EFF_DATE =
                            ho_stat.POLICY_EFF_DATE
                     AND rpt_policy_mso_ho_stat_summ.TRANS_EFF_DATE =
                            ho_stat.TRANS_EFF_DATE
                     AND rpt_policy_mso_ho_stat_summ.TRANS_EXP_DATE =
                            ho_stat.TRANS_EXP_DATE
                     AND rpt_policy_mso_ho_stat_summ.STATE = ho_stat.STATE
                     AND rpt_policy_mso_ho_stat_summ.ASL = ho_stat.ASL
                     AND rpt_policy_mso_ho_stat_summ.SUBLINE =
                            ho_stat.SUBLINE
                     AND rpt_policy_mso_ho_stat_summ.PROT_RATING_TERR =
                            ho_stat.PROT_RATING_TERR
                     AND rpt_policy_mso_ho_stat_summ.POLICY_FORM =
                            ho_stat.POLICY_FORM
                     AND rpt_policy_mso_ho_stat_summ.AMOUNT_OF_INS =
                            ho_stat.AMOUNT_OF_INS
                     AND rpt_policy_mso_ho_stat_summ.PROGRAM_CODE =
                            ho_stat.PROGRAM_CODE
                     AND rpt_policy_mso_ho_stat_summ.NUM_OF_FAMILIES =
                            ho_stat.NUM_OF_FAMILIES
                     AND rpt_policy_mso_ho_stat_summ.CONSTRUCTION =
                            ho_stat.CONSTRUCTION
                     AND rpt_policy_mso_ho_stat_summ.LIAB_LIMIT_COVE =
                            ho_stat.LIAB_LIMIT_COVE
                     AND rpt_policy_mso_ho_stat_summ.DEDUCTIBLE_SIZE =
                            ho_stat.DEDUCTIBLE_SIZE
                     AND rpt_policy_mso_ho_stat_summ.COVERAGE =
                            ho_stat.COVERAGE
                     AND rpt_policy_mso_ho_stat_summ.TERR_CODE =
                            ho_stat.TERR_CODE
                     AND rpt_policy_mso_ho_stat_summ.RATE_SET =
                            ho_stat.RATE_SET
                     AND rpt_policy_mso_ho_stat_summ.PCT_OF_MANUAL =
                            ho_stat.PCT_OF_MANUAL
                     AND --rpt_policy_mso_ho_stat_summ a.summ_prem = ho_stat.SUMM_PREM and
                         rpt_policy_mso_ho_stat_summ.MSO_MODULE =
                            ho_stat.MSO_MODULE
                     AND rpt_policy_mso_ho_stat_summ.POLICY_NUMBER =
                            ho_stat.POLICY_NUMBER
                     AND rpt_policy_mso_ho_stat_summ.ZIP_CODE =
                            ho_stat.ZIP_CODE
                     AND rpt_policy_mso_ho_stat_summ.ZIP_CODE2 =
                            ho_stat.ZIP_CODE2
                     AND rpt_policy_mso_ho_stat_summ.LOSS_COST_MULT =
                            ho_stat.LOSS_COST_MULT
                     AND rpt_policy_mso_ho_stat_summ.INSURANCE_SCORE =
                            ho_stat.INSURANCE_SCORE
                     AND rpt_policy_mso_ho_stat_summ.WINDSTORM_DED =
                            ho_stat.WINDSTORM_DED
                     AND rpt_policy_mso_ho_stat_summ.FILLER_5 =
                            ho_stat.FILLER_5
                     AND --0507       rpt_policy_mso_ho_stat_summ.ALAE = ho_stat.ALAE and
                         rpt_policy_mso_ho_stat_summ.TYPE_OF_BUSINESS =
                            ho_stat.TYPE_OF_BUSINESS
                     AND rpt_policy_mso_ho_stat_summ.YEAR_OF_CONSTRUCTION =
                            ho_stat.YEAR_OF_CONSTRUCTION
                     AND rpt_policy_mso_ho_stat_summ.MISC_END =
                            ho_stat.MISC_END;
      END LOOP;

      CLOSE all_ho_stat;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;


   PROCEDURE summarize_prem_mso_im_data
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMMARIZE_PREM_MSO_IM_DATA';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'At First Insert RPT_POLICY_MSO_IM_STAT_SUMM statement';

      INSERT INTO rpt_policy_mso_im_stat_summ
           SELECT DISTINCT COMPANY_ID,
                           TRANS_TYPE,
                           ORIG_TRANS_TYPE,
                           STAT_PLAN,
                           ACCOUNTING_DATE,
                           POLICY_EFF_DATE,
                           TRANS_EFF_DATE,
                           TRANS_EXP_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           ' ',
                           TERR_CODE,
                           TYPE_OF_POLICY,
                           CLASS_CODE,
                           ' ',
                           ' ',
                           SUM (PREMIUM_AMOUNT),
                           MSO_MODULE,
                           POLICY_NUMBER,
                           ' '
             FROM rpt_policy_mso_im_stat
         GROUP BY COMPANY_ID,
                  TRANS_TYPE,
                  ORIG_TRANS_TYPE,
                  STAT_PLAN,
                  ACCOUNTING_DATE,
                  POLICY_EFF_DATE,
                  TRANS_EFF_DATE,
                  TRANS_EXP_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  TERR_CODE,
                  TYPE_OF_POLICY,
                  CLASS_CODE,
                  MSO_MODULE,
                  POLICY_NUMBER;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE summ_im_data_again
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMM_IM_DATA_AGAIN';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);

      CURSOR all_im_stat
      IS
           SELECT DISTINCT COMPANY_ID,
                           --- TRANS_TYPE,
                           ORIG_TRANS_TYPE,
                           STAT_PLAN,
                           ACCOUNTING_DATE,
                           POLICY_EFF_DATE,
                           TRANS_EFF_DATE,
                           TRANS_EXP_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           TERR_CODE,
                           TYPE_OF_POLICY,
                           CLASS_CODE,
                           SUM (PREMIUM_AMOUNT) AS summ_prem,
                           MSO_MODULE,
                           POLICY_NUMBER,
                           FILLER_2
             FROM rpt_policy_mso_im_stat_summ
            WHERE orig_trans_type = '20'
         GROUP BY COMPANY_ID,
                  --- TRANS_TYPE,
                  ORIG_TRANS_TYPE,
                  STAT_PLAN,
                  ACCOUNTING_DATE,
                  POLICY_EFF_DATE,
                  TRANS_EFF_DATE,
                  TRANS_EXP_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  TERR_CODE,
                  TYPE_OF_POLICY,
                  CLASS_CODE,
                  MSO_MODULE,
                  POLICY_NUMBER,
                  FILLER_2
           HAVING SUM (PREMIUM_AMOUNT) = 0;

      im_stat      all_im_stat%ROWTYPE;
   BEGIN
      --Need to summarize further. This only affects changes. If no change on the record and
      -- the next premium change is 0, don't send these records.

      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'summ_im_data_again';

      OPEN all_im_stat;

      LOOP
         FETCH all_im_stat INTO im_stat;

         EXIT WHEN all_im_stat%NOTFOUND;

         DELETE FROM rpt_policy_mso_im_stat_summ
               WHERE     rpt_policy_mso_im_stat_summ.COMPANY_ID =
                            im_stat.COMPANY_ID
                     AND --- TRANS_TYPE,
                         rpt_policy_mso_im_stat_summ.ORIG_TRANS_TYPE =
                            im_stat.ORIG_TRANS_TYPE
                     AND rpt_policy_mso_im_stat_summ.STAT_PLAN =
                            im_stat.STAT_PLAN
                     AND rpt_policy_mso_im_stat_summ.ACCOUNTING_DATE =
                            im_stat.ACCOUNTING_DATE
                     AND rpt_policy_mso_im_stat_summ.POLICY_EFF_DATE =
                            im_stat.POLICY_EFF_DATE
                     AND rpt_policy_mso_im_stat_summ.TRANS_EFF_DATE =
                            im_stat.TRANS_EFF_DATE
                     AND rpt_policy_mso_im_stat_summ.TRANS_EXP_DATE =
                            im_stat.TRANS_EXP_DATE
                     AND rpt_policy_mso_im_stat_summ.STATE = im_stat.STATE
                     AND rpt_policy_mso_im_stat_summ.ASL = im_stat.ASL
                     AND rpt_policy_mso_im_stat_summ.SUBLINE =
                            im_stat.SUBLINE
                     AND rpt_policy_mso_im_stat_summ.TERR_CODE =
                            im_stat.TERR_CODE
                     AND rpt_policy_mso_im_stat_summ.TYPE_OF_POLICY =
                            im_stat.TYPE_OF_POLICY
                     AND rpt_policy_mso_im_stat_summ.CLASS_CODE =
                            im_stat.CLASS_CODE
                     AND --    rpt_policy_mso_im_stat_summ.sum(PREMIUM_AMOUNT) as summ_prem,
                         rpt_policy_mso_im_stat_summ.MSO_MODULE =
                            im_stat.MSO_MODULE
                     AND rpt_policy_mso_im_stat_summ.POLICY_NUMBER =
                            im_stat.POLICY_NUMBER
                     AND rpt_policy_mso_im_stat_summ.FILLER_2 =
                            im_stat.FILLER_2;
      END LOOP;

      CLOSE all_im_stat;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE summarize_prem_mso_pu_data
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMMARIZE_PREM_MSO_PU_DATA';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'At First Insert RPT_POLICY_MSO_GL_STAT_SUMM statement';

      INSERT INTO rpt_policy_mso_gl_stat_summ
           SELECT DISTINCT COMPANY_ID,
                           TRANS_TYPE,
                           ORIG_TRANS_TYPE,
                           STAT_PLAN,
                           ACCOUNTING_DATE,
                           POLICY_EFF_DATE,
                           TRANS_EFF_DATE,
                           TRANS_EXP_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           ' ',
                           ' ',
                           POLICY_FORM,
                           LIMIT_LIAB_COV,
                           LIMIT_MED_COV,
                           ' ',
                           NUMBER_FAMILIES,
                           ' ',
                           COV_CODE,
                           TERRITORY_CODE,
                           ' ',
                           PCT_OF_MANUAL,
                           ' ',
                           SUM (PREMIUM_AMOUNT),
                           MSO_MODULE,
                           POLICY_NUMBER,
                           ' ',
                           LOSS_COST_MULT,
                           INSURANCE_SCORE,
                           ' ',
                           CLASS_CODE,
                           ' '
             FROM rpt_policy_mso_gl_stat
         GROUP BY COMPANY_ID,
                  TRANS_TYPE,
                  ORIG_TRANS_TYPE,
                  STAT_PLAN,
                  ACCOUNTING_DATE,
                  POLICY_EFF_DATE,
                  TRANS_EFF_DATE,
                  TRANS_EXP_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  ' ',
                  ' ',
                  POLICY_FORM,
                  LIMIT_LIAB_COV,
                  LIMIT_MED_COV,
                  ' ',
                  NUMBER_FAMILIES,
                  ' ',
                  COV_CODE,
                  TERRITORY_CODE,
                  ' ',
                  PCT_OF_MANUAL,
                  ' ',
                  MSO_MODULE,
                  POLICY_NUMBER,
                  ' ',
                  LOSS_COST_MULT,
                  INSURANCE_SCORE,
                  ' ',
                  CLASS_CODE,
                  ' ';

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE summ_pu_data_again
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMM_PU_DATA_AGAIN';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);

      CURSOR all_pu_stat
      IS
           SELECT DISTINCT COMPANY_ID,
                           --TRANS_TYPE,
                           ORIG_TRANS_TYPE,
                           STAT_PLAN,
                           ACCOUNTING_DATE,
                           POLICY_EFF_DATE,
                           TRANS_EFF_DATE,
                           TRANS_EXP_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           POLICY_FORM,
                           LIMIT_LIAB_COV,
                           LIMIT_MED_COV,
                           NUMBER_FAMILIES,
                           COV_CODE,
                           TERRITORY_CODE,
                           PCT_OF_MANUAL,
                           SUM (PREMIUM_AMOUNT) AS SUMM_PREM,
                           MSO_MODULE,
                           POLICY_NUMBER,
                           LOSS_COST_MULT,
                           INSURANCE_SCORE,
                           FILLER_7,
                           CLASS_CODE
             FROM rpt_policy_mso_gl_stat_summ
            WHERE orig_trans_type = '20'
         GROUP BY COMPANY_ID,
                  ORIG_TRANS_TYPE,
                  STAT_PLAN,
                  ACCOUNTING_DATE,
                  POLICY_EFF_DATE,
                  TRANS_EFF_DATE,
                  TRANS_EXP_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  POLICY_FORM,
                  LIMIT_LIAB_COV,
                  LIMIT_MED_COV,
                  NUMBER_FAMILIES,
                  COV_CODE,
                  TERRITORY_CODE,
                  PCT_OF_MANUAL,
                  MSO_MODULE,
                  POLICY_NUMBER,
                  LOSS_COST_MULT,
                  INSURANCE_SCORE,
                  FILLER_7,
                  CLASS_CODE
           HAVING SUM (PREMIUM_AMOUNT) = 0;

      pu_stat      all_pu_stat%ROWTYPE;
   BEGIN
      --Need to summarize further. This only affects changes. If no change on the record and
      -- the next premium change is 0, don't send these records.

      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'summ_pu_data_again';

      OPEN all_pu_stat;

      LOOP
         FETCH all_pu_stat INTO pu_stat;

         EXIT WHEN all_pu_stat%NOTFOUND;

         DELETE FROM rpt_policy_mso_gl_stat_summ
               WHERE     rpt_policy_mso_gl_stat_summ.COMPANY_ID =
                            pu_stat.COMPANY_ID
                     AND rpt_policy_mso_gl_stat_summ.ORIG_TRANS_TYPE =
                            pu_stat.ORIG_TRANS_TYPE
                     AND rpt_policy_mso_gl_stat_summ.STAT_PLAN =
                            pu_stat.STAT_PLAN
                     AND rpt_policy_mso_gl_stat_summ.ACCOUNTING_DATE =
                            pu_stat.ACCOUNTING_DATE
                     AND rpt_policy_mso_gl_stat_summ.POLICY_EFF_DATE =
                            pu_stat.POLICY_EFF_DATE
                     AND rpt_policy_mso_gl_stat_summ.TRANS_EFF_DATE =
                            pu_stat.TRANS_EFF_DATE
                     AND rpt_policy_mso_gl_stat_summ.TRANS_EXP_DATE =
                            pu_stat.TRANS_EXP_DATE
                     AND rpt_policy_mso_gl_stat_summ.STATE = pu_stat.STATE
                     AND rpt_policy_mso_gl_stat_summ.ASL = pu_stat.ASL
                     AND rpt_policy_mso_gl_stat_summ.SUBLINE =
                            pu_stat.SUBLINE
                     AND rpt_policy_mso_gl_stat_summ.POLICY_FORM =
                            pu_stat.POLICY_FORM
                     AND rpt_policy_mso_gl_stat_summ.LIMIT_LIAB_COV =
                            pu_stat.LIMIT_LIAB_COV
                     AND rpt_policy_mso_gl_stat_summ.LIMIT_MED_COV =
                            pu_stat.LIMIT_MED_COV
                     AND rpt_policy_mso_gl_stat_summ.NUMBER_FAMILIES =
                            pu_stat.NUMBER_FAMILIES
                     AND rpt_policy_mso_gl_stat_summ.COV_CODE =
                            pu_stat.COV_CODE
                     AND rpt_policy_mso_gl_stat_summ.TERRITORY_CODE =
                            pu_stat.TERRITORY_CODE
                     AND rpt_policy_mso_gl_stat_summ.PCT_OF_MANUAL =
                            pu_stat.PCT_OF_MANUAL
                     AND rpt_policy_mso_gl_stat_summ.MSO_MODULE =
                            pu_stat.MSO_MODULE
                     AND rpt_policy_mso_gl_stat_summ.POLICY_NUMBER =
                            pu_stat.POLICY_NUMBER
                     AND rpt_policy_mso_gl_stat_summ.LOSS_COST_MULT =
                            pu_stat.LOSS_COST_MULT
                     AND rpt_policy_mso_gl_stat_summ.INSURANCE_SCORE =
                            pu_stat.INSURANCE_SCORE
                     AND rpt_policy_mso_gl_stat_summ.FILLER_7 =
                            pu_stat.FILLER_7
                     AND rpt_policy_mso_gl_stat_summ.CLASS_CODE =
                            pu_stat.CLASS_CODE;
      END LOOP;

      CLOSE all_pu_stat;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE Update_Mid_Term_Changes
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.UPDATE_MID_TERM_CHANGES';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      --  v_err_loc := 'Update_Mid_Term_Changes - rpt_policy_mso_fo_stat_summ';

      UPDATE rpt_policy_mso_fo_stat_summ
         SET trans_type =
                CASE
                   WHEN PREMIUM_AMOUNT >= 0 THEN 3
                   WHEN PREMIUM_AMOUNT < 0 THEN 4
                END
       WHERE orig_trans_type = '20' AND trans_type = 'X';

      COMMIT;

      --  v_err_loc := 'Update_Mid_Term_Changes - rpt_policy_mso_ho_stat_summ';

      UPDATE rpt_policy_mso_ho_stat_summ
         SET trans_type =
                CASE
                   WHEN PREMIUM_AMOUNT >= 0 THEN 3
                   WHEN PREMIUM_AMOUNT < 0 THEN 4
                END
       WHERE orig_trans_type = '20' AND trans_type = 'X';

      COMMIT;


      --  v_err_loc := 'Update_Mid_Term_Changes - rpt_policy_mso_im_stat_summ';

      UPDATE rpt_policy_mso_im_stat_summ
         SET trans_type =
                CASE
                   WHEN PREMIUM_AMOUNT >= 0 THEN 3
                   WHEN PREMIUM_AMOUNT < 0 THEN 4
                END
       WHERE orig_trans_type = '20' AND trans_type = 'X';

      COMMIT;

      --  v_err_loc := 'Update_Mid_Term_Changes - rpt_policy_mso_gl_stat_summ';
      UPDATE rpt_policy_mso_gl_stat_summ
         SET trans_type =
                CASE
                   WHEN PREMIUM_AMOUNT >= 0 THEN 3
                   WHEN PREMIUM_AMOUNT < 0 THEN 4
                END
       WHERE orig_trans_type = '20' AND trans_type = 'X';

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE Update_claim_count
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.UPDATE_CLAIM_COUNT';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);

      CURSOR update_claim_im
      IS
         WITH summary
              AS (SELECT p.*,
                         ROW_NUMBER ()
                            OVER (PARTITION BY p.claim_number
                                  ORDER BY
                                     p.claim_number,
                                     p.TRANS_TYPE,
                                     p.orig_trans_type,
                                     p.accounting_date,
                                     p.policy_eff_date,
                                     p.accident_date,
                                     p.report_date,
                                     p.state,
                                     p.asl,
                                     p.subline DESC)
                            AS rk
                    FROM rpt_claims_mso_im_stat_summ p
                   WHERE p.orig_trans_type IN ('6L', '7L'))  --- loss payments
         SELECT s.*
           FROM summary s
          WHERE s.rk = 1;

      --    for update of s.claim_count;
      imr          update_claim_im%ROWTYPE;

---------------------------------------------

   CURSOR update_claim_fo
      IS
         WITH summary
              AS (SELECT p.*,
                         ROW_NUMBER ()
                            OVER (PARTITION BY p.claim_number
                                  ORDER BY
                                     p.claim_number,
                                     p.TRANS_TYPE,
                                     p.orig_trans_type,
                                     p.accounting_date,
                                     p.policy_eff_date,
                                     p.accident_date,
                                     p.report_date,
                                     p.state,
                                     p.asl,
                                     p.subline DESC)
                            AS rk
                    FROM rpt_claims_mso_fo_stat_summ p
                   WHERE p.orig_trans_type IN ('6L', '7L'))   -- loss payments
         SELECT s.*
           FROM summary s
          WHERE s.rk = 1;

      --    for update of s.claim_count;
      forow          update_claim_fo%ROWTYPE;

------------------------------------------------------

      CURSOR update_claim_ho
      IS
         WITH summary
              AS (SELECT p.*,
                         ROW_NUMBER ()
                            OVER (PARTITION BY p.claim_number
                                  ORDER BY
                                     p.claim_number,
                                     p.TRANS_TYPE,
                                     p.orig_trans_type,
                                     p.accounting_date,
                                     p.policy_eff_date,
                                     p.accident_date,
                                     p.report_date,
                                     p.state,
                                     p.asl,
                                     p.subline DESC)
                            AS rk
                    FROM rpt_claims_mso_ho_stat_summ p
                   WHERE p.orig_trans_type IN ('6L', '7L'))   -- loss payments
         SELECT s.*
           FROM summary s
          WHERE s.rk = 1;

      --    for update of s.claim_count;
      hor          update_claim_ho%ROWTYPE;


      CURSOR update_claim_pu
      IS
         WITH summary
              AS (SELECT p.*,
                         ROW_NUMBER ()
                            OVER (PARTITION BY p.claim_number
                                  ORDER BY
                                     p.claim_number,
                                     p.TRANS_TYPE,
                                     p.orig_trans_type,
                                     p.accounting_date,
                                     p.policy_eff_date,
                                     p.accident_date,
                                     p.report_date,
                                     p.state,
                                     p.asl,
                                     p.subline DESC)
                            AS rk
                    FROM rpt_claims_mso_gl_stat_summ p
                   WHERE p.orig_trans_type IN ('6L', '7L'))   -- loss payments
         SELECT s.*
           FROM summary s
          WHERE s.rk = 1;

      --    for update of s.claim_count;
      pur          update_claim_pu%ROWTYPE;
      
      
   BEGIN
     

      OPEN update_claim_im;

      OPEN update_claim_ho;
      
      ---this is not working and needs to be looked at for farmowner. the other procedures are working for the update??? --test
      OPEN update_claim_fo;

      OPEN update_claim_pu;
      
      --Farmowners

       DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'update_claim_FO_count';
      
      LOOP
         FETCH update_claim_fo INTO forow;

         EXIT WHEN update_claim_fo%NOTFOUND;

         UPDATE RPT_CLAIMS_MSO_FO_STAT_SUMM sum_fo
            SET sum_fo.CLAIM_COUNT = 1
            where 
              trim( sum_fo.claim_number)    = trim(forow.claim_number )  and 
              trim( sum_fo.COMPANY_ID)      = trim(forow.COMPANY_ID  ) and
              trim( sum_fo.TRANS_TYPE )     = trim(forow.TRANS_TYPE )  and       
              trim( sum_fo.ORIG_TRANS_TYPE )  = trim(forow.ORIG_TRANS_TYPE  )  and 
              trim( sum_fo.STAT_PLAN )        = trim(forow.STAT_PLAN  )  and 
              trim( sum_fo.ACCOUNTING_DATE )  = trim(forow.ACCOUNTING_DATE  )  and   
              trim( sum_fo.POLICY_EFF_DATE )  = trim(forow.POLICY_EFF_DATE )  and  
              trim( sum_fo.ACCIDENT_DATE    ) = trim(forow.ACCIDENT_DATE )  and  
              trim( sum_fo.REPORT_DATE   )    = trim(forow.REPORT_DATE )   and 
              trim( sum_fo.STATE      )       = trim(forow.STATE )  and 
              trim( sum_fo.ASL      )         = trim(forow.ASL ) and            
              trim( sum_fo.SUBLINE )          = trim(forow.SUBLINE  ) and
              trim( sum_fo.CAT_CODE  )        = trim(forow.CAT_CODE )  and      
               ---------------------
              trim( sum_fo.PROT_RATING_TERR  ) = trim( forow.PROT_RATING_TERR )  and   
              trim( sum_fo.POLICY_FORM    )    = trim( forow.POLICY_FORM  ) and  
              trim( sum_fo.OCCUPANCY_CLASS )   = trim( forow.OCCUPANCY_CLASS )  and
              trim( sum_fo.PROP_LIAB_FIELDS )  = trim( forow.PROP_LIAB_FIELDS )  and
              trim( sum_fo.RATE_MOD_FACTOR  )  = trim( forow.RATE_MOD_FACTOR )  and 
              trim( sum_fo.CAUSE_OF_LOSS   )   = trim( forow.CAUSE_OF_LOSS )  and  
               --sum_fo.CLAIM_COUNT      = forow.CLAIM_COUNT and     
              trim( sum_fo.LOSS_AMOUNT )       = trim( forow.LOSS_AMOUNT ) and 
              trim( sum_fo.MSO_MODULE )        = trim( forow.MSO_MODULE )  and     
              trim( sum_fo.CLAIM_NUMBER  )     = trim( forow.CLAIM_NUMBER  ) and 
              trim( sum_fo.ZIP_CODE )          = trim( forow.ZIP_CODE )  and    
              trim( sum_fo.LOSS_COST_MULT )    = trim( forow.LOSS_COST_MULT )  and 
              trim( sum_fo.WINDSTORM_DED )     = trim( forow.WINDSTORM_DED )  and  
              trim( sum_fo.ALAE   )            = trim( forow.ALAE ) ;     
      

         COMMIT;
      END LOOP;

      -----Homeowners
      
       DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'update_claim_HO_count';
      
      LOOP
         FETCH update_claim_ho INTO hor;

         EXIT WHEN update_claim_ho%NOTFOUND;

         UPDATE RPT_CLAIMS_MSO_HO_STAT_SUMM sum_ho
            SET sum_ho.CLAIM_COUNT = 1
          WHERE     sum_ho.claim_number = hor.claim_number
                AND sum_ho.COMPANY_ID = hor.company_id
                AND sum_ho.TRANS_TYPE = hor.TRANS_TYPE
                AND sum_ho.ORIG_TRANS_TYPE = hor.ORIG_TRANS_TYPE
                AND sum_ho.STAT_PLAN = hor.STAT_PLAN
                AND sum_ho.ACCOUNTING_DATE = hor.ACCOUNTING_DATE
                AND sum_ho.POLICY_EFF_DATE = hor.POLICY_EFF_DATE
                AND sum_ho.ACCIDENT_DATE = hor.accident_date
                AND sum_ho.REPORT_DATE = hor.report_date
                AND sum_ho.STATE = hor.state
                AND sum_ho.ASL = hor.asl
                AND sum_ho.SUBLINE = hor.subline
                AND sum_ho.CAT_CODE = hor.cat_code
                AND sum_ho.PROT_RATING_TERR = HOR.PROT_RATING_TERR
                AND sum_ho.POLICY_FORM = HOR.POLICY_FORM
                AND sum_ho.AMOUNT_OF_INS = HOR.AMOUNT_OF_INS
                AND sum_ho.PROGRAM_CODE = hor.PROGRAM_CODE
                AND sum_ho.NUM_OF_FAMILIES = HOR.num_OF_FAMILIES
                AND sum_ho.CONSTRUCTION = HOR.CONSTRUCTION
                AND sum_ho.LIAB_LIMIT_COVE = HOR.LIAB_LIMIT_COVE
                AND sum_ho.DEDUCTIBLE_SIZE = HOR.DEDUCTIBLE_SIZE
                AND sum_ho.COVERAGE = HOR.COVERAGE
                AND sum_ho.TERR_CODE = HOR.TERR_CODE
                AND sum_ho.RATE_SET = HOR.RATE_SET
                AND sum_ho.PCT_OF_MANUAL = HOR.PCT_OF_MANUAL
                AND sum_ho.CAUSE_OF_LOSS = HOR.CAUSE_OF_LOSS
                AND --sum_ho.CLAIM_COUNT = HOR.CLAIM_COUNT and
                    sum_ho.LOSS_AMOUNT = HOR.LOSS_AMOUNT
                AND sum_ho.MSO_MODULE = HOR.MSO_MODULE
                AND sum_ho.CLAIM_NUMBER = HOR.CLAIM_NUMBER
                AND sum_ho.ZIP_CODE = HOR.ZIP_CODE
                AND sum_ho.ZIP_CODE2 = HOR.ZIP_CODE2
                AND sum_ho.LOSS_COST_MULT = hor.LOSS_COST_MULT
                AND sum_ho.INSURANCE_SCORE = HOR.INSURANCE_SCORE
                AND sum_ho.WINDSTORM_DED = HOR.WINDSTORM_DED
                AND sum_ho.ALAE = HOR.ALAE
                AND sum_ho.TYPE_OF_BUSINESS = HOR.TYPE_OF_BUSINESS
                AND sum_ho.YEAR_OF_CONSTRUCTION = HOR.YEAR_OF_CONSTRUCTION
                AND sum_ho.MISC_END = HOR.MISC_END;

         COMMIT;
      END LOOP;

      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'update_claim_im_count';

      -----Inland Marine
      LOOP
         FETCH update_claim_im INTO imr;

         EXIT WHEN update_claim_im%NOTFOUND;

         UPDATE RPT_CLAIMS_MSO_IM_STAT_SUMM sum_im
            SET sum_im.CLAIM_COUNT = 1
          WHERE     sum_im.claim_number = imr.claim_number
                AND sum_im.COMPANY_ID = imr.company_id
                AND sum_im.TRANS_TYPE = imr.TRANS_TYPE
                AND sum_im.ORIG_TRANS_TYPE = imr.ORIG_TRANS_TYPE
                AND sum_im.STAT_PLAN = imr.STAT_PLAN
                AND sum_im.ACCOUNTING_DATE = imr.ACCOUNTING_DATE
                AND sum_im.POLICY_EFF_DATE = imr.POLICY_EFF_DATE
                AND sum_im.ACCIDENT_DATE = imr.accident_date
                AND sum_im.REPORT_DATE = imr.report_date
                AND sum_im.STATE = imr.state
                AND sum_im.ASL = imr.asl
                AND sum_im.SUBLINE = imr.subline
                AND sum_im.CAT_CODE = imr.cat_code
                AND sum_im.TERR_CODE = imr.terr_code
                AND sum_im.TYPE_OF_POLICY = imr.type_of_policy
                AND sum_im.CLASS_CODE = imr.class_code
                AND sum_im.CAUSE_OF_LOSS = imr.cause_of_loss
                AND -- sum_im.CLAIM_COUNT = imr.claim_count and
                    sum_im.LOSS_AMOUNT = imr.loss_amount
                AND sum_im.MSO_MODULE = imr.mso_module
                AND sum_im.CLAIM_NUMBER = imr.claim_number
                AND sum_im.ALAE = imr.alae;

         COMMIT;
      END LOOP;

      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'update_claim_PU_count';

      --PERSONAL UMBREALLA
      LOOP
         FETCH update_claim_PU INTO pur;

         EXIT WHEN update_claim_PU%NOTFOUND;

         UPDATE RPT_CLAIMS_MSO_gl_STAT_SUMM sum_PU
            SET sum_PU.CLAIM_COUNT = 1
          WHERE     sum_PU.claim_number = PUr.claim_number
                AND sum_PU.COMPANY_ID = PUr.company_id
                AND sum_PU.TRANS_TYPE = PUr.TRANS_TYPE
                AND sum_PU.ORIG_TRANS_TYPE = PUr.ORIG_TRANS_TYPE
                AND sum_PU.STAT_PLAN = PUr.STAT_PLAN
                AND sum_PU.ACCOUNTING_DATE = PUr.ACCOUNTING_DATE
                AND sum_PU.POLICY_EFF_DATE = PUr.POLICY_EFF_DATE
                AND sum_PU.ACCIDENT_DATE = PUr.accident_date
                AND sum_PU.REPORT_DATE = PUr.report_date
                AND sum_PU.STATE = PUr.state
                AND sum_PU.ASL = PUr.asl
                AND sum_PU.SUBLINE = PUr.subline
                AND sum_PU.CAT_CODE = PUr.cat_code
                AND SUM_PU.POLICY_FORM = PUR.POLICY_FORM
                AND SUM_PU.LIMIT_LIAB_COV = PUR.LIMIT_LIAB_COV
                AND SUM_PU.LIMIT_MED_COV = PUR.LIMIT_MED_COV
                AND SUM_PU.NUMBER_FAMILIES = PUR.NUMBER_FAMILIES
                AND SUM_PU.COV_CODE = PUR.COV_CODE
                AND SUM_PU.TERRITORY_CODE = PUR.TERRITORY_CODE
                AND sum_pu.PCT_OF_MANUAL = PUR.PCT_OF_MANUAL
                AND SUM_PU.CAUSE_OF_LOSS = PUR.CAUSE_OF_LOSS
                AND --SUM_PU.CLAIM_COUNT  = PUR.CLAIM_COUNT AND
                    SUM_PU.LOSS_AMOUNT = PUR.LOSS_AMOUNT
                AND SUM_PU.MSO_MODULE = PUR.mso_MODULE
                AND SUM_PU.CLAIM_NUMBER = PUR.CLAIM_NUMBER
                AND SUM_PU.LOSS_COST_MULT = PUR.LOSS_COST_MULT
                AND sum_pu.INSURANCE_SCORE = PUR.INSURANCE_SCORE
                AND sum_PU.ALAE = PUR.ALAE
                AND SUM_PU.CLASS_CODE = PUR.CLASS_CODE;

         COMMIT;
      END LOOP;

      CLOSE update_claim_im;

      CLOSE update_claim_ho;

      CLOSE update_claim_pu;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG || imr.claim_number);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE summ_claim_mso_fo_data
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMM_claim_MSO_FO_DATA';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      ----Summarize total payments for the quarter by claim_number and coverage code.If anything on the item changes insert a new record and set claim count = 1
      --- may have to come back to this for claim count. If the same claim/coverage have multiple payments and a territory code changes for the same quarter, should the claim count be counted once for the claim/coverage
      ---- or once for the claim/coverage territory change (other record change) ? I am going to count it once per claim/coverage territory change.

      v_err_loc := 'At First Insert RPT_CLAIMS_MSO_FO_STAT_SUMM statement';
             INSERT INTO rpt_claims_mso_fo_stat_summ
             SELECT DISTINCT COMPANY_ID,
                             TRANS_TYPE,       
                             ORIG_TRANS_TYPE,  
                             STAT_PLAN ,       
                                      '999999',                    -- ACCOUNTING_DATE   , ' ',---test           
                             POLICY_EFF_DATE ,  
                             ACCIDENT_DATE ,    
                             REPORT_DATE ,      
                             STATE ,            
                             ASL  ,             
                             SUBLINE   ,        
                             CAT_CODE ,         
                             PROT_RATING_TERR  ,
                             POLICY_FORM ,      
                             OCCUPANCY_CLASS  , 
                             PROP_LIAB_FIELDS,  
                             RATE_MOD_FACTOR ,  
                             CAUSE_OF_LOSS  ,   
                             CLAIM_COUNT  ,     
                             SUM(LOSS_AMOUNT) AS summ_loss,-- LOSS_AMOUNT   ,    
                             MSO_MODULE  ,      
                             CLAIM_NUMBER   ,   
                             ZIP_CODE  ,        
                             FILLER_3   ,       
                             LOSS_COST_MULT ,   
                             FILLER_4,          
                             WINDSTORM_DED  ,   
                             FILLER_5   ,
                             SUM(ALAE) AS Summ_alae, --- alae
                             FILLER_6--,
                         --    COV_CODE_CO_USE 
                         FROM RPT_CLAIMS_MSO_FO_STAT     
                            GROUP BY COMPANY_ID,
                             TRANS_TYPE,       
                             ORIG_TRANS_TYPE,  
                             STAT_PLAN ,       
                       -- ACCOUNTING_DATE ,  
                             POLICY_EFF_DATE ,  
                             ACCIDENT_DATE ,    
                             REPORT_DATE ,      
                             STATE ,            
                             ASL  ,             
                             SUBLINE   ,        
                             CAT_CODE ,         
                             PROT_RATING_TERR  ,
                             POLICY_FORM ,      
                             OCCUPANCY_CLASS  , 
                             PROP_LIAB_FIELDS,  
                             RATE_MOD_FACTOR ,  
                             CAUSE_OF_LOSS  ,   
                             CLAIM_COUNT  ,     
                             LOSS_AMOUNT   ,    
                             MSO_MODULE  ,      
                             CLAIM_NUMBER   ,   
                             ZIP_CODE  ,        
                             FILLER_3   ,       
                             LOSS_COST_MULT ,   
                             FILLER_4,          
                             WINDSTORM_DED  ,   
                             FILLER_5 ,
                             FILLER_6;
      
      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;




   PROCEDURE summ_claim_mso_ho_data
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMM_claim_MSO_HO_DATA';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      ----Summarize total payments for the quarter by claim_number and coverage code.If anything on the item changes insert a new record and set claim count = 1
      --- may have to come back to this for claim count. If the same claim/coverage have multiple payments and a territory code changes for the same quarter, should the claim count be counted once for the claim/coverage
      ---- or once for the claim/coverage territory change (other record change) ? I am going to count it once per claim/coverage territory change.

      v_err_loc := 'At First Insert RPT_CLAIMS_MSO_HO_STAT_SUMM statement';

      INSERT INTO rpt_claims_mso_ho_stat_summ
           SELECT DISTINCT COMPANY_ID,
                           TRANS_TYPE,
                           ORIG_TRANS_TYPE,                        ---'6X' 6L'
                           STAT_PLAN,
                           '999999',                    -- ACCOUNTING_DATE   ,
                           POLICY_EFF_DATE,
                           ACCIDENT_DATE,
                           REPORT_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           CAT_CODE,
                           ' ',
                           PROT_RATING_TERR,
                           POLICY_FORM,
                           AMOUNT_OF_INS,
                           PROGRAM_CODE,
                           NUM_OF_FAMILIES,
                           CONSTRUCTION,
                           LIAB_LIMIT_COVE,
                           DEDUCTIBLE_SIZE,
                           COVERAGE,
                           TERR_CODE,
                           ' ',
                           RATE_SET,
                           PCT_OF_MANUAL,
                           CAUSE_OF_LOSS,
                           CLAIM_COUNT,           ---dmb 04/30, ---claim count
                           SUM (LOSS_AMOUNT) AS summ_loss,
                           MSO_MODULE,
                           CLAIM_NUMBER,
                           ZIP_CODE,
                           ZIP_CODE2,
                           ' ',
                           LOSS_COST_MULT,
                           INSURANCE_SCORE,
                           WINDSTORM_DED,
                           ' ',
                           FILLER_5,
                           ' ',
                           ---testLAE,
                           SUM (ALAE) AS summ_alae,                --- dmb 5/1
                           ' ',
                           TYPE_OF_BUSINESS,
                           YEAR_OF_CONSTRUCTION,
                           MISC_END,
                           ' '
             FROM RPT_CLAIMS_MSO_HO_STAT
         GROUP BY COMPANY_ID,
                  TRANS_TYPE,
                  ORIG_TRANS_TYPE,
                  STAT_PLAN,
                  --     ACCOUNTING_DATE   ,
                  POLICY_EFF_DATE,
                  ACCIDENT_DATE,
                  REPORT_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  CAT_CODE,
                  PROT_RATING_TERR,
                  POLICY_FORM,
                  AMOUNT_OF_INS,
                  PROGRAM_CODE,
                  NUM_OF_FAMILIES,
                  CONSTRUCTION,
                  LIAB_LIMIT_COVE,
                  DEDUCTIBLE_SIZE,
                  COVERAGE,
                  TERR_CODE,
                  RATE_SET,
                  PCT_OF_MANUAL,
                  CAUSE_OF_LOSS,
                  CLAIM_COUNT,
                  MSO_MODULE,
                  CLAIM_NUMBER,
                  ZIP_CODE,
                  ZIP_CODE2,
                  LOSS_COST_MULT,
                  INSURANCE_SCORE,
                  WINDSTORM_DED,
                  FILLER_5,
                  --05-11       ALAE                  ,
                  TYPE_OF_BUSINESS,
                  YEAR_OF_CONSTRUCTION,
                  MISC_END;


      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;



   PROCEDURE summ_claim_mso_im_data
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMM_claim_MSO_IM_DATA';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'At First Insert RPT_CLAIMS_MSO_IM_STAT_SUMM statement';

      INSERT INTO rpt_claims_mso_IM_stat_summ
           SELECT DISTINCT COMPANY_ID,
                           TRANS_TYPE,
                           ORIG_TRANS_TYPE,
                           STAT_PLAN,
                           '999999',
                           POLICY_EFF_DATE,
                           ACCIDENT_DATE,
                           REPORT_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           CAT_CODE,
                           TERR_CODE,
                           TYPE_OF_POLICY,
                           CLASS_CODE,
                           ' ',
                           CAUSE_OF_LOSS,
                           CLAIM_COUNT,               -- 04/30 dmb claim count
                           SUM (LOSS_AMOUNT),
                           MSO_MODULE,
                           CLAIM_NUMBER,
                           FILLER_2,
                           SUM (ALAE),                -- 05/01 dmb claim count
                           ' '
             FROM rpt_claims_mso_IM_stat
         GROUP BY COMPANY_ID,
                  TRANS_TYPE,
                  ORIG_TRANS_TYPE,
                  STAT_PLAN,
                  ---test 05-11   ACCOUNTING_DATE ,
                  POLICY_EFF_DATE,
                  ACCIDENT_DATE,
                  REPORT_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  CAT_CODE,
                  TERR_CODE,
                  TYPE_OF_POLICY,
                  CLASS_CODE,
                  CAUSE_OF_LOSS,
                  CLAIM_COUNT,
                  --test 05-11  LOSS_AMOUNT      ,
                  MSO_MODULE,
                  CLAIM_NUMBER,
                  FILLER_2;                                        --05-11

      --test 05-11   ALAE ;


      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE summ_claim_mso_pu_data
   IS
      v_procname   RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                      := 'ND_BUREAU.SUMM_claim_MSO_pu_DATA';
      v_err_mssg   VARCHAR2 (200);
      v_err_loc    VARCHAR2 (100);
   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'At First Insert RPT_CLAIMS_MSO_gl_STAT_SUMM statement';

      INSERT INTO rpt_claims_mso_gl_stat_summ
           SELECT DISTINCT COMPANY_ID,
                           TRANS_TYPE,
                           ORIG_TRANS_TYPE,
                           STAT_PLAN,
                           '999999',                        --ACCOUNTING_DATE,
                           POLICY_EFF_DATE,
                           ACCIDENT_DATE,
                           REPORT_DATE,
                           STATE,
                           ASL,
                           SUBLINE,
                           CAT_CODE,
                           ' ',
                           POLICY_FORM,
                           LIMIT_LIAB_COV,
                           LIMIT_MED_COV,
                           ' ',                                    --FILLER_2,
                           NUMBER_FAMILIES,
                           ' ',
                           COV_CODE,
                           TERRITORY_CODE,
                           ' ',
                           PCT_OF_MANUAL,
                           CAUSE_OF_LOSS,
                           CLAIM_COUNT,                         ---- dmb 04/30
                           SUM (loss_amount) AS summ_loss, --LOSS_AMOUNT      ,
                           MSO_MODULE,
                           CLAIM_NUMBER,
                           ' ',                           --FILLER_6         ,
                           LOSS_COST_MULT,
                           INSURANCE_SCORE,
                           Filler_7,
                           SUM (ALAE) AS summ_alae,                  --- test1
                           ' ',
                           CLASS_CODE,
                           ' '
             FROM rpt_claims_mso_gl_stat
         GROUP BY COMPANY_ID,
                  TRANS_TYPE,
                  ORIG_TRANS_TYPE,
                  STAT_PLAN,
                  --                    ACCOUNTING_DATE,
                  POLICY_EFF_DATE,
                  ACCIDENT_DATE,
                  REPORT_DATE,
                  STATE,
                  ASL,
                  SUBLINE,
                  CAT_CODE,
                  --                   FILLER_1 ,
                  POLICY_FORM,
                  LIMIT_LIAB_COV,
                  LIMIT_MED_COV,
                  --                 FILLER_2,
                  NUMBER_FAMILIES,
                  --               FILLER_3,
                  COV_CODE,
                  TERRITORY_CODE,
                  --             FILLER_4       ,
                  PCT_OF_MANUAL,
                  CAUSE_OF_LOSS,
                  CLAIM_COUNT,
                  --05-11           LOSS_AMOUNT      ,
                  MSO_MODULE,
                  CLAIM_NUMBER,
                  --           FILLER_6         ,
                  LOSS_COST_MULT,
                  INSURANCE_SCORE,
                  Filler_7,    --            FILLER_7         ,
                  --  05-11 dmb            ALAE             ,
                  --            FILLER_8         ,
                  CLASS_CODE;

      --          FILLER_9;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;



   PROCEDURE Generate_file_0056
   IS
      v_procname                RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                                   := 'Generate_file_0056';
      v_err_mssg                VARCHAR2 (200);
      v_err_loc                 VARCHAR2 (100);
      v_sql_lit                 varchar2 (200);

      V_ft_RC                   NUMBER := 0;
      V_gt_RC                   NUMBER := 0;
      V_prem_RC                 NUMBER := 0;
      V_claim_out_RC            NUMBER := 0;
      V_claim_paid_RC           NUMBER := 0;
      v_first_time_opened       BOOLEAN := TRUE;

      v_total_prem              NUMBER (11, 2) := 0;
      v_gt_prem                 NUMBER (11, 2) := 0;

      v_print_claim_rc          NUMBER (11, 2) := 0;
      v_print_total_paid_loss   NUMBER (11, 2) := 0;
      v_print_total_paid_exp    NUMBER (11, 2) := 0;
      v_print_total_out_loss    NUMBER (11, 2) := 0;

      v_total_paid_loss         NUMBER (11, 2) := 0;
      v_gt_paid_loss            NUMBER (11, 2) := 0;
      v_total_paid_exp          NUMBER (11, 2) := 0;
      v_gt_paid_exp             NUMBER (11, 2) := 0;

      v_total_amt_2             NUMBER (11, 2) := 0;
      v_total_amt_3             NUMBER (11, 2) := 0;
      v_total_out_loss          NUMBER (11, 2) := 0;
      v_gt_out_loss             NUMBER (11, 2) := 0;
      f1                        UTL_FILE.file_type;
      --   v_gt_rec number;

      f2                        UTL_FILE.file_type;
      head                      VARCHAR2 (300);
   BEGIN
      f2 :=
         UTL_FILE.fopen ('HO_STAT_OUT',
                         v_submittal_filename,
                         'W',
                         32000);

      UTL_FILE.putf (
         f2,
         'MSO Control File for Fitchburg Mutual Insurance Company \n');
      UTL_FILE.new_line (f2);
      UTL_FILE.putf (f2, 'Start time: %s \n', v_start_time);

      SELECT TO_CHAR (SYSDATE, 'DD-MM-YYYY HH:MI:SS')
        INTO v_start_time
        FROM DUAL;

      -- utl_file.putf(f2,'End time: %s \n',to_char(v_start_time,'mm/dd/yyyy'));
      UTL_FILE.putf (f2, 'End time:   %s \n', v_start_time);
      UTL_FILE.new_line (f2);
      UTL_FILE.putf (f2, 'Company: 0056 \n');
      UTL_FILE.new_line (f2);
      UTL_FILE.putf (f2,
                     'Accounting:  %s / %s\n',
                     SUBSTR (v_filename, 11, 1),
                     SUBSTR (v_filename, 9, 2));
      UTL_FILE.new_line (f2);

      UTL_FILE.putf (f2, 'Type of Submission:  1.Original Submission\n');
      UTL_FILE.new_line (f2);

      UTL_FILE.putf (f2, 'Electronic File:\n');
      UTL_FILE.new_line (f2);

      UTL_FILE.putf (f2, '     PREMIUM CONTROL TOTALS\n');
      UTL_FILE.new_line (f2);
      UTL_FILE.putf (f2,
                     'Subline                         Count    Premiums \n');
      UTL_FILE.new_line (f2);

      v_prem_rc := 0;
      v_claim_out_rc := 0;
      v_claim_paid_rc := 0;
      v_gt_rc := 0;

      v_total_paid_loss := 0;
      v_total_paid_exp := 0;
      v_total_out_loss := 0;
      v_total_prem := 0;
      v_gt_prem := 0;
      v_gt_paid_loss := 0;
      v_gt_paid_exp := 0;
      v_gt_out_loss := 0;
      v_total_amt_3 := 0;
      v_total_amt_2 := 0;

     


      --open empty file test a


      IF v_run_type = 'B' OR v_run_type = 'P'
      THEN
         write_fixed_file_loz ('P',                                ---premiums
                               ' ',                              --out or paid
                               ' ',                              --loss or exp
                               'select * from RPT_POLICY_MSO_HO_STAT_SUMM',
                               'HO_STAT_OUT',
                               v_filename,
                               'W',
                               32000,
                               v_prem_rc,
                               v_total_prem,
                               --v_total_out_loss,
                               -- 0);
                               v_total_amt_2,
                               v_total_amt_3);

         v_first_time_opened := FALSE;

         IF v_prem_rc IS NOT NULL
         THEN
            v_gt_rc := v_gt_rc + v_prem_rc;
         ELSE
            v_prem_rc := 0;
         END IF;

         IF v_total_prem IS NOT NULL
         THEN
            v_gt_prem := v_gt_prem + v_total_prem;
         ELSE
            v_total_prem := 0;
         END IF;


         DBMS_OUTPUT.put_line (
               'Homeowners  Premiums Records written: '
            || v_prem_rc
            || ' '
            || v_total_prem);
         UTL_FILE.putf (f2,
                        'Homeowners         (040)   %s  %s  \n',
                        LPAD (v_prem_rc, 10),
                        LPAD (v_total_prem, 10));
         UTL_FILE.new_line (f2);


         ---------------------------------------
         v_sql_lit:=  'select * from RPT_POLICY_MSO_IM_STAT_SUMM where company_id = ' || '''' || '0056' || ''''; --test88 NJ

         write_fixed_file_loz ('P',                                ---premiums
                               ' ',                              --out or paid
                               ' ',                              --loss or exp
                             v_sql_lit,                ----test88    'select * from RPT_POLICY_MSO_IM_STAT_SUMM',
                               'HO_STAT_OUT',
                               v_filename,
                               'A',
                               32000,
                               v_prem_rc,
                               v_total_prem,
                               v_total_amt_2,
                               v_total_amt_3);

         IF v_prem_rc IS NOT NULL
         THEN
            v_gt_rc := v_gt_rc + v_prem_rc;
         ELSE
            v_prem_rc := 0;
         END IF;

         IF v_total_prem IS NOT NULL
         THEN
            v_gt_prem := v_gt_prem + v_total_prem;
         ELSE
            v_total_prem := 0;
         END IF;

         DBMS_OUTPUT.put_line (
               'Inland Marine Premiums  Records written: '
            || v_prem_rc
            || ' '
            || v_total_prem);
         --    v_gt_rc := v_gt_rc + v_prem_rc;
         --    v_gt_prem := v_gt_prem + v_total_prem;
         UTL_FILE.putf (f2,
                        'Inland Marine      (920)   %s  %s\n',
                        LPAD (v_prem_rc, 10),
                        LPAD (v_total_prem, 10));

         UTL_FILE.new_line (f2);

         ----------------------------------------

         WRITE_FIXED_FILE_loz ('P',                                ---premiums
                               ' ',                             --paid out out
                               ' ',                             -- loss or exp
                               'select * from RPT_POLICY_MSO_GL_STAT_SUMM',
                               'HO_STAT_OUT',
                               v_filename,
                               'A',
                               32000,
                               v_prem_rc,
                               v_total_prem,
                               ---  v_total_out_loss, 0);
                               v_total_amt_2,
                               v_total_amt_3);

         IF v_prem_rc IS NOT NULL
         THEN
            v_gt_rc := v_gt_rc + v_prem_rc;
         ELSE
            v_prem_rc := 0;
         END IF;

         IF v_total_prem IS NOT NULL
         THEN
            v_gt_prem := v_gt_prem + v_total_prem;
         ELSE
            v_total_prem := 0;
         END IF;

         DBMS_OUTPUT.put_line (
               'General Liability  Premiums Records written: '
            || v_prem_rc
            || ' '
            || v_total_prem);
         --   v_gt_rc := v_gt_rc + v_prem_rc;
         --   v_gt_prem := v_gt_prem + v_total_prem;
         UTL_FILE.putf (f2,
                        'Personal Liability (171)   %s  %s\n',
                        LPAD (v_prem_rc, 10),
                        LPAD (v_total_prem, 10));
         UTL_FILE.new_line (f2);

         ----------------------------------------
         DBMS_OUTPUT.put_line (
               'Grand Total Premium Records written: '
            || v_gt_rc
            || ' '
            || v_gt_prem);
         UTL_FILE.putf (f2,
                        'Grand Total Premiums       %s  %s\n',
                        LPAD (v_gt_rc, 10),
                        LPAD (v_gt_prem, 10));

         v_ft_rc := v_ft_rc + v_gt_rc;
         v_gt_rc := 0;
      END IF;

      IF v_run_type = 'C' OR v_run_type = 'B'
      THEN
         UTL_FILE.new_line (f2);
         UTL_FILE.putf (f2, '     CLAIM CONTROL TOTALS\n');
         UTL_FILE.new_line (f2);
         UTL_FILE.putf (
            f2,
            'Subline                                        Count   Paid Loss    Paid Exp    Outstand \n');
         UTL_FILE.new_line (f2);

         v_claim_paid_rc := 0;
         v_claim_paid_rc := 0;
         v_total_paid_loss := 0;
         v_total_paid_exp := 0;
         v_total_out_loss := 0;

         --- Claims losses paid

         IF v_first_time_opened
         THEN
            ----clear file
            write_fixed_file_loz (
               'C',                                                  ---claims
               'P',                                              --paid or out
               'L',                                             -- loss or exp
               'select * from RPT_CLAIMS_MSO_HO_STAT_SUMM where trans_type in (''6'',''7'') and orig_trans_type in (''6L'', ''7L'')',
               'HO_STAT_OUT',
               v_filename,
               'W',
               32000,
               v_claim_paid_rc,
               v_total_paid_loss,
               v_total_paid_exp,
               v_total_out_loss);
         ELSE
            --- Claims loss paid
            write_fixed_file_loz (
               'C',                                                  ---claims
               'P',                                              --paid or out
               'L',                                             -- loss or exp
               'select * from RPT_CLAIMS_MSO_HO_STAT_SUMM where trans_type in (''6'',''7'') and orig_trans_type in (''6L'', ''7L'')',
               'HO_STAT_OUT',
               v_filename,
               'A',
               32000,
               v_claim_paid_rc,
               v_total_paid_loss,
               v_total_paid_exp,
               v_total_out_loss);
         END IF;

         v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;
         v_print_total_paid_loss := v_total_paid_loss;

         write_fixed_file_loz (
            'C',                                                     ---claims
            'P',                                                 --paid or out
            'X',                                                 --loss or exp
            'select * from RPT_CLAIMS_MSO_HO_STAT_SUMM where trans_type in (''6'',''7'') and orig_trans_type in (''6X'', ''7X'')',
            'HO_STAT_OUT',
            v_filename,
            'A',
            32000,
            v_claim_paid_rc,
            v_total_paid_loss,
            v_total_paid_exp,
            v_total_out_loss);

         v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;
         v_print_total_paid_exp := v_total_paid_exp;

         write_fixed_file_loz (
            'C',                                                     ---claims
            'O',                                                  --out or out
            ' ',                                                -- loss or exp
            'select * from RPT_CLAIMS_MSO_HO_STAT_SUMM where trans_type in (''8'',''9'')',
            'HO_STAT_OUT',
            v_filename,
            'A',
            32000,
            v_claim_out_rc,
            v_total_paid_loss,
            v_total_paid_exp,
            v_total_out_loss);

         v_print_claim_rc := v_print_claim_rc + v_claim_out_rc;
         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;
         v_print_total_out_loss := v_total_out_loss;


         UTL_FILE.putf (
            f2,
            'Homeowners Claims                 (040)   %s  %s  %s  %s\n',
            LPAD (v_print_claim_rc, 10),
            LPAD (v_print_total_paid_loss, 10, ' '),
            LPAD (v_print_total_paid_exp, 10, ' '),
            LPAD (v_print_total_out_loss, 10, ' '));
         UTL_FILE.new_line (f2);
         DBMS_OUTPUT.put_line (
               'Homeowners Claims                     :       '
            || v_print_claim_rc
            || ' '
            || v_print_total_paid_loss
            || v_print_total_paid_exp
            || LPAD (v_print_total_out_loss, 10, ' '));

         --    utl_file.new_line(f2);

         IF v_print_claim_rc IS NOT NULL
         THEN
            v_gt_rc := v_gt_rc + v_print_claim_rc;
         ELSE
            v_print_claim_rc := 0;
         END IF;

         v_print_claim_rc := 0;
         v_claim_out_rc := 0;
         v_claim_paid_rc := 0;

         IF v_print_total_paid_loss IS NOT NULL
         THEN
            v_gt_paid_loss := v_gt_paid_loss + v_print_total_paid_loss;
         ELSE
            v_print_total_paid_loss := 0;
         END IF;

         IF v_print_total_paid_exp IS NOT NULL
         THEN
            v_gt_paid_exp := v_gt_paid_exp + v_print_total_paid_exp;
         ELSE
            v_print_total_paid_exp := 0;
         END IF;

         IF v_print_total_out_loss IS NOT NULL
         THEN
            v_gt_out_loss := v_gt_out_loss + v_print_total_out_loss;
         ELSE
            v_print_total_out_loss := 0;
         END IF;

         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;
         v_total_paid_loss := 0;
         v_total_paid_exp := 0;
         v_total_out_loss := 0;
         v_print_claim_rc := 0;
         v_print_total_paid_loss := 0;
         v_print_total_paid_exp := 0;
         v_print_total_out_loss := 0;

         ---------------------------------------
         write_fixed_file_loz (
            'C',                                                     ---claims
            'P',                                                 --paid or out
            'L',                                                -- loss or exp
            'select * from RPT_CLAIMS_MSO_IM_STAT_SUMM where orig_trans_type in (''6L'',''7L'') and company_id = ' || '''' || '0056' || '''',
            'HO_STAT_OUT',
            v_filename,
            'A',
            32000,
            v_claim_paid_rc,
            v_total_paid_loss,
            v_total_paid_exp,
            v_total_out_loss);

         v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
         v_print_total_paid_loss := v_total_paid_loss;
         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;


         write_fixed_file_loz (
            'C',                                                     ---claims
            'P',                                                 --paid or out
            'X',                                                -- loss or exp
            'select * from RPT_CLAIMS_MSO_IM_STAT_SUMM where orig_trans_type in (''6X'',''7X'') and company_id = ' || '''' || '0056' || '''',
            'HO_STAT_OUT',
            v_filename,
            'A',
            32000,
            v_claim_paid_rc,
            v_total_paid_loss,
            v_total_paid_exp,
            v_total_out_loss);

         v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
         v_print_total_paid_exp := v_total_paid_exp;
         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;

         write_fixed_file_loz (
            'C',                                                     ---claims
            'O',                                         --paid or outstanding
            ' ',                                            --expenses or loss
            'select * from RPT_CLAIMS_MSO_IM_STAT_SUMM where trans_type in (''8'',''9'') and company_id = ' || '''' || '0056' || '''',
            'HO_STAT_OUT',
            v_filename,
            'A',
            32000,
            v_claim_out_rc,
            v_total_paid_loss,
            v_total_paid_exp,
            v_total_out_loss);

         v_print_claim_rc := v_print_claim_rc + v_claim_out_rc;
         v_print_total_out_loss := v_total_out_loss;
         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;


         DBMS_OUTPUT.put_line (
               'Inland Marine Claims                  :       '
            || v_print_claim_rc
            || ' '
            || v_print_total_paid_loss
            || v_print_total_paid_exp
            || LPAD (v_print_total_out_loss, 10, ' '));

         UTL_FILE.putf (
            f2,
            'Inland Marine Claims              (920)   %s  %s  %s  %s\n',
            LPAD (v_print_claim_rc, 10),
            LPAD (v_print_total_paid_loss, 10, ' '),
            LPAD (v_print_total_paid_exp, 10, ' '),
            LPAD (v_print_total_out_loss, 10, ' '));
         UTL_FILE.new_line (f2);

         IF v_print_claim_rc IS NOT NULL
         THEN
            v_gt_rc := v_gt_rc + v_print_claim_rc;
         ELSE
            v_print_claim_rc := 0;
         END IF;

         v_print_claim_rc := 0;
         v_claim_out_rc := 0;
         v_claim_paid_rc := 0;

         IF v_print_total_paid_loss IS NOT NULL
         THEN
            v_gt_paid_loss := v_gt_paid_loss + v_print_total_paid_loss;
         ELSE
            v_print_total_paid_loss := 0;
         END IF;

         IF v_print_total_paid_exp IS NOT NULL
         THEN
            v_gt_paid_exp := v_gt_paid_exp + v_print_total_paid_exp;
         ELSE
            v_print_total_paid_exp := 0;
         END IF;

         IF v_print_total_out_loss IS NOT NULL
         THEN
            v_gt_out_loss := v_gt_out_loss + v_print_total_out_loss;
         ELSE
            v_print_total_out_loss := 0;
         END IF;


         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;
         v_total_paid_loss := 0;
         v_total_paid_exp := 0;
         v_total_out_loss := 0;

         v_print_claim_rc := 0;
         v_print_total_paid_loss := 0;
         v_print_total_paid_exp := 0;
         v_print_total_out_loss := 0;

         ---------------------------------------

         WRITE_FIXED_FILE_loz (
            'C',                                                     ---claims
            'P',                               --paid or outstanding loss_type
            'X',                                          --expense or expense
            'select * from RPT_CLAIMS_MSO_GL_STAT_SUMM where trans_type in (''6X'',''7X'')',
            'HO_STAT_OUT',
            v_filename,
            'A',
            32000,
            v_claim_paid_rc,
            v_total_paid_loss,
            v_total_paid_exp,
            v_total_out_loss);

         v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
         v_print_total_out_loss := v_total_paid_loss;
         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;

         WRITE_FIXED_FILE_loz (
            'C',                                                     ---claims
            'P',                                         --paid or outstanding
            'L',                                             --loss or expense
            'select * from RPT_CLAIMS_MSO_GL_STAT_SUMM where trans_type in (''6L'',''7L'')',
            'HO_STAT_OUT',
            v_filename,
            'A',
            32000,
            v_claim_paid_rc,
            v_total_paid_loss,
            v_total_paid_exp,
            v_total_out_loss);

         v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
         v_print_total_out_loss := v_total_out_loss;
         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;


         WRITE_FIXED_FILE_loz (
            'C',                                                     ---claims
            'O',                                         --outstanding or paid
            ' ',                                          -- losses or expense
            'select * from RPT_CLAIMS_MSO_GL_STAT_SUMM where trans_type in (''8'',''9'')',
            'HO_STAT_OUT',
            v_filename,
            'A',
            32000,
            v_claim_out_rc,
            v_total_paid_loss,
            v_total_paid_exp,
            v_total_out_loss);

         v_print_claim_rc := v_print_claim_rc + v_claim_out_rc;
         v_print_total_out_loss := v_total_out_loss;
         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;


         DBMS_OUTPUT.put_line (
               'General Liability Claims (171)              :       '
            || v_print_claim_rc
            || ' '
            || v_print_total_paid_loss
            || v_print_total_paid_exp
            || LPAD (v_print_total_out_loss, 10, ' '));
         UTL_FILE.putf (
            f2,
            'General Liability Claims          (171)   %s  %s  %s  %s\n',
            LPAD (v_print_claim_rc, 10),
            LPAD (v_print_total_paid_loss, 10, ' '),
            LPAD (v_print_total_paid_exp, 10, ' '),
            LPAD (v_print_total_out_loss, 10, ' '));

         UTL_FILE.new_line (f2);


         IF v_print_claim_rc IS NOT NULL
         THEN
            v_gt_rc := v_gt_rc + v_print_claim_rc;
         ELSE
            v_print_claim_rc := 0;
         END IF;

         v_print_claim_rc := 0;
         v_claim_out_rc := 0;
         v_claim_paid_rc := 0;

         IF v_print_total_paid_loss IS NOT NULL
         THEN
            v_gt_paid_loss := v_gt_paid_loss + v_print_total_paid_loss;
         ELSE
            v_print_total_paid_loss := 0;
         END IF;

         IF v_print_total_paid_exp IS NOT NULL
         THEN
            v_gt_paid_exp := v_gt_paid_exp + v_total_paid_exp;
         ELSE
            v_print_total_paid_exp := 0;
         END IF;

         IF v_print_total_out_loss IS NOT NULL
         THEN
            v_gt_out_loss := v_gt_out_loss + v_print_total_out_loss;
         ELSE
            v_print_total_out_loss := 0;
         END IF;

         v_claim_paid_rc := 0;
         v_claim_out_rc := 0;
         v_total_paid_loss := 0;
         v_total_paid_exp := 0;
         v_total_out_loss := 0;

         v_claim_out_rc := 0;
         v_print_total_paid_loss := 0;
         v_print_total_paid_exp := 0;
         v_print_total_out_loss := 0;


         UTL_FILE.putf (
            f2,
            'Grand Total Claims                        %s  %s  %s  %s \n',
            LPAD (v_gt_rc, 10, ' '),
            LPAD (v_gt_paid_loss, 10, ' '),
            LPAD (v_gt_paid_exp, 10, ' '),
            LPAD (v_gt_OUT_LOSS, 10, ' '));
         UTL_FILE.new_line (f2);
         v_ft_rc := v_ft_rc + v_gt_rc;
      END IF;

      UTL_FILE.fclose (f1);

      DBMS_OUTPUT.put_line ('Grand Total Records written: ' || v_ft_rc);
      UTL_FILE.putf (
         f2,
         'Grand Total Record Count                  %s  %s  %s  %s   \n',
         LPAD (v_ft_rc, 10));
      UTL_FILE.new_line (f2);

      UTL_FILE.new_line (f2);
      UTL_FILE.put_line (f2, '***END OF REPORT***');
      UTL_FILE.fclose (f2);
   END;

   PROCEDURE Generate_file_0060
   IS
   
   
      v_procname                RPTSTAT.LOAD_LOG.EVENT_ROUTINE%TYPE
                                   := 'Generate_file_0060';
      v_err_mssg                VARCHAR2 (200);
      v_err_loc                 VARCHAR2 (100);
      V_ft_RC                   NUMBER := 0;
      V_gt_RC                   NUMBER := 0;
      V_prem_RC                 NUMBER := 0;
      V_claim_out_RC            NUMBER := 0;
      V_claim_paid_RC           NUMBER := 0;
      v_first_time_opened       BOOLEAN := TRUE;

      v_total_prem              NUMBER (11, 2) := 0;
      v_gt_prem                 NUMBER (11, 2) := 0;

      v_print_claim_rc          NUMBER (11, 2) := 0;
      v_print_total_paid_loss   NUMBER (11, 2) := 0;
      v_print_total_paid_exp    NUMBER (11, 2) := 0;
      v_print_total_out_loss    NUMBER (11, 2) := 0;

      v_total_paid_loss         NUMBER (11, 2) := 0;
      v_gt_paid_loss            NUMBER (11, 2) := 0;
      v_total_paid_exp          NUMBER (11, 2) := 0;
      v_gt_paid_exp             NUMBER (11, 2) := 0;

      v_total_amt_2             NUMBER (11, 2) := 0;
      v_total_amt_3             NUMBER (11, 2) := 0;
      v_total_out_loss          NUMBER (11, 2) := 0;
      v_gt_out_loss             NUMBER (11, 2) := 0;
      f1                        UTL_FILE.file_type;
      --   v_gt_rec number;

      f2                        UTL_FILE.file_type;
      head                      VARCHAR2 (300);
      v_sql_lit                 VARCHAR2 (200) := ' '; --test
   BEGIN
      f2 :=
         UTL_FILE.fopen ('HO_STAT_OUT',
                         v_submittal_filename_farm,
                         'W',
                         32000);

      UTL_FILE.putf (
         f2,
         'MSO Control File for Norfolk and Dedham Insurance Company \n');
      UTL_FILE.new_line (f2);
      UTL_FILE.putf (f2, 'Start time: %s \n', v_start_time);

      SELECT TO_CHAR (SYSDATE, 'DD-MM-YYYY HH:MI:SS')
        INTO v_start_time
        FROM DUAL;

      -- utl_file.putf(f2,'End time: %s \n',to_char(v_start_time,'mm/dd/yyyy'));
      UTL_FILE.putf (f2, 'End time:   %s \n', v_start_time);
      UTL_FILE.new_line (f2);
      UTL_FILE.putf (f2, 'Company: 0060 \n');
      UTL_FILE.new_line (f2);
      UTL_FILE.putf (f2,
                     'Accounting:  %s / %s\n',
                     SUBSTR (v_filename_farm, 11, 1),
                     SUBSTR (v_filename_farm, 9, 2));
      UTL_FILE.new_line (f2);

      UTL_FILE.putf (f2, 'Type of Submission:  1.Original Submission\n');
      UTL_FILE.new_line (f2);

      UTL_FILE.putf (f2, 'Electronic File:\n');
      UTL_FILE.new_line (f2);

      UTL_FILE.putf (f2, '     PREMIUM CONTROL TOTALS\n');
      UTL_FILE.new_line (f2);
      UTL_FILE.putf (f2,
                     'Subline                         Count    Premiums \n');
      UTL_FILE.new_line (f2);
      v_prem_rc := 0;
      v_claim_out_rc := 0;
      v_claim_paid_rc := 0;
      v_gt_rc := 0;
      v_total_paid_loss := 0;
      v_total_paid_exp := 0;
      v_total_out_loss := 0;
      v_total_prem := 0;
      v_gt_prem := 0;
      v_gt_paid_loss := 0;
      v_gt_paid_exp := 0;
      v_gt_out_loss := 0;
      v_total_amt_3 := 0;
      v_total_amt_2 := 0;

      --  v_sql_lit := ' ';



      --open empty file test a


      IF v_run_type = 'B' OR v_run_type = 'P'
      THEN
         write_fixed_file_loz ('P',                                ---premiums
                               ' ',                              --out or paid
                               ' ',                              --loss or exp
                               'select * from RPT_POLICY_MSO_FO_STAT_SUMM',
                               'HO_STAT_OUT',
                               v_filename_farm,
                               'W',
                               32000,
                               v_prem_rc,
                               v_total_prem,
                               --v_total_out_loss,
                               -- 0);
                               v_total_amt_2,
                               v_total_amt_3);

         v_first_time_opened := FALSE;

         IF v_prem_rc IS NOT NULL
         THEN
            v_gt_rc := v_gt_rc + v_prem_rc;
         ELSE
            v_prem_rc := 0;
         END IF;

         IF v_total_prem IS NOT NULL
         THEN
            v_gt_prem := v_gt_prem + v_total_prem;
         ELSE
            v_total_prem := 0;
         END IF;


         DBMS_OUTPUT.put_line (
               'Farmowners  Premiums Records written: '
            || v_prem_rc
            || ' '
            || v_total_prem);
         UTL_FILE.putf (f2,
                        'Farmowners         (040)   %s  %s  \n',
                        LPAD (v_prem_rc, 10),
                        LPAD (v_total_prem, 10));
         UTL_FILE.new_line (f2);

         
      --------------------------------------- Arizona Farm company 01
         v_sql_lit :=  'select * from RPT_POLICY_MSO_IM_STAT_SUMM where company_id = ' || '''' || '0060' || '''';

          write_fixed_file_loz( 'P', ---premiums
                            ' ', --out or paid
                                 ' ', --loss or exp
                           v_sql_lit,
                           'HO_STAT_OUT',
                            v_filename_farm,
                            'A',
                            32000,
                             v_prem_rc,
                             v_total_prem,
                                v_total_amt_2,
                                v_total_amt_3);

          if v_prem_rc is not null then
             v_gt_rc := v_gt_rc + v_prem_rc;
          else
             v_prem_rc := 0;
          end if;

            if v_total_prem is not null then
             v_gt_prem := v_gt_prem + v_total_prem;
          else
            v_total_prem := 0;
          end if;

          DBMS_OUTPUT.put_line ('Inland Marine Premiums  Records written: '||v_prem_rc|| ' ' || v_total_prem);
       --    v_gt_rc := v_gt_rc + v_prem_rc;
       --    v_gt_prem := v_gt_prem + v_total_prem;
           utl_file.putf(f2,'Inland Marine      (920)   %s  %s\n', lpad( v_prem_rc,10), lpad(v_total_prem,10));

           utl_file.new_line(f2);

      ----------------------------------------
  
         DBMS_OUTPUT.put_line (
               'Grand Total Premium Records written: '
            || v_gt_rc
            || ' '
            || v_gt_prem);
         UTL_FILE.putf (f2,
                        'Grand Total Premiums       %s  %s\n',
                        LPAD (v_gt_rc, 10),
                        LPAD (v_gt_prem, 10));

         v_ft_rc := v_ft_rc + v_gt_rc;
         v_gt_rc := 0;
      END IF;

      
           if v_run_type = 'C' or
              v_run_type = 'B' then
                utl_file.new_line(f2);
                utl_file.putf(f2,'     CLAIM CONTROL TOTALS\n');
                utl_file.new_line(f2);
                utl_file.putf(f2,'Subline                                        Count   Paid Loss    Paid Exp    Outstand \n');
                utl_file.new_line(f2);

                  v_claim_paid_rc := 0;
                  v_claim_paid_rc := 0;
                  v_total_paid_loss:= 0;
                  v_total_paid_exp:= 0;
                  v_total_out_loss:= 0;

                 --- Claims losses paid

                  if v_first_time_opened then
                     ----clear file
                       write_fixed_file_loz( 'C',---claims
                                           'P', --paid or out
                                           'L',  -- loss or exp
                                           'select * from RPT_CLAIMS_MSO_FO_STAT_SUMM where trans_type in (''6'',''7'') and orig_trans_type in (''6L'', ''7L'')',
                                      'HO_STAT_OUT',
                                       v_filename_farm,
                                      'W',
                                       32000,
                                       v_claim_paid_rc,
                                       v_total_paid_loss,
                                       v_total_paid_exp,
                                       v_total_out_loss);
                  else

                   --- Claims loss paid
                      write_fixed_file_loz( 'C',---claims
                                           'P', --paid or out
                                           'L',  -- loss or exp
                                           'select * from RPT_CLAIMS_MSO_FO_STAT_SUMM where trans_type in (''6'',''7'') and orig_trans_type in (''6L'', ''7L'')',
                                      'HO_STAT_OUT',
                                       v_filename_farm,
                                      'A',
                                       32000,
                                       v_claim_paid_rc,
                                       v_total_paid_loss,
                                       v_total_paid_exp,
                                       v_total_out_loss);

                 end if;

               v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
               v_claim_paid_rc := 0;
               v_claim_out_rc := 0;
               v_print_total_paid_loss:= v_total_paid_loss;

               write_fixed_file_loz('C',---claims
                                           'P', --paid or out
                                           'X',  --loss or exp
                                     'select * from RPT_CLAIMS_MSO_FO_STAT_SUMM where trans_type in (''6'',''7'') and orig_trans_type in (''6X'', ''7X'')',
                                      'HO_STAT_OUT',
                                       v_filename_farm,
                                      'A',
                                       32000,
                                       v_claim_paid_rc,
                                       v_total_paid_loss,
                                       v_total_paid_exp,
                                       v_total_out_loss);

                v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
                v_claim_paid_rc := 0;
                v_claim_out_rc := 0;
                v_print_total_paid_exp:= v_total_paid_exp;

                write_fixed_file_loz('C',---claims
                                           'O', --out or out
                                       ' ', -- loss or exp
                                      'select * from RPT_CLAIMS_MSO_FO_STAT_SUMM where trans_type in (''8'',''9'')',
                                      'HO_STAT_OUT',
                                       v_filename_farm,
                                      'A',
                                       32000,
                                       v_claim_out_rc,
                                       v_total_paid_loss,
                                       v_total_paid_exp,
                                       v_total_out_loss);

                  v_print_claim_rc := v_print_claim_rc + v_claim_out_rc;
                  v_claim_paid_rc := 0;
                  v_claim_out_rc := 0;
                  v_print_total_out_loss:= v_total_out_loss;


                 utl_file.putf(f2,'Farmowners Claims                 (040)   %s  %s  %s  %s\n', lpad(v_print_claim_rc,10),  lpad( v_print_total_paid_loss,10, ' '), lpad( v_print_total_paid_exp,10, ' '), lpad( v_print_total_out_loss,10, ' ')  );
                 utl_file.new_line(f2);
                 DBMS_OUTPUT.put_line ('Farmowners Claims                     :       '||v_print_claim_rc|| ' ' || v_print_total_paid_loss|| v_print_total_paid_exp ||  lpad( v_print_total_out_loss,10, ' ')  );
             --    utl_file.new_line(f2);

               if v_print_claim_rc is not null then
                  v_gt_rc := v_gt_rc + v_print_claim_rc;
               else
                  v_print_claim_rc := 0;
               end if;
               v_print_claim_rc := 0;
               v_claim_out_rc := 0;
               v_claim_paid_rc := 0;

               if v_print_total_paid_loss is not null then
                  v_gt_paid_loss := v_gt_paid_loss + v_print_total_paid_loss;
               else
                 v_print_total_paid_loss := 0;
               end if;

               if v_print_total_paid_exp is not null then
                  v_gt_paid_exp := v_gt_paid_exp + v_print_total_paid_exp;
               else
                 v_print_total_paid_exp := 0;
               end if;

               if v_print_total_out_loss is not null then
                  v_gt_out_loss := v_gt_out_loss + v_print_total_out_loss;
               else
                 v_print_total_out_loss := 0;
               end if;

               v_claim_paid_rc := 0;
               v_claim_out_rc := 0;
               v_total_paid_loss := 0;
               v_total_paid_exp := 0;
               v_total_out_loss := 0;
               v_print_claim_rc := 0;
               v_print_total_paid_loss := 0;
               v_print_total_paid_exp := 0;
               v_print_total_out_loss := 0;

           ---------------------------------------
          ----test89
              v_sql_lit := 'select * from RPT_CLAIMS_MSO_IM_STAT_SUMM where company_id = ' || '''' || '0060' || ''''|| ' and  orig_trans_type in (' 
              || '''' || '6L' || ''''|| ','  ||  '''' || '7L' || ''''|| ')  ';
              
               write_fixed_file_loz('C',---claims
                                    'P', --paid or out
                                    'L', -- loss or exp
                                 v_sql_lit, --'select * from RPT_CLAIMS_MSO_IM_STAT_SUMM where orig_trans_type in (''6L'',''7L'')',
                                'HO_STAT_OUT',
                                 v_filename_farm,
                                 'A',
                                 32000,
                                  v_claim_paid_rc,
                                  v_total_paid_loss,
                                  v_total_paid_exp,
                                  v_total_out_loss);

               v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
               v_print_total_paid_loss:= v_total_paid_loss;
               v_claim_paid_rc := 0;
               v_claim_out_rc := 0;


               write_fixed_file_loz('C',---claims
                                    'P', --paid or out
                                    'X', -- loss or exp
                                'select * from RPT_CLAIMS_MSO_IM_STAT_SUMM where orig_trans_type in (''6X'',''7X'') and company_id = ' || '''' || '0060' || '''',
                                'HO_STAT_OUT',
                                 v_filename_farm,
                                 'A',
                                 32000,
                                  v_claim_paid_rc,
                                  v_total_paid_loss,
                                  v_total_paid_exp,
                                  v_total_out_loss);

               v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
               v_print_total_paid_exp:= v_total_paid_exp;
               v_claim_paid_rc := 0;
               v_claim_out_rc := 0;

               write_fixed_file_loz('C',---claims
                                    'O', --paid or outstanding
                                    ' ', --expenses or loss
                               'select * from RPT_CLAIMS_MSO_IM_STAT_SUMM where trans_type in (''8'',''9'') and company_id = ' || '''' || '0060' || '''',
                                'HO_STAT_OUT',
                                 v_filename_farm,
                                 'A',
                                 32000,
                                  v_claim_out_rc,
                                  v_total_paid_loss,
                                  v_total_paid_exp,
                                  v_total_out_loss);

               v_print_claim_rc := v_print_claim_rc + v_claim_out_rc;
               v_print_total_out_loss:= v_total_out_loss;
               v_claim_paid_rc := 0;
               v_claim_out_rc := 0;


               DBMS_OUTPUT.put_line ('Inland Marine Claims                  :       '||v_print_claim_rc|| ' ' || v_print_total_paid_loss|| v_print_total_paid_exp ||  lpad( v_print_total_out_loss,10, ' ')  );

               utl_file.putf(f2,'Inland Marine Claims              (920)   %s  %s  %s  %s\n', lpad(v_print_claim_rc,10),  lpad( v_print_total_paid_loss,10, ' '), lpad( v_print_total_paid_exp,10, ' '), lpad( v_print_total_out_loss,10, ' ')  );
               utl_file.new_line(f2);

               if v_print_claim_rc is not null then
                  v_gt_rc := v_gt_rc + v_print_claim_rc;
               else
                  v_print_claim_rc := 0;
               end if;
               v_print_claim_rc := 0;
               v_claim_out_rc := 0;
               v_claim_paid_rc := 0;

               if v_print_total_paid_loss is not null then
                  v_gt_paid_loss := v_gt_paid_loss + v_print_total_paid_loss;
               else
                 v_print_total_paid_loss := 0;
               end if;

               if v_print_total_paid_exp is not null then
                  v_gt_paid_exp := v_gt_paid_exp + v_print_total_paid_exp;
               else
                 v_print_total_paid_exp := 0;
               end if;

               if v_print_total_out_loss is not null then
                  v_gt_out_loss := v_gt_out_loss + v_print_total_out_loss;
               else
                 v_print_total_out_loss := 0;
               end if;


               v_claim_paid_rc := 0;
               v_claim_out_rc := 0;
               v_total_paid_loss := 0;
               v_total_paid_exp := 0;
               v_total_out_loss := 0;

               v_print_claim_rc := 0;
               v_print_total_paid_loss := 0;
               v_print_total_paid_exp := 0;
               v_print_total_out_loss := 0;

           ---------------------------------------
/*
               WRITE_FIXED_FILE_loz ('C',---claims
                                     'P', --paid or outstanding loss_type
                                     'X', --expense or expense
                              'select * from RPT_CLAIMS_MSO_GL_STAT_SUMM where trans_type in (''6X'',''7X'')',
                                 'HO_STAT_OUT',
                                  v_filename,
                                  'A',
                                  32000,
                                  v_claim_paid_rc,
                                  v_total_paid_loss,
                                  v_total_paid_exp,
                                  v_total_out_loss);

               v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
               v_print_total_out_loss:= v_total_paid_loss;
               v_claim_paid_rc := 0;
               v_claim_out_rc := 0;

               WRITE_FIXED_FILE_loz ('C',---claims
                                     'P', --paid or outstanding
                                     'L', --loss or expense
                              'select * from RPT_CLAIMS_MSO_GL_STAT_SUMM where trans_type in (''6L'',''7L'')',
                                 'HO_STAT_OUT',
                                  v_filename,
                                  'A',
                                  32000,
                                  v_claim_paid_rc,
                                  v_total_paid_loss,
                                  v_total_paid_exp,
                                  v_total_out_loss);

               v_print_claim_rc := v_print_claim_rc + v_claim_paid_rc;
               v_print_total_out_loss:= v_total_out_loss;
               v_claim_paid_rc := 0;
               v_claim_out_rc := 0;


               WRITE_FIXED_FILE_loz ('C',---claims
                                     'O', --outstanding or paid
                                     ' ', -- losses or expense
                            'select * from RPT_CLAIMS_MSO_GL_STAT_SUMM where trans_type in (''8'',''9'')',
                                 'HO_STAT_OUT',
                                  v_filename,
                                  'A',
                                  32000,
                                  v_claim_out_rc,
                                  v_total_paid_loss,
                                  v_total_paid_exp,
                                  v_total_out_loss);

               v_print_claim_rc := v_print_claim_rc + v_claim_out_rc;
               v_print_total_out_loss:= v_total_out_loss;
               v_claim_paid_rc := 0;
               v_claim_out_rc := 0;


              DBMS_OUTPUT.put_line ('General Liability Claims (171)              :       '||v_print_claim_rc|| ' ' || v_print_total_paid_loss|| v_print_total_paid_exp ||  lpad( v_print_total_out_loss,10, ' ')  );
               utl_file.putf(f2,'General Liability Claims          (171)   %s  %s  %s  %s\n', lpad(v_print_claim_rc,10),  lpad( v_print_total_paid_loss,10, ' '), lpad( v_print_total_paid_exp,10, ' '), lpad( v_print_total_out_loss,10, ' ')  );

               utl_file.new_line(f2);

*/
               if v_print_claim_rc is not null then
                  v_gt_rc := v_gt_rc + v_print_claim_rc;
               else
                  v_print_claim_rc := 0;
               end if;
               v_print_claim_rc := 0;
               v_claim_out_rc := 0;
               v_claim_paid_rc := 0;

               if v_print_total_paid_loss is not null then
                  v_gt_paid_loss := v_gt_paid_loss + v_print_total_paid_loss;
               else
                 v_print_total_paid_loss := 0;
               end if;

                if v_print_total_paid_exp is not null then
                  v_gt_paid_exp := v_gt_paid_exp + v_total_paid_exp;
               else
                 v_print_total_paid_exp := 0;
               end if;

               if v_print_total_out_loss is not null then
                  v_gt_out_loss := v_gt_out_loss + v_print_total_out_loss;
               else
                 v_print_total_out_loss := 0;
               end if;

               v_claim_paid_rc := 0;
               v_claim_out_rc := 0;
               v_total_paid_loss := 0;
               v_total_paid_exp := 0;
               v_total_out_loss := 0;

               v_claim_out_rc := 0;
               v_print_total_paid_loss := 0;
               v_print_total_paid_exp := 0;
               v_print_total_out_loss := 0;


               utl_file.putf(f2,'Grand Total Claims                        %s  %s  %s  %s \n', lpad(v_gt_rc,10,' '), lpad(v_gt_paid_loss,10,' '),lpad(v_gt_paid_exp,10,' '),Lpad(v_gt_OUT_LOSS,10,' '));
               utl_file.new_line(f2);
                v_ft_rc := v_ft_rc + v_gt_rc;
           end if;
          
      UTL_FILE.fclose (f1);

      DBMS_OUTPUT.put_line ('Grand Total Records written: ' || v_ft_rc);
      UTL_FILE.putf (
         f2,
         'Grand Total Record Count                  %s  %s  %s  %s   \n',
         LPAD (v_ft_rc, 10));
      UTL_FILE.new_line (f2);

      UTL_FILE.new_line (f2);
      UTL_FILE.put_line (f2, '***END OF REPORT***');
      UTL_FILE.fclose (f2);
   END;

   PROCEDURE write_fixed_file_LOZ (p_type           IN     VARCHAR2,
                                   p_out_paid       IN     VARCHAR2,
                                   p_loss_exp       IN     VARCHAR2,
                                   p_query          IN     VARCHAR2,
                                   p_dir            IN     VARCHAR2,
                                   p_filename       IN     VARCHAR2,
                                   p_fopen_fl       IN     VARCHAR2,
                                   p_max_linesize   IN     NUMBER,
                                   v_numRecs           OUT NUMBER,
                                   --   v_total_prem_out  out number,
                                   --  v_total_num_out    out  number)
                                   v_total_amt_1       OUT NUMBER,
                                   v_total_amt_2       OUT NUMBER,
                                   v_total_amt_3       OUT NUMBER)
   IS
      f1                   UTL_FILE.file_type;
      v_cursor             INTEGER DEFAULT DBMS_SQL.open_cursor;
      v_colVal             VARCHAR2 (4000);
      v_rc                 INTEGER;
      v_colCnt             NUMBER DEFAULT 0;

      v_out_rec            LONG;

      v_tab                VARCHAR2 (1) := CHR (9);
      v_crlf               VARCHAR2 (2) := CHR (13) || CHR (10); -- 'ODOA' CR/LF
      v_cr                 VARCHAR2 (2) := CHR (13);                -- 'OD' CR
      tbl_Column           DBMS_SQL.desc_tab;

      -- debugging/exception variables
      v_procname           VARCHAR2 (20) := 'write_fixed_file_loz';
      v_err_mssg           VARCHAR2 (200);
      v_err_loc            VARCHAR2 (100);
      v_prem_amt_char      VARCHAR2 (8);
      v_prem_amt_sign      VARCHAR2 (1);
      v_prem_amt_lst_chr   VARCHAR (1);
      --      v_total_premium number:= 0;
      recs                 NUMBER := 0;
      v_tot_prem_out       NUMBER := 0;
      v_prem_out           NUMBER := 0;

      v_tot_num_out        NUMBER := 0;
      v_tot_amt_1          NUMBER := 0;
      v_tot_amt_2          NUMBER := 0;
      v_tot_amt_3          NUMBER := 0;
   BEGIN
      f1 :=
         UTL_FILE.fopen (p_dir,
                         p_filename,
                         p_fopen_fl,
                         p_max_linesize);

      DBMS_SQL.parse (v_cursor, p_query, DBMS_SQL.native);
      DBMS_SQL.describe_columns (v_cursor, v_colCnt, tbl_Column);

      FOR i IN 1 .. v_colCnt
      LOOP
         DBMS_SQL.define_column (v_cursor,
                                 i,
                                 v_colVal,
                                 4000);

         IF (tbl_Column (i).col_type = 2)                        --number type
         THEN
            tbl_Column (i).col_max_len := tbl_Column (i).col_precision + 2;
         ELSIF (tbl_Column (i).col_type = 12)                     -- date type
         THEN
            -- length of date format
            tbl_Column (i).col_max_len := 20;
         ELSIF (tbl_Column (i).col_Type = 8)                      -- LONG type
         THEN
            tbl_Column (i).col_max_len := 2000;
         END IF;
      END LOOP;



      v_rc := DBMS_SQL.execute (v_cursor);


      LOOP
         EXIT WHEN (DBMS_SQL.fetch_rows (v_cursor) <= 0);
         v_out_rec := NULL;

         FOR i IN 1 .. v_colCnt
         LOOP
            DBMS_SQL.COLUMN_VALUE (v_cursor, i, v_colVal);

            IF tbl_Column (i).col_name <> 'ORIG_TRANS_TYPE'
            THEN
               IF    tbl_Column (i).col_name = 'PREMIUM_AMOUNT'
                  OR tbl_Column (i).col_name = 'ALAE'
                  OR tbl_Column (i).col_name = 'LOSS_AMOUNT'
               THEN
                  IF v_colval < 0
                  THEN
                     v_prem_amt_sign := '-';
                     v_prem_amt_char :=
                        TO_CHAR (LPAD ( (v_colVal * -1), 8, '0'));
                     v_prem_amt_lst_chr := SUBSTR (v_prem_amt_char, 8, 1);
                  ELSE
                     v_prem_amt_sign := '+';
                     v_prem_amt_char := TO_CHAR (LPAD (v_colVal, 8, '0'));
                     v_prem_amt_lst_chr := SUBSTR (v_prem_amt_char, 8, 1);
                  END IF;

                  v_prem_out := TO_NUMBER (NVL (v_colVal, '0'), '9999999.99');


                  --   v_tot_prem_out := v_tot_prem_out + v_prem_out;


                  IF p_type = 'P'
                  THEN                                             ---premiums
                     IF tbl_Column (i).col_name = 'PREMIUM_AMOUNT'
                     THEN                                    --- paid expendse
                        v_tot_amt_1 := v_tot_amt_1 + v_prem_out;       -- test
                     END IF;
                  END IF;


                  IF p_type = 'C'
                  THEN                                               ---claims
                     IF p_out_paid = 'P'
                     THEN                                     ---paid or  loss
                        IF p_loss_exp = 'L'
                        THEN
                           IF tbl_Column (i).col_name = 'LOSS_AMOUNT'
                           THEN                              --- paid expendse
                              v_tot_amt_1 := v_tot_amt_1 + v_prem_out; -- test
                           END IF;
                        END IF;
                     END IF;
                  END IF;


                  IF p_type = 'C'
                  THEN                                               ---claims
                     IF p_out_paid = 'P'
                     THEN                                     ---paid or  loss
                        IF p_loss_exp = 'X'
                        THEN
                           --             if tbl_Column (i).col_name = 'LOSS_AMOUNT'  then  --- paid expendse
                           IF tbl_Column (i).col_name = 'ALAE'
                           THEN                              --- paid expendse
                              v_tot_amt_2 := v_tot_amt_2 + v_prem_out; -- test
                           END IF;
                        END IF;
                     END IF;
                  END IF;

                  /*
                  if p_type = 'C' then---claims
                    if tbl_Column (i).col_name = 'ALAE'  then  --- paid expendse
                       v_total_amt_2 := v_total_amt_2 + v_prem_out; -- test
                    end if;
                  end if  ;
               */

                  IF p_type = 'C'
                  THEN                                               ---claims
                     IF p_out_paid = 'O'
                     THEN                                          ---out loss
                        IF tbl_Column (i).col_name = 'LOSS_AMOUNT'
                        THEN                                 --- paid expendse
                           v_tot_amt_3 := v_tot_amt_3 + v_prem_out;    -- test
                        END IF;
                     END IF;
                  END IF;


                  IF v_prem_amt_sign = '-'
                  THEN
                     CASE v_prem_amt_lst_chr
                        WHEN '0'
                        THEN
                           v_prem_amt_lst_chr := '}';
                        WHEN '1'
                        THEN
                           v_prem_amt_lst_chr := 'J';
                        WHEN '2'
                        THEN
                           v_prem_amt_lst_chr := 'K';
                        WHEN '3'
                        THEN
                           v_prem_amt_lst_chr := 'L';
                        WHEN '4'
                        THEN
                           v_prem_amt_lst_chr := 'M';
                        WHEN '5'
                        THEN
                           v_prem_amt_lst_chr := 'N';
                        WHEN '6'
                        THEN
                           v_prem_amt_lst_chr := 'O';
                        WHEN '7'
                        THEN
                           v_prem_amt_lst_chr := 'P';
                        WHEN '8'
                        THEN
                           v_prem_amt_lst_chr := 'Q';
                        WHEN '9'
                        THEN
                           v_prem_amt_lst_chr := 'R';
                     END CASE;
                  END IF;

                  v_colVal :=
                     SUBSTR (v_prem_amt_char, 1, 7) || v_prem_amt_lst_chr;
               END IF;


               -- Keep the original column accounting date until we write out the file.
               -- This is used for summarizing the records properly, but write out the qtr end month/year for
               -- submission.



               IF tbl_Column (i).col_name = 'ACCOUNTING_DATE'
               THEN
                  v_out_rec :=
                     v_out_rec || RPAD (NVL (v_end_actg_qtr, ' '), 4);
               ELSE
                  IF    tbl_Column (i).col_name = 'POLICY_EFF_DATE'
                     OR tbl_Column (i).col_name = 'TRANS_EFF_DATE'
                     OR tbl_Column (i).col_name = 'REPORT_DATE'
                     OR tbl_Column (i).col_name = 'ACCIDENT_DATE'
                     OR tbl_Column (i).col_name = 'TRANS_EXP_DATE'
                  THEN
                     v_colVal :=
                        TO_CHAR (TO_DATE (v_colVal, 'mm/dd/yy'), 'MMYY');
                     v_out_rec := v_out_rec || RPAD (NVL (v_colVal, ' '), 4);
                  ELSE
                     IF    tbl_Column (i).col_name = 'PREMIUM_AMOUNT'
                        OR tbl_Column (i).col_name = 'ALAE'
                        OR                                           ----05/01
                          tbl_Column (i).col_name = 'LOSS_AMOUNT'
                     THEN
                        v_out_rec :=
                           v_out_rec || RPAD (NVL (v_colVal, ' '), 8);
                     ELSE
                        v_out_rec :=
                              v_out_rec
                           || RPAD (NVL (v_colVal, ' '),
                                    tbl_Column (i).col_max_len);
                     END IF;
                  END IF;
               END IF;
            END IF;
         END LOOP;

         DBMS_OUTPUT.PUT_LINE ('v_out_rec ' || v_out_rec);
         -- this replaces carriage return with spaces

         --  v_out_rec := REPLACE (v_out_rec, v_crlf, '  ');  chr (13) char(10); OD OA
         --  v_out_rec := v_out_rec || v_crlf;
         v_out_rec := v_out_rec || v_cr;                         --'chr(13) OD
         UTL_FILE.put_line (f1, v_out_rec);
         recs := recs + 1;
      END LOOP;

      DBMS_SQL.close_cursor (v_cursor);
      UTL_FILE.fclose (f1);
      v_numRecs := recs;
      --   v_total_prem_out :=  v_tot_prem_out;
      --   v_total_num_out :=   v_tot_num_out;
      --v_total_amt_1 :=  v_tot_prem_out;
      --  v_total_amt_2 :=   v_tot_num_out;
      v_total_amt_1 := v_tot_amt_1;
      v_total_amt_2 := v_tot_amt_2;
      v_total_amt_3 := v_tot_amt_3;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;
   
FUNCTION Get_FO_MSO_Type_Loss (v_claim_number   IN     VARCHAR2,
                              v_class_code      IN     VARCHAR2,
                              v_Cov_Code        IN     VARCHAR2,
                              v_end_date        IN     DATE)
      RETURN VARCHAR2
   IS
      CURSOR LT_Cursor
      IS
           SELECT distinct
                           s.Claim_Number,
                           s.Policy_Number,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as CURRENT_RESERVE,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, '01012015', s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as Starting_reserve,
                           s.state_cd,
                           s.company,
                           s.group_line,
                           s.end_num,
                           s.eff_date,
                           s.exp_date,
                           s.change_date,
                           s.actg_date,
                           s.user_line,
                           s.cov_code,
                           s.loss_date,
                           s.acv_rc,
                           s.item_num,
                           s.class_code,
                           s.type_loss,
                           s.csp_subline,
                           s.prot_class,
                           s.form_num,
                           s.loc_zip,
                           s.ded_amt,
                           s.terr,
                           s.cove,
                           s.exposure,
                           s.limit_amt_person,
                           s.cat_number,
                           s.reported_date,
                           s.sq_feet,
                           s.ams_parm_1,
                           s.cause_loss2

             FROM RPT_CLAIMS_FO_STAT s
            WHERE     s.company = '01'
                  AND s.state_cd = 'AR'
                  AND s.GROUP_LINE IN ('26')
                  AND s.book_date <= v_end_date
                  AND s.Claim_Number = v_claim_number
                  AND s.COV_CODE = v_cov_code
                  AND s.Class_Code = v_class_code
                  AND s.sdac_ind = '1'
                  AND RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                       <> 0

                  AND s.actg_date = 
                       (SELECT MAX (s1.actg_date)
                            FROM rpt_claims_fo_stat s1
                           WHERE     rtrim(s.claim_number) = rtrim(s1.claim_number)
                                 AND s.group_line = s1.group_line
                                 AND s.user_line = s1.user_line
                                 AND s.cov_code = s1.cov_code
                                 AND s.company = s1.company
                                 AND s.state_cd = s1.state_cd
                                 AND s.policy_number = s1.policy_number
                                 AND s.eff_date = s1.eff_date
                                 AND s.exp_date = s1.exp_date
                                 AND s.item_state_cd = s1.item_state_cd
                                 AND s.location = s1.location
                                 AND s.item_num = s1.item_num
                                 AND s.end_num = s1.end_num
                                 AND s.sdac_ind = s1.sdac_ind
                                 AND s1.book_date <= v_end_date);


      one_LT_Cursor      LT_Cursor%ROWTYPE;
      v_rowcount          NUMBER;
      v_return            VARCHAR2(2);

      /*
      Author: D. O'Sullivan
      Date: 4/2/08
      Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
      Modifications
      -------------
      */

      -- debugging/exception variables
      v_procname          VARCHAR2 (20) := 'Get_FO_MSO_Type_Loss';
      v_err_loc           VARCHAR2 (100);
      v_err_number        NUMBER;
      v_err_msg           VARCHAR2 (1500);
      v_start_date_time   DATE := SYSDATE;

   BEGIN
      v_err_loc := 'Get_FO_MSO_Type_Loss';
      v_rowcount := 0;
      v_Return := '';
      
      OPEN LT_Cursor;

      LOOP
         EXIT WHEN LT_Cursor%NOTFOUND;

         FETCH LT_Cursor INTO one_LT_Cursor;
         
         If one_LT_Cursor.type_loss is not null then
            v_Return := one_LT_Cursor.type_loss;
         End If;
         
      END LOOP;


      CLOSE LT_Cursor;

      RETURN v_Return;
   ------------------------------------------------------------------------------------------------------------
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_number := SQLCODE;
         v_err_msg := SQLERRM (SQLCODE);
         v_err_msg :=
               'FAILED: '
            || v_err_number
            || ' * '
            || v_err_loc
            || ' * '
            || v_err_msg;
         DBMS_OUTPUT.put_line (v_err_msg);
         RETURN v_err_msg;
   END Get_FO_MSO_Type_Loss;
   
   
FUNCTION Get_HO_MSO_Type_Loss (v_claim_number   IN     VARCHAR2,
                              v_class_code      IN     VARCHAR2,
                              v_Cov_Code        IN     VARCHAR2,
                              v_end_date        IN     DATE)
      RETURN VARCHAR2
   IS
      CURSOR LT_Cursor
      IS
           SELECT distinct
                           s.Claim_Number,
                           s.Policy_Number,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as CURRENT_RESERVE,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, '01012015', s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as Starting_reserve,
                           s.state_cd,
                           s.company,
                           s.group_line,
                           s.end_num,
                           s.eff_date,
                           s.exp_date,
                           s.change_date,
                           s.actg_date,
                           s.user_line,
                           s.cov_code,
                           s.loss_date,
                           s.acv_rc,
                           s.item_num,
                           s.class_code,
                           s.type_loss,
                           s.csp_subline,
                           s.prot_class,
                           s.form_num,
                           s.loc_zip,
                           s.ded_amt,
                           s.terr,
                           s.cove,
                           s.exposure,
                           s.limit_amt_person,
                           s.cat_number,
                           s.reported_date,
                           s.sq_feet,
                           s.ams_parm_1,
                           s.cause_loss2

             FROM RPT_CLAIMS_FO_STAT s
            WHERE     s.company = '01'
                  AND s.state_cd = 'AR'
                  AND s.GROUP_LINE IN ('26')
                  AND s.book_date <= v_end_date
                  AND s.Claim_Number = v_claim_number
                  AND s.COV_CODE = v_cov_code
                  AND s.Class_Code = v_class_code
                  AND s.sdac_ind = '1'
                  AND RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                       <> 0

                  AND s.actg_date = 
                       (SELECT MAX (s1.actg_date)
                            FROM rpt_claims_fo_stat s1
                           WHERE     rtrim(s.claim_number) = rtrim(s1.claim_number)
                                 AND s.group_line = s1.group_line
                                 AND s.user_line = s1.user_line
                                 AND s.cov_code = s1.cov_code
                                 AND s.company = s1.company
                                 AND s.state_cd = s1.state_cd
                                 AND s.policy_number = s1.policy_number
                                 AND s.eff_date = s1.eff_date
                                 AND s.exp_date = s1.exp_date
                                 AND s.item_state_cd = s1.item_state_cd
                                 AND s.location = s1.location
                                 AND s.item_num = s1.item_num
                                 AND s.end_num = s1.end_num
                                 AND s.sdac_ind = s1.sdac_ind
                                 AND s1.book_date <= v_end_date);


      one_LT_Cursor      LT_Cursor%ROWTYPE;
      v_rowcount          NUMBER;
      v_return            VARCHAR2(2);

      /*
      Author: D. O'Sullivan
      Date: 4/2/08
      Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
      Modifications
      -------------
      */

      -- debugging/exception variables
      v_procname          VARCHAR2 (20) := 'Get_HO_MSO_Type_Loss';
      v_err_loc           VARCHAR2 (100);
      v_err_number        NUMBER;
      v_err_msg           VARCHAR2 (1500);
      v_start_date_time   DATE := SYSDATE;

   BEGIN
      v_err_loc := 'Get_HO_MSO_Type_Loss';
      v_rowcount := 0;
      v_Return := '';
      
      OPEN LT_Cursor;

      LOOP
         EXIT WHEN LT_Cursor%NOTFOUND;

         FETCH LT_Cursor INTO one_LT_Cursor;
         
         If one_LT_Cursor.type_loss is not null then
            v_Return := one_LT_Cursor.type_loss;
         End If;
         
      END LOOP;


      CLOSE LT_Cursor;

      RETURN v_Return;
   ------------------------------------------------------------------------------------------------------------
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_number := SQLCODE;
         v_err_msg := SQLERRM (SQLCODE);
         v_err_msg :=
               'FAILED: '
            || v_err_number
            || ' * '
            || v_err_loc
            || ' * '
            || v_err_msg;
         DBMS_OUTPUT.put_line (v_err_msg);
         RETURN v_err_msg;
   END Get_HO_MSO_Type_Loss;

   
FUNCTION Get_IM_MSO_Type_Loss (v_claim_number   IN     VARCHAR2,
                              v_class_code      IN     VARCHAR2,
                              v_Cov_Code        IN     VARCHAR2,
                              v_end_date        IN     DATE)
      RETURN VARCHAR2
   IS
      CURSOR LT_Cursor
      IS
           SELECT distinct
                           s.Claim_Number,
                           s.Policy_Number,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as CURRENT_RESERVE,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, '01012015', s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as Starting_reserve,
                           s.state_cd,
                           s.company,
                           s.cat_number,
                           s.group_line,
                           s.user_line,
                           s.eff_date,
                           s.exp_date,
                           s.actg_date,
                           s.reported_date,
                           s.trans_code,
                           s.loss_date,
                           s.item_num,
                           s.loc_zip,
                           s.loc_zip2,
                           s.type_loss,
                           s.terr,
                           s.class_code,
                           s.cov_code

             FROM RPT_CLAIMS_IM_STAT s
            WHERE    ( (s.company = '04'
                  AND s.state_cd = 'NJ'
                  AND s.GROUP_LINE IN ('24', '68')
                  AND s.user_line in ('68') 
                  )
                        OR
                  (s.company = '01'
                  AND s.state_cd = 'AR'
                  AND s.GROUP_LINE IN ('26')
                  AND s.user_line in ('68', '70') ) 
                  )

                  AND s.book_date <= v_end_date
                  AND s.sdac_ind = '1'
                  AND s.Claim_Number = v_claim_number
                  AND s.COV_CODE = v_cov_code
                  AND s.Class_Code = v_class_code
                  AND RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                       <> 0

                  AND s.actg_date = 
                         (SELECT MAX (s1.actg_date)
                            FROM rpt_claims_IM_stat s1
                           WHERE     s.claim_number = s1.claim_number
                                 AND s.group_line = s1.group_line
                                 AND s.user_line = s1.user_line
                                 AND s.cov_code = s1.cov_code
                                 AND s.company = s1.company
                                 AND s.state_cd = s1.state_cd
                                 AND s.policy_number = s1.policy_number
                                 AND s.eff_date = s1.eff_date
                                 AND s.exp_date = s1.exp_date
                                 AND s.item_state_cd = s1.item_state_cd
                                 AND s.location = s1.location
                                 AND s.user_line = s1.user_line
                                 AND s.item_num = s1.item_num
                                 AND s.cov_code = s1.cov_code
                                 AND s.end_num = s1.end_num
                                 AND s.sdac_ind = s1.sdac_ind
                                 AND s1.book_date <= v_end_date);

      one_LT_Cursor      LT_Cursor%ROWTYPE;
      v_rowcount          NUMBER;
      v_return            VARCHAR2(2);

      /*
      Author: D. O'Sullivan
      Date: 4/2/08
      Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
      Modifications
      -------------
      */

      -- debugging/exception variables
      v_procname          VARCHAR2 (20) := 'Get_IM_MSO_Type_Loss';
      v_err_loc           VARCHAR2 (100);
      v_err_number        NUMBER;
      v_err_msg           VARCHAR2 (1500);
      v_start_date_time   DATE := SYSDATE;

   BEGIN
      v_err_loc := 'Get_IM_MSO_Type_Loss';
      v_rowcount := 0;
      v_Return := '';
      
      OPEN LT_Cursor;

      LOOP
         EXIT WHEN LT_Cursor%NOTFOUND;

         FETCH LT_Cursor INTO one_LT_Cursor;
         
         If one_LT_Cursor.type_loss is not null then
            v_Return := one_LT_Cursor.type_loss;
         End If;
         
      END LOOP;


      CLOSE LT_Cursor;

      RETURN v_Return;
   ------------------------------------------------------------------------------------------------------------
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_number := SQLCODE;
         v_err_msg := SQLERRM (SQLCODE);
         v_err_msg :=
               'FAILED: '
            || v_err_number
            || ' * '
            || v_err_loc
            || ' * '
            || v_err_msg;
         DBMS_OUTPUT.put_line (v_err_msg);
         RETURN v_err_msg;
   END Get_IM_MSO_Type_Loss;


  FUNCTION Get_PU_MSO_Type_Loss (v_claim_number   IN     VARCHAR2,
                              v_class_code      IN     VARCHAR2,
                              v_Cov_Code        IN     VARCHAR2,
                              v_end_date        IN     DATE)
      RETURN VARCHAR2
   IS
      CURSOR LT_Cursor
      IS
           SELECT distinct
                           s.Claim_Number,
                           s.Policy_Number,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as CURRENT_RESERVE,
                           RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, '01012015', s.sdac_ind, s.state_cd, s.company, s.item_num)
                               as Starting_reserve,
                           s.company,
                           s.group_line,
                           s.user_line,
                           s.state_cd,
                           s.eff_date,
                           s.exp_date,
                           s.actg_date,
                           s.change_date,
                           s.book_date,
                           s.trans_code,
                           s.cov_code,
                           s.terr,
                           s.loc_zip,
                           s.loc_zip2,
                           s.type_loss,
                           s.loss_date,
                           s.cat_number,
                           s.reported_date,
                           s.item_num

             FROM RPT_CLAIMS_GL_STAT s
            WHERE     s.company = '04'
                  AND s.state_cd = 'NJ'
                  AND s.GROUP_LINE IN ('24')
                  AND s.user_line in ('44')
                  AND s.book_date <= v_end_date
                  AND s.sdac_ind = '1'
                  AND s.Claim_Number = v_claim_number
                  AND s.COV_CODE = v_cov_code
                  AND s.Class_Code = v_class_code
                  AND RPTVIEWER.GET_OS_RCS(s.claim_number, s.cov_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.state_cd, s.company, s.item_num)
                       <> 0
                  AND s.actg_date = 
                         (SELECT MAX (s1.actg_date)
                            FROM rpt_claims_gl_stat s1
                           WHERE     s.claim_number = s1.claim_number
                                 AND s.group_line = s1.group_line
                                 AND s.user_line = s1.user_line
                                 AND s.cov_code = s1.cov_code
                                 AND s.company = s1.company
                                 AND s.state_cd = s1.state_cd
                                 AND s.policy_number = s1.policy_number
                                 AND s.eff_date = s1.eff_date
                                 AND s.exp_date = s1.exp_date
                                 AND s.item_state_cd = s1.item_state_cd
                                 AND s.location = s1.location
                                 AND s.user_line = s1.user_line
                                 AND s.item_num = s1.item_num
                                 AND s.cov_code = s1.cov_code
                                 AND s.end_num = s1.end_num
                                 AND s.sdac_ind = s1.sdac_ind
                                 AND s1.book_date <= v_end_date);

      one_LT_Cursor      LT_Cursor%ROWTYPE;
      v_rowcount          NUMBER;
      v_return            VARCHAR2(2);

      /*
      Author: D. O'Sullivan
      Date: 4/2/08
      Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
      Modifications
      -------------
      */

      -- debugging/exception variables
      v_procname          VARCHAR2 (20) := 'Get_PU_MSO_Type_Loss';
      v_err_loc           VARCHAR2 (100);
      v_err_number        NUMBER;
      v_err_msg           VARCHAR2 (1500);
      v_start_date_time   DATE := SYSDATE;

   BEGIN
      v_err_loc := 'Get_PU_MSO_Type_Loss';
      v_rowcount := 0;
      v_Return := '';
      
      OPEN LT_Cursor;

      LOOP
         EXIT WHEN LT_Cursor%NOTFOUND;

         FETCH LT_Cursor INTO one_LT_Cursor;
         
         If one_LT_Cursor.type_loss is not null then
            v_Return := one_LT_Cursor.type_loss;
         End If;
         
      END LOOP;


      CLOSE LT_Cursor;

      RETURN v_Return;
   ------------------------------------------------------------------------------------------------------------
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_number := SQLCODE;
         v_err_msg := SQLERRM (SQLCODE);
         v_err_msg :=
               'FAILED: '
            || v_err_number
            || ' * '
            || v_err_loc
            || ' * '
            || v_err_msg;
         DBMS_OUTPUT.put_line (v_err_msg);
         RETURN v_err_msg;
   END Get_PU_MSO_Type_Loss;
    
END nd_bureau;
/


CREATE OR REPLACE PACKAGE BODY RPTSTAT.ND_BUREAU_CAR
AS
   /******************************************************************************
      NAME:       ND_Bureau_CAR
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        12/22/2014   D.PETERS        1. Created package shell.
      1.0        07/08/2016   R.CRAWFORD      2. Modified to create CAR package.
      1.0        10/06/2016   R.CRAWFORD      3. Ready for promotion.
      1.1        11/16/2017   R.Crawford      4. Various accumulated updates:
                                                a) Change to ZIP code handling:
                                                     Reporting guidelines require the 5-digit ZIP code, the subsequent ZIP+4 being optional and to be reported as spaces if omitted.
                                                     We were reporting zeroes when ZIP+4 data was absent, and much of the input data had zero-filled ZIP+4 fields as well.
                                                     Correcting to report spaces in both cases.
                                                    (Issue noted on ticket 84184.)
                                                b) Change to Outstanding Loss record generation:
                                                     Partially addressing a reserve-duplication bug when multiple transactions on a reserve occur on the same date with different Type of Loss values.
                                                     New logic gathers Type of Loss and related data from the most recent accounting date with a single transaction if one is available, otherwise uses the earliest accounting date.
                                                     It would be preferable to use the latest accounting date if all accounting dates have multiple transactions, but the relevant query is already overly complicated as is without trying to work that in within the week remaining for this update.
                                                    (Issue noted on ticket 84185.)
                                                c) Implementing additional reports that have been on hold since April:
                                                  i) Prior-term manual premium adjustments.  (Issue noted on ticket 84177.)
                                                  ii) Estimated rounding error (for monthly balancing).
                                                    (These were developed in February and intended to be implemented alongside tickets 82412 & 85630.)
                                                d) Changes to endorsement handling per CAR feedback.
                                                    (Tickets 82412 & 85630.)
                                                    NOTE: These endorsements are premium-only. If, at some point in the future, any miscellaneous endorsements (cov 959) are necessary on claims, further changes WILL be required.
                                                e) Miscellaneous code cleanup in a few locations. (Addressing a few minor issues encountered in the past year.)
                                                f) Commented out all DBMS_OUTPUT entries (debug logging to console) for promotion.

      Known issues:


   ******************************************************************************/

   v_filename                  VARCHAR2 (40);
   v_submittal_filename        VARCHAR2 (40);
   v_filename_farm             VARCHAR2 (40);
   v_submittal_filename_farm   VARCHAR2 (40);
   v_err_fl                    NUMBER := 0;
   V_BEGIN_DATE                DATE;
   V_END_DATE                  DATE;
   v_run_date                  VARCHAR2(8);

   v_end_actg_qtr              VARCHAR2 (4);
   v_return_value              VARCHAR (10);
   v_return_parm1              VARCHAR (10);
   v_return_limit              VARCHAR (10);
   v_run_type                  VARCHAR2 (1);    --- A, P, C -- All, Premiums, or Claims
   v_line                      VARCHAR2 (1);    --- A       -- All (Individual lines are not processed separately in this package.)
   v_start_time                VARCHAR (20);
   v_end_time                  VARCHAR (20);
   v_record_count              NUMBER := 0;
   v_month_run                 NUMBER;
   v_year_run                  NUMBER;
   v_Record_Number             NUMBER;

   v_pp_direct_tot             NUMBER;
   v_comm_direct_tot           NUMBER;
   v_pp_ceded_tot              NUMBER;
   v_comm_ceded_tot            NUMBER;
   v_sum_totals                NUMBER;

   TYPE Amount_TBL IS TABLE OF NUMBER(7);
   TYPE Code2_TBL IS TABLE OF VARCHAR2(2);
   TYPE Code3_TBL IS TABLE OF VARCHAR2(3);
   TYPE TBL_Code2_TBL IS TABLE OF Code2_TBL;
   
   --- ----------------------------------------------------------------------------
--- Added 10/24/2017 for rounding estimates.

   TYPE DecAmt_TBL IS TABLE OF NUMBER(9,2);

   v_prem_rounding             DecAmt_TBL := DecAmt_TBL(0,0,0,0,0,0,0);
   v_paid_rounding             DecAmt_TBL := DecAmt_TBL(0,0,0,0,0,0,0);
   v_osls_rounding             DecAmt_TBL := DecAmt_TBL(0,0,0,0,0,0,0);

--- ----------------------------------------------------------------------------


   PROCEDURE a_Main (v_month     IN NUMBER,
                     v_year      IN NUMBER,
                     v_type      IN VARCHAR2)
   IS
      v_month_alpha       VARCHAR2 (2);
      v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.MAIN';

      v_err_mssg          VARCHAR2 (1024);
      v_err_loc           VARCHAR2 (100);
   BEGIN

      -- Moved to start of procedure 10/24/2017 to address case of invalid month/year input.  -- ASI/RCrawford
      --DBMS_OUTPUT.ENABLE (NULL);
      --DBMS_OUTPUT.PUT_LINE (v_procname);
      v_err_loc := 'Main';


      SELECT TO_CHAR(SYSDATE, 'YYYYMMDD')
        INTO v_run_date
        FROM DUAL;


      v_month_run := v_month;
      v_year_run := v_year;

      DBMS_OUTPUT.ENABLE (NULL);
      DBMS_OUTPUT.PUT_LINE (v_procname);
      v_err_loc := 'Main';

      v_run_type := v_type;

      -- Moved up from premiums/claims procedures 10/24/2017.  -- ASI/RCrawford
      v_month_alpha := LPAD (TO_CHAR (v_month), 2, '0');
      v_begin_date := TO_DATE (v_month_alpha || '01' || TO_CHAR (v_year), 'MMDDYYYY');
      v_end_date := LAST_DAY(v_begin_date);


      --- 'A' = All
      --- 'P' = Premiums
      IF v_run_type = 'A' OR v_run_type = 'P'
      THEN
         premiums (v_month, v_year, 'A');
      END IF;


      --- 'A' = All
      --- 'C' = Claims
      IF v_run_type = 'A' OR v_run_type = 'C'
      THEN
         claims (v_month, v_year, 'A');
      END IF;

      -- Generate estimated rounding error report.  --Added 10/24/2017, ASI/RCrawford
      IF v_run_type IN ('A', 'P', 'C')
      THEN
         write_rounding_estimates('HO_STAT_OUT', v_begin_date);
      END IF;



     IF v_err_fl = 0
      THEN
         DBMS_OUTPUT.PUT_LINE ('End Program');
      ELSE
         DBMS_OUTPUT.PUT_LINE ('End Program with Error');
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

PROCEDURE Premiums (v_month     IN NUMBER,
                    v_year      IN NUMBER,
                    v_line      IN VARCHAR2)
IS
    v_subline_cnt       NUMBER;
    v_end_switch        VARCHAR2(1);
    v_month_alpha       VARCHAR2(2);
    v_num_Recs          NUMBER;
    v_total_amount      NUMBER;
    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                        := 'ND_BUREAU.PREMIUMS';

    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);
    v_WriteStatus       VARCHAR2 (1);

    -- Subline table for write loop
    SUBLINE_OUT          Code3_TBL := Code3_TBL( '611', '615', '618', '621', '625', '628', '611', '615', '621', '625' );

BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'Premiums - Begin';

/*  -- Moved to parent procedure 10/24/2017.  --ASI/RCrawford
    v_month_alpha := LPAD (TO_CHAR (v_month), 2, '0');
    v_begin_date := TO_DATE (v_month_alpha || '01' || TO_CHAR (v_year), 'MMDDYYYY');
    v_end_date := LAST_DAY(v_begin_date);
*/

    DBMS_OUTPUT.PUT_LINE ('Begin Date' || v_begin_date || ' ' || ' End Date' || v_end_date);


    v_err_loc := 'Premiums - Delete RPT_POLICY_CAR_STAT';

    -- Clear processing tables for new run.
    DELETE FROM RPT_POLICY_CAR_STAT;
    DELETE FROM RPT_POLICY_CAR_STAT_SUM1;
    DELETE FROM RPT_POLICY_CAR_STAT_SUMM;
    DELETE FROM RPT_POLICY_CAR_IXPV_SUMM;
    COMMIT;


    v_WriteStatus := 'W';
    v_subline_cnt := 1;
    v_end_switch := 'N';

    --- 'A' = All
    IF TRIM(v_line) = 'A'
    THEN
       IF (v_err_fl = 0)
       THEN
            v_Record_Number := 0;
            
         --- Generate report for prior term manual premium adjustments.    -- Added 10/24/2017, ASI/RCrawford
            collect_prem_ma_pm('HO_STAT_OUT', v_begin_date, v_end_date);

            
            --- Process premiums data
           collect_prem_car_ma_data_loop;

            --- Summarize Prem Data...
            summarize_car_prem_data;
           summarize_car_prem_data_2010;
          summarize_car_prem_summ;

            --- Update IXPOLVIN Table
           update_car_ixpolvin_summ;
           
           update rptstat.RPT_POLICY_CAR_STAT_SUMM set exposure=exposure*-1 
where prem_amount_1<>0
and sign(prem_amount_1)<>sign(exposure)
and exposure<>0;

commit;

update rptstat.RPT_POLICY_CAR_STAT_SUMM set exposure=exposure*-1 
where prem_amount_2<>0
and sign(prem_amount_2)<>sign(exposure)
and exposure<>0;

commit;

            --- Write premiums records
            LOOP
                EXIT WHEN v_subline_cnt > 6;

                IF v_subline_cnt = 6 THEN
                    v_end_switch := 'Y';
                END IF;

                write_fixed_file_CAR_LOZ ( 'P',
                                        'select * from RPT_POLICY_CAR_STAT_SUMM where SUBLINE = ''' || SUBLINE_OUT(v_subline_cnt) || ''' order by TRANS_TYPE, POLICY_ID, COMPANY_USE',
                                        'HO_STAT_OUT',
                                        'carPREM.txt',
                                        v_WriteStatus,
                                        32000,
                                        v_month,
                                        v_year,
                                        v_subline_cnt,
                                        '1',
                                        v_end_switch,
                                        v_num_Recs,
                                        v_total_amount);
                v_WriteStatus := 'A';

                v_subline_cnt := v_subline_cnt + 1;

            END LOOP;

        END IF;
    END IF;


    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

PROCEDURE Claims ( v_month     IN NUMBER,
                   v_year      IN NUMBER,
                   v_line      IN VARCHAR2 )
IS
    v_subline_cnt       NUMBER;
    v_OS_switch         VARCHAR2(1);
    v_end_switch        VARCHAR2(1);
    v_month_alpha       VARCHAR2(2);
    v_num_Recs          NUMBER;
    v_total_amount      NUMBER;
    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.CLAIMS';

    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);
    v_WriteStatusL      VARCHAR2 (1);
    v_WriteStatusO      VARCHAR2 (1);

    -- Subline table for write loop
    SUBLINE_OUT          Code3_TBL := Code3_TBL( '611', '615', '618', '621', '625', '628', '611', '615', '621', '625' );

BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);
    v_err_loc := 'Claims - Begin';

/*  -- Moved to parent procedure 10/24/2017.  --ASI/RCrawford
    v_month_alpha := LPAD (TO_CHAR (v_month), 2, '0');
    v_begin_date := TO_DATE (v_month_alpha || '01' || TO_CHAR (v_year), 'MMDDYYYY');
    v_end_date := LAST_DAY(v_begin_date);
*/


    v_err_loc := 'Claims - Delete RPT_CLAIMS_ISO_BOP_STAT';

    -- Clear processing table for new run
    DELETE FROM RPT_CLAIMS_CAR_STAT;
    COMMIT;

    v_WriteStatusL := 'W';

    v_subline_cnt := 1;
    v_end_switch := 'N';

    -- Check if processing quarterly outstanding loss data
    v_OS_switch := 'N';
    IF v_month_run IN (3, 6, 9, 12) THEN
        v_OS_switch := 'Y';
    END IF;


    --- 'A' = All
    IF TRIM(v_line) = 'A'
    THEN
        IF (v_err_fl = 0)
        THEN
            v_Record_Number := 0;

            --- Generate expense subrogation report.txt
            collect_claim_ma_8x_totals('HO_STAT_OUT', v_begin_date, v_end_date);

            --- Process paid loss data
            collect_claim_CAR_MA_paid;

            --- Write paid loss records
            LOOP
                EXIT WHEN v_subline_cnt > 6;

                IF v_OS_switch <> 'Y' AND v_subline_cnt = 6 THEN
                    v_end_switch := 'Y';
                END IF;

                write_fixed_file_CAR_LOZ ( 'L',
                                           'Select * from RPT_CLAIMS_CAR_STAT where SUBLINE = ''' || SUBLINE_OUT(v_subline_cnt) || ''' and TRANS_TYPE <> ''21'' order by RECORD_NUMBER',
                                           'HO_STAT_OUT',
                                           'carPAID.txt',
                                           v_WriteStatusL,
                                           32000,
                                           v_month,
                                           v_year,
                                           v_subline_cnt,
                                           '2',
                                           v_end_switch,
                                           v_num_Recs,
                                           v_total_amount );
                v_WriteStatusL := 'A';

                v_subline_cnt := v_subline_cnt + 1;

            END LOOP;


            -- Check for quarterly outstanding reporting months
            --If v_month_run in (3, 6, 9, 12)
            IF v_OS_switch = 'Y' THEN

                --- Process outstanding loss data
                collect_claim_CAR_MA_osls;

                --- Write outstanding loss records
                LOOP
                    EXIT WHEN v_subline_cnt > 10;

                    IF v_subline_cnt = 10 THEN
                        v_end_switch := 'Y';
                    END IF;

                    write_fixed_file_CAR_LOZ ( 'O',
                                               'Select * from RPT_CLAIMS_CAR_STAT where SUBLINE = ''' || SUBLINE_OUT(v_subline_cnt) || ''' and TRANS_TYPE = ''21'' order by RECORD_NUMBER',
                                               'HO_STAT_OUT',
                                               'carPAID.txt',
                                               v_WriteStatusL,
                                               32000,
                                               v_month,
                                               v_year,
                                               v_subline_cnt,
                                               '3',
                                               v_end_switch,
                                               v_num_Recs,
                                               v_total_amount );


                    v_subline_cnt := v_subline_cnt + 1;

                END LOOP;

            END IF;

        END IF;
    END IF;


    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
        DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
        rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

PROCEDURE collect_prem_car_ma_data_loop
IS

/*
    CAR monthly premiums processing procedure.
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.COLLECT_PREM_CAR_MA_DATA_LOOP';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR all_ma_stat
    IS
        SELECT *
        FROM RPT_POLICY_MA_STAT A
        WHERE
                A.DAC_IND = '1'
            AND a.book_date >= (v_begin_date)
            AND a.book_date <= (v_end_date)
            AND a.eff_date >= TRUNC(TO_DATE(TO_CHAR(v_year_run - 2), 'YYYY'), 'YEAR')
            AND a.coverage_code <> '988'
            AND NOT (a.written_prem = 0 AND a.coverage_code <> '220')

        ORDER BY a.policy_number,
                 a.actg_date,
                 a.trans_code,
                 a.au_old_new_stat,
                 a.item_num,
                 a.coverage_code;


    ma_stat                                all_ma_stat%ROWTYPE;

--- --- ---


--- CAR Stat Variables                                 ---Character Position
    CAR_COMPANY_ID                      VARCHAR2(3);     --1:3
    CAR_TRANS_TYPE                      VARCHAR2(2);     --4:5
    CAR_ACT_DATE                        VARCHAR2(2);     --6:7
    CAR_POL_EFF_DATE                    VARCHAR2(3);     --8:10
    CAR_TRAN_EFF_DATE                   VARCHAR2(3);     --11:13
    CAR_POL_EXP_DATE                    VARCHAR2(3);     --14:16
    CAR_STATE_CODE                      VARCHAR2(2);     --17:18
    CAR_TOWN_CODE                       VARCHAR2(3);     --19:21
    CAR_CAR_ID_CODE                     VARCHAR2(1);     --22
    CAR_TYPE_OF_RISK                    VARCHAR2(1);     --23
    CAR_ASL                             VARCHAR2(3);     --24:26
    CAR_SUBLINE                         VARCHAR2(3);     --27:29
    CAR_CLASS_CODE                      VARCHAR2(6);     --30:35
    v_LINE_SPEC_1                       VARCHAR2(25);    --36:60
    CAR_PRODUCER_CODE                   VARCHAR2(6);     --61:66
    v_LINE_SPEC_2                       VARCHAR2(5);     --67:71
    CAR_ZIP_CODE                        VARCHAR2(9);     --72:80
    CAR_EXPOSURE                        NUMBER(7);       --81:87
    v_LINE_SPEC_3                       VARCHAR2(6);     --88:93
    CAR_FILLER_94                       VARCHAR2(2);     --94:95
    CAR_PREM_AMOUNT_1                   NUMBER(8);       --96:103
    CAR_PREM_AMOUNT_2                   NUMBER(8);       --104:111
    CAR_FILLER_112                      VARCHAR2(3);     --112:114
    CAR_POLICY_ID                       VARCHAR2(16);    --115:130
    CAR_VIN                             VARCHAR2(17);    --131:147
    CAR_COMPANY_USE                     VARCHAR2(3);     --148:150
--- CAR Sort Key
    k_SORT_POLICY                       VARCHAR2(10);    --A00-S1-POL-NUM
    k_SORT_ID_CODE                      VARCHAR2(1);     --direct copy of CAR-ID-CODE
    k_SORT_SOURCE                       VARCHAR2(2);     --D77-SSOURCE
    k_SORT_CHG_DATE                     VARCHAR2(7);     --A24-SCHANGE-DATE
    k_SORT_RUN_DATE                     VARCHAR2(7);     --D36-SACTG-DATE
    k_SORT_OLD_NEW                      VARCHAR2(1);     --OLD-NEW-STAT
    k_SORT_ITEM                         VARCHAR2(3);     --B79-SITEM-NO
    k_SORT_SUBLINE                      VARCHAR2(3);     --B97-SCSP-SUBLINE
    k_SORT_09_10                        VARCHAR2(8);     --varying arrangements of CLASS_CODE
    k_SORT_ZONE                         VARCHAR2(1);     --conditional
    k_SORT_COV                          NUMBER(2);     --conditional
    k_SORT_COMMIS                       NUMBER(3,3);     --B87-SCOMM-PCT
    k_SORT_EXPOSURE                     NUMBER(7);       --direct copy of CAR-EXPOSURE
    k_SORT_NEW_FLAG_10                  VARCHAR2(1);     --conditional


--- Line-specific Stat Variables

 -- Liability
    CAR_LIMITS_ID                       VARCHAR2(1);
    CAR_BI_LIMITS                       VARCHAR2(2);
    CAR_PD_LIMIT                        VARCHAR2(2);
    CAR_MP_LIMIT                        VARCHAR2(2);
    CAR_UNINS_LIMIT                     VARCHAR2(2);
    CAR_UNDERINS_LIMIT                  VARCHAR2(2);
    CAR_POLLUTION_LIAB                  VARCHAR2(1);
    CAR_AGGR_LIMITS_ID                  VARCHAR2(1);

 -- No-Fault
    CAR_PIP_COVERAGE                    VARCHAR2(1);
    CAR_PIP_DEDUCTIBLE                  VARCHAR2(2);

 -- Physical Damage
    CAR_OTC_COVERAGE                    VARCHAR2(3);
    CAR_COLL_COVERAGE                   VARCHAR2(3);
    CAR_SYMBOL                          VARCHAR2(2);
    CAR_PREINSPECT                      VARCHAR2(1);
    CAR_ANTITHEFT                       VARCHAR2(1);
    CAR_ORIGINAL_COST                   VARCHAR2(3);
    CAR_OEM_COVERAGE                    VARCHAR2(1);
    CAR_VALUE_CODE                      VARCHAR2(3);
    CAR_HIGH_THEFT                      VARCHAR2(1);
    CAR_OTC_EXTRA_RISK                  VARCHAR2(1);
    CAR_COLL_EXTRA_RISK                 VARCHAR2(1);

 -- Other than Physical Damage
    CAR_PASSIVE_RESTRAINT               VARCHAR2(1);

 -- Commercial
    CAR_ZONE_RATING                     VARCHAR2(3);
    CAR_AGE_CODE                        VARCHAR2(1);
    CAR_RATING_ID                       VARCHAR2(1);
    CAR_TERRORISM                       VARCHAR2(1);
    CAR_EXP_RATING_MOD                  VARCHAR2(3);
    CAR_OTHER_RATING_MOD                VARCHAR2(3);

 -- Private Passenger
    CAR_MODEL_YEAR_CENTURY              VARCHAR2(1);
    CAR_ANNUAL_MILEAGE                  VARCHAR2(3);
    CAR_MODEL_YEAR                      VARCHAR2(2);
    CAR_DISCOUNT_CODE                   VARCHAR2(1);
    CAR_CONT_COV_DISC                   VARCHAR2(1);
    CAR_LOW_FREQ_DISC                   VARCHAR2(1);
    V_ITEM_CONT_COV_DISC                VARCHAR2(1);
    V_NAME_CONT_COV_DISC                VARCHAR2(1);
    V_ITEM_LOW_FREQ_DISC                VARCHAR2(1);
    V_NAME_LOW_FREQ_DISC                VARCHAR2(1);
    

--- END OF STAT VARIABLES



--- Individual record number for testing/debugging/summarization
    --v_RECORD_NUMBER                    NUMBER(6);  -- this is a global field, definition provided for documentation


--- Field for optionally sending debug data through to the output file - to use, comment out the filter on the column name in Procedure "write_fixed_file_ISO_LOZ"
    v_DEBUG_DATA                       VARCHAR2(40);


--- Function Output Fields
    f_MODEL_YEAR                       VARCHAR2(4);
    f_CENTURY                          VARCHAR2(1);
    f_LIST_MARKET                      NUMBER(8);
    f_ERROR_CODE                       VARCHAR2(3);


--- Procedural Variables
    v_CHAR_DATE                        VARCHAR2(8);
    v_TEMP_MONTH                       NUMBER(2);
    v_TEMP_YEAR                        NUMBER(4);

    v_TEMP_AGE                         VARCHAR2(1);
    v_TEMP_AGE_Y1                      NUMBER(4);
    v_TEMP_AGE_Y2                      NUMBER(4);
    v_DISC_WORK_AREA                   VARCHAR2(3);

    v_EXP_SW                           VARCHAR2(1);
    v_LIAB_LIMITS_SW                   VARCHAR2(1);
    v_PHYS_COV_SW                      VARCHAR2(1);

    v_LIMIT_AMT_PERSON                 NUMBER(7);
    v_LIMIT_AMT_OCCUR                  NUMBER(7);

    v_AGENT_NUM                        VARCHAR2(5);
    v_AGENT_SUB                        VARCHAR2(3);

    v_HOLD_CSL_LIMIT                   NUMBER(7);
    v_HOLD_CSL_LIMIT_OLD               NUMBER(7);
    v_HOLD_CSL_LIMIT_NEW               NUMBER(7);

    v_HOLD_POLICY_NUMBER               VARCHAR2(10);
    v_HOLD_ITEM_NUMBER                 VARCHAR2(3);
    v_HOLD_COLL_COVERAGE               VARCHAR2(3);
    v_HOLD_EXPOSURE                    NUMBER(7);
    v_HOLD_OTC_COVERAGE                VARCHAR2(3);

    v_SDIP_1                           NUMBER(4,3);
    v_MULTI_1                          NUMBER(4,3);
    v_GROUP_1                          NUMBER(4,3);
    v_SDIP_2                           NUMBER(4,3);
    v_MULTI_2                          NUMBER(4,3);
    v_GROUP_2                          NUMBER(4,3);

    v_WORK_RATING_MOD                  NUMBER(4);
    v_HOLD_RATING_MOD                  VARCHAR2(3);

    v_KEY_CLASS                        VARCHAR2(6);
    v_KEY_CLASS_XX                     VARCHAR2(2);

    v_INDEX                            NUMBER(2);

    v_DTA_SEARCH_VALUE                 VARCHAR2(4);
    v_EXP_M                            NUMBER(2);
    v_CHG_M                            NUMBER(2);

    v_LIST_MARKET                      NUMBER(8);

    v_SORT_FIRST_31                    VARCHAR2(31);
    v_SAVE_FIRST_31_OLD                VARCHAR2(31);
    v_SAVE_FIRST_31_NEW                VARCHAR2(31);
    v_SAVE_BI_CODE_OLD                 VARCHAR2(2);
    v_SAVE_BI_CODE_NEW                 VARCHAR2(2);



--- Reference Tables ---

    --- MMV LIMIT TABLE, 22 entries
    MMV_LIMIT_1         Amount_TBL := Amount_TBL(0000000, 0010000, 0015000, 0020000, 0020000, 0025000, 0025000, 0030000, 0035000, 0050000, 0100000, 0250000, 0500000, 0500000, 0000500, 0000750, 0001000, 0002000, 0005000, 0750000, 1000000, 9999999);
    MMV_LIMIT_2         Amount_TBL := Amount_TBL(0000000, 0020000, 0030000, 0040000, 0050000, 0050000, 0060000, 0070000, 0080000, 0100000, 0300000, 0500000, 0500000, 1000000, 0000000, 0000000, 0000000, 0000000, 0000000, 0000000, 1000000, 9999999);
    MMV_LIMIT_UM        Code2_TBL  := Code2_TBL(   '00',    '02',    '03',    '04',    '11',    '06',    '05',    '12',    '13',    '07',    '08',    '09',    '15',    '10',    '--',    '--',    '--',    '--',    '--',    '--',    '14',    '49');
    MMV_LIMIT_BI        Code2_TBL  := Code2_TBL(   '00',    '02',    '03',    '04',    '11',    '06',    '05',    '12',    '13',    '07',    '08',    '09',    '15',    '10',    '--',    '--',    '--',    '--',    '--',    '--',    '14',    '49');
    MMV_LIMIT_PD        Code2_TBL  := Code2_TBL(   '00',    '02',    '03',    '09',    '09',    '04',    '04',    '09',    '05',    '06',    '07',    '11',    '10',    '10',    '09',    '09',    '09',    '09',    '01',    '12',    '13',    '09');
    MMV_LIMIT_MP        Code2_TBL  := Code2_TBL(   '00',    '06',    '07',    '08',    '08',    '09',    '09',    '--',    '--',    '10',    '11',    '--',    '--',    '--',    '01',    '02',    '03',    '04',    '05',    '--',    '--',    '49');
    MMV_LIMIT_OCCUR     NUMBER(2) := 22;

    --- CSL LIMIT TABLE, 21 entries
    CSL_LIMIT_1         Amount_TBL := Amount_TBL(0035000, 0040000, 0045000, 0050000, 0075000, 0100000, 0150000, 0200000, 0250000, 0300000, 0400000, 0500000, 0750000, 1000000, 1500000, 2000000, 2500000, 3000000, 5000000, 7500000, 9999999);
    CSL_LIMIT_CODE      Code2_TBL  := Code2_TBL(   '03',    '07',    '04',    '08',    '09',    '10',    '11',    '12',    '13',    '14',    '15',    '16',    '17',    '18',    '19',    '20',    '21',    '22',    '23',    '24',    '25');
    CSL_LIMIT_OCCUR     NUMBER(2) := 21;

    --- MMV DEDUCTIBLE TABLE, 11 entries
    MMV_DEDUCTIBLE      Amount_TBL := Amount_TBL(0000000, 0000100, 0000200, 0000250, 0000300, 0000500, 0001000, 0002000, 0004000, 0008000, 9999999);
    MMV_DED_PIPI        Code2_TBL  := Code2_TBL(   '01',    '12',    '  ',    '13',    '  ',    '14',    '15',    '16',    '17',    '18',    '  ');
    MMV_DED_PIPIH       Code2_TBL  := Code2_TBL(   '01',    '22',    '  ',    '23',    '  ',    '24',    '25',    '26',    '27',    '28',    '  ');
    MMV_DED_CLWW        Code3_TBL  := Code3_TBL(  '   ',   '013',   '014',   '019',   '015',   '016',   '017',   '012',   '019',   '019',   '019');
    MMV_DED_CLWOW       Code3_TBL  := Code3_TBL(  '   ',   '074',   '075',   '079',   '076',   '077',   '078',   '072',   '079',   '079',   '079');
    MMV_DED_LT          Code3_TBL  := Code3_TBL(  '040',   '049',   '049',   '049',   '045',   '042',   '043',   '046',   '049',   '049',   '049');
     --MMV_DED_CP          Code3_TBL  := Code3_TBL(  '   ',   '031',   '033',   '004',   '035',   '037',   '039',   '023',   '004',   '004',   '004');
     -- Table changes per ticket 55526.
    MMV_DED_CP          Code3_TBL  := Code3_TBL(  '   ',   '004',   '004',   '004',   '035',   '037',   '039',   '023',   '004',   '004',   '004');
    MMV_DED_CP50        Code3_TBL  := Code3_TBL(  '   ',   '264',   '264',   '264',   '234',   '236',   '238',   '222',   '264',   '264',   '264');
    MMV_DED_CP100       Code3_TBL  := Code3_TBL(  '   ',   '464',   '464',   '464',   '434',   '436',   '438',   '422',   '464',   '464',   '464');
     -- End of table changes.
    MMV_DED_OCCUR       NUMBER(2) := 11;


    -- 1990 COMMERCIAL COSTS SYMBOLS TABLE
    HI_COST_COMCL_1990  Amount_TBL := Amount_TBL(0004501, 0006001, 0008001, 0010001, 0015001, 0020001, 0025001, 0040001, 0065001, 0090001, 9999999);
    SYMBOL_COMCL_1990   Code2_TBL  := Code2_TBL(   '01',    '02',    '03',    '04',    '05',    '06',    '07',    '08',    '10',    '11',    '12');
    COMCL_1990_OCCUR    NUMBER(2) := 11;




    --- DATE TEST TABLE, 13 entries
    DTA_1_MONTH         Code2_TBL  := Code2_TBL('01', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12');
    DTA_1_DAY           Code2_TBL  := Code2_TBL('01', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16');
    DTA_2_MONTH         Code2_TBL  := Code2_TBL('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '12');
    DTA_2_DAY           Code2_TBL  := Code2_TBL('15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '31');
    DTA_OCCUR           NUMBER(2) := 13;


    --- EXP MONTHS TABLE, 37 by 13 entries
    EXP_MONTHS          TBL_Code2_TBL := TBL_Code2_TBL( Code2_TBL('00', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '),
                                                        Code2_TBL('01', '00', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '),
                                                        Code2_TBL('02', '01', '00', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '),
                                                        Code2_TBL('03', '02', '01', '00', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '),
                                                        Code2_TBL('04', '03', '02', '01', '00', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '),
                                                        Code2_TBL('05', '04', '03', '02', '01', '00', '  ', '  ', '  ', '  ', '  ', '  ', '  '),
                                                        Code2_TBL('06', '05', '04', '03', '02', '01', '00', '  ', '  ', '  ', '  ', '  ', '  '),
                                                        Code2_TBL('07', '06', '05', '04', '03', '02', '01', '00', '  ', '  ', '  ', '  ', '  '),
                                                        Code2_TBL('08', '07', '06', '05', '04', '03', '02', '01', '00', '  ', '  ', '  ', '  '),
                                                        Code2_TBL('09', '08', '07', '06', '05', '04', '03', '02', '01', '00', '  ', '  ', '  '),
                                                        Code2_TBL('10', '09', '08', '07', '06', '05', '04', '03', '02', '01', '00', '  ', '  '),
                                                        Code2_TBL('11', '10', '09', '08', '07', '06', '05', '04', '03', '02', '01', '00', '  '),
                                                        Code2_TBL('12', '11', '10', '09', '08', '07', '06', '05', '04', '03', '02', '01', '00'),
                                                        Code2_TBL('13', '12', '11', '10', '09', '08', '07', '06', '05', '04', '03', '02', '01'),
                                                        Code2_TBL('14', '13', '12', '11', '10', '09', '08', '07', '06', '05', '04', '03', '02'),
                                                        Code2_TBL('15', '14', '13', '12', '11', '10', '09', '08', '07', '06', '05', '04', '03'),
                                                        Code2_TBL('16', '15', '14', '13', '12', '11', '10', '09', '08', '07', '06', '05', '04'),
                                                        Code2_TBL('17', '16', '15', '14', '13', '12', '11', '10', '09', '08', '07', '06', '05'),
                                                        Code2_TBL('18', '17', '16', '15', '14', '13', '12', '11', '10', '09', '08', '07', '06'),
                                                        Code2_TBL('19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '09', '08', '07'),
                                                        Code2_TBL('20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '09', '08'),
                                                        Code2_TBL('21', '20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '09'),
                                                        Code2_TBL('22', '21', '20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10'),
                                                        Code2_TBL('23', '22', '21', '20', '19', '18', '17', '16', '15', '14', '13', '12', '11'),
                                                        Code2_TBL('24', '23', '22', '21', '20', '19', '18', '17', '16', '15', '14', '13', '12'),
                                                        Code2_TBL('  ', '24', '23', '22', '21', '20', '19', '18', '17', '16', '15', '14', '13'),
                                                        Code2_TBL('  ', '  ', '24', '23', '22', '21', '20', '19', '18', '17', '16', '15', '14'),
                                                        Code2_TBL('  ', '  ', '  ', '24', '23', '22', '21', '20', '19', '18', '17', '16', '15'),
                                                        Code2_TBL('  ', '  ', '  ', '  ', '24', '23', '22', '21', '20', '19', '18', '17', '16'),
                                                        Code2_TBL('  ', '  ', '  ', '  ', '  ', '24', '23', '22', '21', '20', '19', '18', '17'),
                                                        Code2_TBL('  ', '  ', '  ', '  ', '  ', '  ', '24', '23', '22', '21', '20', '19', '18'),
                                                        Code2_TBL('  ', '  ', '  ', '  ', '  ', '  ', '  ', '24', '23', '22', '21', '20', '19'),
                                                        Code2_TBL('  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '24', '23', '22', '21', '20'),
                                                        Code2_TBL('  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '24', '23', '22', '21'),
                                                        Code2_TBL('  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '24', '23', '22'),
                                                        Code2_TBL('  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '24', '23'),
                                                        Code2_TBL('  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '  ', '24') );



--- --- ---

BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'collect_prem_car_ma_data_loop_insert';

    OPEN all_ma_stat;


--- Initial values at start of processing
    v_HOLD_POLICY_NUMBER := ' ';
    v_HOLD_COLL_COVERAGE := ' ';

    v_HOLD_CSL_LIMIT     := 0;
    v_HOLD_CSL_LIMIT_OLD := 0;
    v_HOLD_CSL_LIMIT_NEW := 0;


--- Main processing loop
    LOOP
        FETCH all_ma_stat INTO ma_stat;

        EXIT WHEN all_ma_stat%NOTFOUND;


    -- Uncomment when using v_DEBUG_DATA to reset the field to null at the start of each record
        --v_DEBUG_DATA = '';



--- Values determined at start of each record

        v_LIMIT_AMT_PERSON := ma_stat.LIMIT_AMT_PERSON;
        v_LIMIT_AMT_OCCUR := ma_stat.LIMIT_AMT_OCCUR;

        v_AGENT_NUM := NVL(ma_stat.AGENT_NUM, '     ');
        v_AGENT_SUB := NVL(ma_stat.AGENT_SUB, '   ');
        IF (NVL(ma_stat.TR_AGENT_NUM, ' ') <> ' ') OR (NVL(ma_stat.TR_AGENT_SUB, ' ') <> ' ') THEN
            v_AGENT_NUM := NVL(ma_stat.TR_AGENT_NUM, '     ');
            v_AGENT_SUB := NVL(ma_stat.TR_AGENT_SUB, '   ');
        END IF;


        v_SDIP_1  := ma_stat.SDIP_PCT_1;
        IF (v_SDIP_1 = 0) OR (v_SDIP_1 = 0.100) THEN
            v_SDIP_1 := 1.000;
        END IF;

        v_MULTI_1 := ma_stat.MULTI_PCT_1;
        IF (v_MULTI_1 = 0) OR (v_MULTI_1 = 0.100) THEN
            v_MULTI_1 := 1.000;
        END IF;

        v_GROUP_1 := ma_stat.GROUP_PCT_1;
        IF (v_GROUP_1 = 0) OR (v_GROUP_1 = 0.100) THEN
            v_GROUP_1 := 1.000;
        END IF;

        v_SDIP_2  := ma_stat.SDIP_PCT_2;
        IF (v_SDIP_2 = 0) OR (v_SDIP_2 = 0.100) THEN
            v_SDIP_2 := 1.000;
        END IF;

        v_MULTI_2 := ma_stat.MULTI_PCT_2;
        IF (v_MULTI_2 = 0) OR (v_MULTI_2 = 0.100) THEN
            v_MULTI_2 := 1.000;
        END IF;

        v_GROUP_2 := ma_stat.GROUP_PCT_2;
        IF (v_GROUP_2 = 0) OR (v_GROUP_2 = 0.100) THEN
            v_GROUP_2 := 1.000;
        END IF;



        -- Retrieve vehicle data from history table.
        f_ERROR_CODE := Get_CAR_Vehicle_Data(ma_stat.POLICY_NUMBER, ma_stat.GROUP_LINE, ma_stat.ITEM_NUM, ma_stat.AU_OLD_NEW_STAT, ma_stat.EFF_DATE, ma_stat.ACTG_DATE, ma_stat.AU_IDENT_NUM, f_LIST_MARKET, f_CENTURY, f_MODEL_YEAR);

        IF ma_stat.AU_LIST_MARKET <> f_LIST_MARKET THEN
            IF ma_stat.AU_LIST_MARKET = 0 THEN
                -- RDK13 record missing list market value.
                v_LIST_MARKET := f_LIST_MARKET;
            ELSE
                IF f_LIST_MARKET = 0 THEN
                    -- staging.history_wang_item table missing list market value.
                    v_LIST_MARKET := ma_stat.AU_LIST_MARKET;
                ELSE
                    -- RDK13 record and staging.history_wang_item table have different values.
                    v_LIST_MARKET := ma_stat.AU_LIST_MARKET;
                END IF;
            END IF;
        ELSE
            -- RDK13 value and staging.history_wang_item value either identical or both missing.
            v_LIST_MARKET := f_LIST_MARKET;
        END IF;




--------------------------
--- CAR Stat Variables ---
--------------------------

 -- CAR_COMPANY_ID                       VARCHAR2(3);
        CAR_COMPANY_ID := '664';


 -- CAR_TRANS_TYPE                       VARCHAR2(2);
        CAR_TRANS_TYPE := '  ';


        IF NVL(ma_stat.TRANS_CODE, '  ') = '80' THEN
            CAR_TRANS_TYPE := '11';
        ELSE
            IF NVL(ma_stat.TRANS_CODE, '  ') = '40' THEN
                CAR_TRANS_TYPE := '11';
            ELSE
                IF NVL(ma_stat.TRANS_CODE, '  ') = '20' THEN
                    CAR_TRANS_TYPE := '12';
                ELSE
                    IF NVL(ma_stat.TRANS_CODE, '  ') = '10' THEN
                        CAR_TRANS_TYPE := '14';
                    ELSE
                        IF NVL(ma_stat.TRANS_CODE, '  ') = '60' THEN
                            IF ma_stat.EFF_DATE = ma_stat.CHANGE_DATE THEN
                                CAR_TRANS_TYPE := '15';
                            ELSE
                                CAR_TRANS_TYPE := '13';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;


        IF NVL(ma_stat.BATCH_NUMBER, ' ') in ('PIP', 'T11') THEN
            IF NVL(ma_stat.TRANS_CODE, '  ') = '20' THEN
                CAR_TRANS_TYPE := '11';
            END IF;
        END IF;

        IF CAR_TRANS_TYPE = '11' THEN
            IF ma_stat.EFF_DATE <> ma_stat.CHANGE_DATE THEN
                CAR_TRANS_TYPE := '12';
            END IF;
        END IF;

        -- RIG TRANSACTION CODE ON MARKET CHANGES TO REPORT AS NEW/RENU
        IF CAR_TRANS_TYPE = '12' THEN
            IF NVL(ma_stat.CSP_CAR_BILL_FORM, ' ') in ('C1 ', 'C2 ') THEN
                CAR_TRANS_TYPE := '11';
            END IF;
        END IF;


 -- CAR_ACT_DATE                         VARCHAR2(2);
        CAR_ACT_DATE := CAR_Date_Conv(ma_stat.BOOK_DATE, 'MY');


 -- CAR_POL_EFF_DATE                     VARCHAR2(3);
        CAR_POL_EFF_DATE := CAR_Date_Conv(ma_stat.EFF_DATE, 'MYY');


 -- CAR_POL_EXP_DATE                     VARCHAR2(3);
        CAR_POL_EXP_DATE := CAR_Date_Conv(ma_stat.EXP_DATE, 'MYY');


 -- CAR_STATE_CODE                       VARCHAR2(2);
        CAR_STATE_CODE := '20';


 -- CAR_TOWN_CODE                        VARCHAR2(3);
        CAR_TOWN_CODE := ma_stat.TERRITORY;
        CAR_TOWN_CODE := LPAD(CAR_TOWN_CODE, 3, '0');

--  CV commented 6/3/19. unreadable  characters found int his column     IF NVL(ma_stat.AU_COMM_ZONE, '   ') NOT IN ('   ', '000') THEN
--            CAR_TOWN_CODE := '000';
--        END IF;

     IF NVL(ltrim(ma_stat.au_comm_zone,chr(ascii(ma_stat.au_comm_zone))), '   ') NOT IN ('   ', '000') THEN
            CAR_TOWN_CODE := '000';
        END IF;


---------------------------------------------------
--- Annual Statement Line & Subline             ---
---------------------------------------------------
 -- CAR_ASL                              VARCHAR2(3);
 -- CAR_SUBLINE                          VARCHAR2(3);
---------------------------------------------------

        CAR_ASL := ' ';
        CAR_SUBLINE := ' ';


        -- Private Passenger Auto
        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN

                       -- Liability coverages.
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN  --OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN    --Removed '959' from this handling 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
              CAR_ASL := '192';
              CAR_SUBLINE := '621';
            END IF;

            -- No-Fault coverages.
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
                CAR_ASL := '191';
                CAR_SUBLINE := '625';
            END IF;

            -- Physical Damage coverages.
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
                CAR_ASL := '211';
                CAR_SUBLINE := '628';
            END IF;


            -- Endorsement coverages.    -- Added separate handling for endorsements 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN

                IF ma_stat.END_NUM IS NULL THEN
                    -- Manual adjustments, use values from input record. (Default to Liability if NULL per previous handling.)
                    CAR_ASL := NVL(ma_stat.CSP_ANNUAL_STMT, '192');
                    CAR_SUBLINE := NVL(ma_stat.CSP_SUBLINE, '621');
                ELSE
                    CASE
                        WHEN TRIM(ma_stat.END_NUM) = 'ND0003S' THEN
                            -- Accident Forgiveness, misc OTC.
                            CAR_ASL := '211';
                            CAR_SUBLINE := '628';
                        ELSE
                            -- Unknown handling, use values from input record. (Default to Liability if NULL per previous handling.)
                            CAR_ASL := NVL(ma_stat.CSP_ANNUAL_STMT, '192');
                            CAR_SUBLINE := NVL(ma_stat.CSP_SUBLINE, '621');
                    END CASE;
                END IF;

            END IF;


        -- Commercial Auto
        ELSE

            -- Liability coverages.
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN --OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN    --Removed '959' from this handling 10/30/2017.  --ASI/RCrawford
                CAR_ASL := '194';
                CAR_SUBLINE := '611';
            END IF;

            -- No-Fault coverages.
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
                CAR_ASL := '193';
                CAR_SUBLINE := '615';
            END IF;

            -- Physical Damage coverages.
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
                CAR_ASL := '212';
                CAR_SUBLINE := '618';
            END IF;


            -- Endorsement coverages.    --- Added separate handling for endorsements 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN

                IF ma_stat.END_NUM IS NULL THEN
                    -- Manual adjustments, use values from input record. (Default to Liability if NULL per previous handling.)
                    CAR_ASL := NVL(ma_stat.CSP_ANNUAL_STMT, '194');
                    CAR_SUBLINE := NVL(ma_stat.CSP_SUBLINE, '611');
                ELSE
                    CASE
                        WHEN TRIM(ma_stat.END_NUM) = 'AP-2' THEN
                            -- Auto Enhancement package, misc OTC.
                            CAR_ASL := '212';
                            CAR_SUBLINE := '618';
                        WHEN TRIM(ma_stat.END_NUM) = 'CA 20 71' THEN
                            -- Auto Loan / Lease Gap coverage, misc OTC.
                            CAR_ASL := '212';
                            CAR_SUBLINE := '618';
                        WHEN TRIM(ma_stat.END_NUM) = 'CA 99 60' THEN
                            -- Audio / Visual / Electronic Data equipment coverage, misc OTC.
                            CAR_ASL := '212';
                            CAR_SUBLINE := '618';
                        ELSE
                            -- Unknown handling, use values from input record. (Default to Liability if NULL per previous handling.)
                            CAR_ASL := NVL(ma_stat.CSP_ANNUAL_STMT, '194');
                            CAR_SUBLINE := NVL(ma_stat.CSP_SUBLINE, '611');
                    END CASE;
                END IF;
           
            END IF;

        END IF;



 -- CAR_CLASS_CODE                       VARCHAR2(6);
        CAR_CLASS_CODE := SUBSTR(RPAD(NVL(ma_stat.CLASS_CODE, ' '), 6, ' '), 1, 6);

        IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('118', '217') THEN
            CAR_CLASS_CODE := SUBSTR(CAR_CLASS_CODE, 1, 4) || NVL(ma_stat.AU_VEH_SDIP_STEP, '  ');
        END IF;

        IF TRIM(NVL(ma_stat.END_NUM, ' ')) = 'FRSUR' THEN
            CAR_CLASS_CODE := '998000';
        END IF;

        IF SUBSTR(CAR_CLASS_CODE, 1, 4) = '1152' THEN
            IF ma_stat.EFF_DATE > TO_DATE('12312004', 'MMDDYYYY') THEN
                IF ma_stat.DRIVER_AGE > 74 AND ma_stat.DRIVER_AGE < 202 THEN
                    CAR_CLASS_CODE := '1162' || SUBSTR(CAR_CLASS_CODE, 5, 2);
                END IF;
            END IF;
        END IF;

        CAR_CLASS_CODE := TRANSLATE(CAR_CLASS_CODE, ' ', '0');


        -- continued after CAR_OTC_COVERAGE



 -- CAR_CAR_ID_CODE                      VARCHAR2(1);
        CAR_CAR_ID_CODE := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            CAR_CAR_ID_CODE := ma_stat.AU_MA_CAR_ID;
        END IF;

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_CAR_ID_CODE := NVL(ma_stat.REF_AG_MMV_CAR_CODE, '0');

            IF TRIM(NVL(ma_stat.CSP_POL_TYPE, ' ')) = 'F' THEN
                CASE CAR_CAR_ID_CODE
                    WHEN '0' THEN CAR_CAR_ID_CODE := '4';
                    WHEN '1' THEN CAR_CAR_ID_CODE := '5';
                    WHEN '2' THEN CAR_CAR_ID_CODE := '6';
                    WHEN '7' THEN CAR_CAR_ID_CODE := '3';
                    WHEN '8' THEN CAR_CAR_ID_CODE := '9';
                    ELSE          CAR_CAR_ID_CODE := CAR_CAR_ID_CODE;    --other values are not modified here.
                END CASE;
            END IF;
        END IF;


        IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('0483', '9620') THEN
            IF CAR_CAR_ID_CODE = '8' THEN
                CAR_CAR_ID_CODE := '0';
            ELSE
                IF CAR_CAR_ID_CODE = '9' THEN
                    CAR_CAR_ID_CODE := '1';
                END IF;
            END IF;
        END IF;

        IF SUBSTR(CAR_CLASS_CODE, 1, 4) = '0483' THEN
            IF ma_stat.EFF_DATE >= TO_DATE('04012009', 'MMDDYYYY') THEN
                CAR_CAR_ID_CODE := '8';
            END IF;
        END IF;

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('04012009', 'MMDDYYYY') THEN
                IF CAR_CAR_ID_CODE = ' ' THEN
                    IF NVL(ma_stat.REF_MA_CAR_ID, ' ') <> ' ' THEN
                        CAR_CAR_ID_CODE := ma_stat.REF_MA_CAR_ID;
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_TYPE_OF_RISK                     VARCHAR2(1);
        CAR_TYPE_OF_RISK := ' ';


        IF (v_GROUP_1 = 1) AND (v_GROUP_2 = 1) THEN
            CAR_TYPE_OF_RISK := '1';
        ELSE
            CAR_TYPE_OF_RISK := '3';
        END IF;


        IF ma_stat.ITEM_NUM = '001' THEN
            IF (v_SDIP_1 = 1) AND (v_MULTI_1 = 1) THEN
                CAR_TYPE_OF_RISK := '3';

                IF (v_GROUP_1 = 1) THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;
        END IF;


        IF ma_stat.ITEM_NUM >= '002' THEN
            IF (v_SDIP_2 = 1) AND (v_MULTI_2 = 1) THEN
                CAR_TYPE_OF_RISK := '3';

                IF (v_GROUP_2 = 1) THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;
        END IF;


        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_TYPE_OF_RISK := '1';
        END IF;

        IF SUBSTR(CAR_CLASS_CODE, 1, 4) = '7000' THEN
            CAR_TYPE_OF_RISK := '6';
        END IF;



        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311995', 'MMDDYYYY') THEN
                IF NVL(v_AGENT_NUM, ' ') = '20274' THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;

            IF ma_stat.EFF_DATE > TO_DATE('01051996', 'MMDDYYYY') THEN
                IF NVL(v_AGENT_NUM, ' ') IN ('20271', '20275', '20278', '20282', '20291', '20292', '20293', '20295', '20296', '20297', '20298', '20299', '20300', '20301', '20310', '20315') THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;

            IF ma_stat.EFF_DATE > TO_DATE('12311997', 'MMDDYYYY') THEN
                IF v_AGENT_NUM IN ('20277', '20278', '20282', '20284', '20290', '20292', '20293', '20295', '20296', '20297', '20298', '20299', '20300', '20307') THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;
        END IF;


        -- continued after CAR_EXP_RATING_MOD



 -- CAR_PRODUCER_CODE                    VARCHAR2(6);
        CAR_PRODUCER_CODE := ' ';

        CAR_PRODUCER_CODE := Get_CAR_Producer(v_AGENT_NUM, v_AGENT_SUB);



 -- CAR_ZIP_CODE                         VARCHAR2(9);
         CAR_ZIP_CODE := LPAD(NVL(ma_stat.LOC_ZIP_1, '00000'), 5, '0');

        -- Check for bad zip codes
        IF CAR_ZIP_CODE IN ('02146', '02147', '02154', '02258', '02159', '02160', '02161', '02162', '02164', '02165', '02166', '02167', '02158', '02168', '02195', '02173', '02174', '02175', '02178', '02179', '02181', '02157', '02192', '02194', '02193', '02172', '02272', '02277', '02401', '02402', '02403', '02404', '02405', '02411') THEN
            IF NVL(ma_stat.REF_ZIP_1, ' ') <> ' ' THEN
                -- Use value from ZDK01 to replace a problem ZIP code.
                CAR_ZIP_CODE := LPAD(ma_stat.REF_ZIP_1, 5, '0');
            END IF;
        END IF;

        --CAR_ZIP_CODE := CAR_ZIP_CODE || LPAD(NVL(ma_stat.LOC_ZIP_2, '0000'), 4, '0');    -- Changed 10/24/2017 per recent CAR errors.  --ASI/RCrawford

        IF NVL(ma_stat.LOC_ZIP_2, '0000') <> '0000' THEN
            CAR_ZIP_CODE := CAR_ZIP_CODE || LPAD(NVL(ma_stat.LOC_ZIP_2, '    '), 4, '0');
        ELSE
            CAR_ZIP_CODE := CAR_ZIP_CODE || '    ';
        END IF;



 -- CAR_EXPOSURE                         NUMBER(7);
        CAR_EXPOSURE := ma_stat.EXPOSURE;

        IF SUBSTR(CAR_CLASS_CODE, 1, 4) NOT IN ('6601', '6602', '6603', '6604', '6605', '6670', '6671', '6672', '6611', '6613', '5000', '0750', '0704', '0705', '7301', '7302', '7311', '7312', '7321', '7322', '7331', '7332', '7341', '7342', '7351', '7352', '7361', '7362', '0708', '0709', '7808', '7809', '7810', '7811', '7812', '7813', '7820', '7821', '7830', '7831') THEN
            IF ma_stat.EFF_DATE = ma_stat.CHANGE_DATE THEN

                CAR_EXPOSURE := 12;

            ELSE

                -- Search DATE TEST TABLE with EXP_DATE
                v_INDEX := 1;
                v_DTA_SEARCH_VALUE := LPAD(TO_CHAR(EXTRACT( MONTH FROM ma_stat.EXP_DATE)), 2, '0') || LPAD(TO_CHAR(EXTRACT( DAY FROM ma_stat.EXP_DATE)), 2, '0');

                LOOP
                    EXIT WHEN ( v_DTA_SEARCH_VALUE >= ( DTA_1_MONTH(v_INDEX) || DTA_1_DAY(v_INDEX) ) AND v_DTA_SEARCH_VALUE <= ( DTA_2_MONTH(v_INDEX) || DTA_2_DAY(v_INDEX) ) );-- OR ( v_INDEX > DTA_OCCUR );
                    v_INDEX := v_INDEX + 1;
                END LOOP;

                v_EXP_M := v_INDEX;


                -- Search DATE TEST TABLE with CHANGE_DATE
                v_INDEX := 1;
                v_DTA_SEARCH_VALUE := LPAD(TO_CHAR(EXTRACT( MONTH FROM ma_stat.CHANGE_DATE)), 2, '0') || LPAD(TO_CHAR(EXTRACT( DAY FROM ma_stat.CHANGE_DATE)), 2, '0');

                LOOP
                    EXIT WHEN ( v_DTA_SEARCH_VALUE >= ( DTA_1_MONTH(v_INDEX) || DTA_1_DAY(v_INDEX) ) AND v_DTA_SEARCH_VALUE <= ( DTA_2_MONTH(v_INDEX) || DTA_2_DAY(v_INDEX) ) );-- OR ( v_INDEX > DTA_OCCUR );
                    v_INDEX := v_INDEX + 1;
                END LOOP;

                v_CHG_M := v_INDEX;


                IF EXTRACT(YEAR FROM ma_stat.EXP_DATE) <> EXTRACT(YEAR FROM ma_stat.CHANGE_DATE) THEN
                    IF EXTRACT(YEAR FROM ma_stat.EXP_DATE) = EXTRACT(YEAR FROM ma_stat.CHANGE_DATE) + 1 THEN
                        v_EXP_M := v_EXP_M + 12;
                    ELSE
                        IF EXTRACT(YEAR FROM ma_stat.EXP_DATE) = EXTRACT(YEAR FROM ma_stat.CHANGE_DATE) + 2 THEN
                            v_EXP_M := v_EXP_M + 24;
                        END IF;
                    END IF;
                END IF;


                -- Retrieve value for CAR_EXPOSURE from EXP MONTHS TABLE
                CAR_EXPOSURE := EXP_MONTHS(v_EXP_M)(v_CHG_M);

            END IF;
        END IF;


        IF ( SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('7000', '8000', '6619', '1900', '7070', '9020', '9932', '9980', '9981', '9982', '9985', '9987', '9989', '9990') )
        OR ( SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('7301', '7302', '7311', '7312', '7321', '7322', '7331', '7332', '7820', '7821', '7830', '7831', '7341', '7342', '7351', '7352', '7361', '7362', '7808', '7809', '7810', '7811', '7812', '7813', '0708', '0709', '0704', '0705', '0750') AND CAR_ASL IN ('211', '212') ) THEN
            CAR_EXPOSURE := 0;
        END IF;


        --1727
        v_HOLD_EXPOSURE := CAR_EXPOSURE;


        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN

            IF NOT ( ( ma_stat.WRITTEN_PREM > 0 AND CAR_EXPOSURE > 0 ) OR ( ma_stat.WRITTEN_PREM < 0 AND CAR_EXPOSURE < 0 ) ) THEN
                CAR_EXPOSURE := CAR_EXPOSURE * -1;
            END IF;

        ELSE

            v_EXP_SW := '1';

            IF (( SUBSTR(CAR_CLASS_CODE, 5, 2) = '00' )
             OR ( ma_stat.EFF_DATE >= TO_DATE('01012006', 'MMDDYYYY') AND ( SUBSTR(CAR_CLASS_CODE, 5, 2) >= '01' AND SUBSTR(CAR_CLASS_CODE, 5, 2) <= '97' ) )
             OR ( ma_stat.EFF_DATE < TO_DATE('01012006', 'MMDDYYYY') AND ( SUBSTR(CAR_CLASS_CODE, 5, 2) >= '16' AND SUBSTR(CAR_CLASS_CODE, 5, 2) <= '35' ) )
            ) THEN
                IF ( ma_stat.WRITTEN_PREM > 0 AND CAR_EXPOSURE > 0 ) OR ( ma_stat.WRITTEN_PREM < 0 AND CAR_EXPOSURE < 0 ) THEN
                    v_EXP_SW := '0';
                END IF;
            END IF;

            IF (( ma_stat.EFF_DATE >= TO_DATE('01012006', 'MMDDYYYY') AND ( SUBSTR(CAR_CLASS_CODE, 5, 2) >= '98' AND SUBSTR(CAR_CLASS_CODE, 5, 2) <= '99' ) )
             OR ( ma_stat.EFF_DATE < TO_DATE('01012006', 'MMDDYYYY') AND ( SUBSTR(CAR_CLASS_CODE, 5, 2) >= '09' AND SUBSTR(CAR_CLASS_CODE, 5, 2) <= '14' ) )
            ) THEN
                IF ( ma_stat.WRITTEN_PREM < 0 AND CAR_EXPOSURE > 0 ) OR ( ma_stat.WRITTEN_PREM > 0 AND CAR_EXPOSURE < 0 ) THEN
                    v_EXP_SW := '0';
                END IF;
            END IF;

            IF v_EXP_SW = '1' THEN
                CAR_EXPOSURE := CAR_EXPOSURE * -1;
            END IF;

        END IF;


        -- continued after CAR_OTC_COVERAGE



  -- CAR_TRAN_EFF_DATE                    VARCHAR2(3);
        CAR_TRAN_EFF_DATE := CAR_Date_Conv(ma_stat.CHANGE_DATE, 'MYY');

        --1727
        --requires v_HOLD_EXPOSURE
        IF NVL(ma_stat.TRANS_SOURCE, ' ') = 'PM' THEN
            IF v_HOLD_EXPOSURE = 12 THEN
                IF CAR_POL_EFF_DATE <> CAR_TRAN_EFF_DATE THEN
                    CAR_TRAN_EFF_DATE := CAR_POL_EFF_DATE;
                END IF;
            ELSE
                v_CHAR_DATE := TO_CHAR(ma_stat.EFF_DATE, 'MMDDYYYY');
                v_TEMP_MONTH := TO_NUMBER(SUBSTR(v_CHAR_DATE, 1, 2));
                v_TEMP_YEAR := TO_NUMBER(SUBSTR(v_CHAR_DATE, 5, 4));

                v_TEMP_MONTH := v_TEMP_MONTH + 12;
                v_TEMP_MONTH := v_TEMP_MONTH - v_HOLD_EXPOSURE;
                IF v_TEMP_MONTH > 12 THEN
                    v_TEMP_MONTH := v_TEMP_MONTH - 12;
                    v_TEMP_YEAR := v_TEMP_YEAR + 1;
                END IF;

                v_CHAR_DATE := LPAD(TO_CHAR(v_TEMP_MONTH), 2, '0') || '01' || LPAD(TO_CHAR(v_TEMP_YEAR), 4, '0');
                CAR_TRAN_EFF_DATE := CAR_Date_Conv(TO_DATE(v_CHAR_DATE, 'MMDDYYYY'), 'MYY');
            END IF;
        END IF;


 -- CAR_FILLER_94                        VARCHAR2(2);
        CAR_FILLER_94:= ' ';


 -- CAR_PREM_AMOUNT_1                    NUMBER(8);
        CAR_PREM_AMOUNT_1 := 0;

        --- Liability Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('109', '111', '100', '101', '102', '104', '105', '106', '110', '112', '134', '959', '130', '145', '146', '147', '148', '149', '150', '151', '117', '118') THEN
                CAR_PREM_AMOUNT_1 := ROUND(ma_stat.WRITTEN_PREM);
            END IF;
        END IF;


        --- No-Fault Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
            CAR_PREM_AMOUNT_1 := ROUND(ma_stat.WRITTEN_PREM);
        END IF;


        --- Physical Damage Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            IF NVL(ma_stat.COVERAGE_CODE, '   ') NOT IN ('200', '201', '299', '205', '207') THEN
                CAR_PREM_AMOUNT_1 := ROUND(ma_stat.WRITTEN_PREM);
            END IF;
        END IF;


        --- Miscellaneous endorsements
        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '959' THEN    -- Added separate handling for endorsements 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
            CASE
                WHEN TRIM(ma_stat.END_NUM) IN ('ND0003S', 'AP-2', 'CA 20 71', 'CA 99 60') THEN
                    -- OTC endorsements
                    CAR_PREM_AMOUNT_1 := ROUND(ma_stat.WRITTEN_PREM);

                ELSE
                    -- Unknown handling, default to CAR_PREM_AMOUNT_1.
                    CAR_PREM_AMOUNT_1 := ROUND(ma_stat.WRITTEN_PREM);
            END CASE;
        END IF;


 -- CAR_PREM_AMOUNT_2                    NUMBER(8);
        CAR_PREM_AMOUNT_2 := 0;


        --- Liability Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN
            IF NVL(ma_stat.COVERAGE_CODE, '   ') NOT IN ('109', '111', '100', '101', '102', '104', '105', '106', '110', '112', '134', '959', '130', '145', '146', '147', '148', '149', '150', '151', '117', '118') THEN
                CAR_PREM_AMOUNT_2 := ROUND(CAR_PREM_AMOUNT_2 + ma_stat.WRITTEN_PREM);
            END IF;
        END IF;


        --- Physical Damage Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('200', '201', '299', '205', '207') THEN
                CAR_PREM_AMOUNT_2 := ROUND(ma_stat.WRITTEN_PREM);
            END IF;
        END IF;



 -- CAR_FILLER_112                       VARCHAR2(2);
        CAR_FILLER_112 := ' ';


 -- CAR_POLICY_ID                        VARCHAR2(16);
        CAR_POLICY_ID := RPAD(v_AGENT_NUM, 5, ' ') || RPAD(NVL(ma_stat.POLICY_NUMBER, ' '), 10, ' ');

        IF ma_stat.EFF_DATE >= TO_DATE('09012001', 'MMDDYYYY') THEN
            CAR_POLICY_ID := NVL(ma_stat.POLICY_NUMBER, ' ');
        END IF;


 -- CAR_VIN                              VARCHAR2(17);
        CAR_VIN := NVL(ma_stat.AU_IDENT_NUM, ' ');

        IF CAR_CLASS_CODE = '000000' THEN
            CAR_VIN := TO_CHAR(ma_stat.CHANGE_DATE, 'YYMMDD');
            CAR_VIN := CAR_VIN || '02020220202';
        END IF;

        CAR_VIN := RPAD(CAR_VIN, 17, ' ');


 -- CAR_COMPANY_USE                      VARCHAR2(3);
        CAR_COMPANY_USE := NVL(ma_stat.ITEM_NUM, '   ');

        IF NVL(ma_stat.TRANS_SOURCE, ' ') = 'PM' THEN
            CAR_COMPANY_USE := 'M' || SUBSTR(CAR_COMPANY_USE, 2, 2);
        END IF;

        IF CAR_CLASS_CODE = '000000' THEN
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('117', '127', '167', '207', '118', '217') THEN
                CAR_COMPANY_USE := 'S' || SUBSTR(CAR_COMPANY_USE, 2, 2);
            ELSE
                CAR_COMPANY_USE := 'X' || SUBSTR(CAR_COMPANY_USE, 2, 2);
            END IF;
        END IF;

        IF ma_stat.EFF_DATE >= TO_DATE('04012010', 'MMDDYYYY') AND ma_stat.GROUP_LINE = '06' AND NVL(ma_stat.AU_VEH_SDIP_STEP, '  ') <> '00' AND NVL(ma_stat.AU_VEH_SDIP_STEP, '  ') <> '  ' THEN
            IF NVL(ma_stat.TRANS_SOURCE, ' ') = 'PA' THEN
                CAR_COMPANY_USE := '*' || SUBSTR(CAR_COMPANY_USE, 2, 2);
            ELSE
                CAR_COMPANY_USE := 'm' || SUBSTR(CAR_COMPANY_USE, 2, 2);
            END IF;
        END IF;



--- =================
--- Liability Section
--- =================


 -- CAR_LIMITS_ID                        VARCHAR2(1);
        CAR_LIMITS_ID := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN
            CAR_LIMITS_ID := NVL(ma_stat.AU_LIMITS_ID, ' ');

            --OBI Coverage
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '104', '105', '106', '110', '112', '134', '959') THEN
                CAR_LIMITS_ID := '3';
            END IF;

            --CSL Coverage
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103') THEN
                CAR_LIMITS_ID := '2';
            END IF;

            IF CAR_LIMITS_ID NOT IN ('2', '3') THEN
                CAR_LIMITS_ID := '3';
            END IF;

            IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                IF ma_stat.EFF_DATE < TO_DATE('01012013', 'MMDDYYYY') THEN
                    CAR_LIMITS_ID := ' ';
                END IF;
            END IF;
        END IF;


 -- CAR_POLLUTION_LIAB                   VARCHAR2(1);
        CAR_POLLUTION_LIAB := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_POLLUTION_LIAB := '0';
        END IF;


---------------------------------------------------
--- Liability Limits Section                    ---
---------------------------------------------------
 -- CAR_BI_LIMITS                        VARCHAR2(2);
 -- CAR_PD_LIMIT                         VARCHAR2(2);
 -- CAR_MP_LIMIT                         VARCHAR2(2);
 -- CAR_UNINS_LIMIT                      VARCHAR2(2);
 -- CAR_UNDERINS_LIMIT                   VARCHAR2(2);
---------------------------------------------------

        CAR_BI_LIMITS := ' ';
        CAR_PD_LIMIT := ' ';
        CAR_MP_LIMIT := ' ';
        CAR_UNINS_LIMIT := ' ';
        CAR_UNDERINS_LIMIT := ' ';

        v_LIAB_LIMITS_SW := ' ';


        --Liability Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN

            IF NVL(ma_stat.TRANS_SOURCE, ' ') = 'PM' THEN
                -- If CBI-SDIP-COV or OBI-SDIP-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('117', '118') THEN
                    IF ma_stat.LIMIT_AMT_PERSON > 20000 THEN

                        v_INDEX := 1;
                        -- Search MMV LIMIT TABLE
                        LOOP
                            EXIT WHEN (v_INDEX = (MMV_LIMIT_OCCUR + 1)) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX) AND v_LIMIT_AMT_OCCUR = MMV_LIMIT_2(v_INDEX));
                            v_INDEX := v_INDEX + 1;
                        END LOOP;

                        -- If limit not found, use last entry on table
                        IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                            v_INDEX := (MMV_LIMIT_OCCUR);
                        END IF;

                        CAR_BI_LIMITS := MMV_LIMIT_BI(v_INDEX);

                        IF CAR_BI_LIMITS = '15' THEN
                            IF (v_year_run < 2007) OR (v_year_run = 2007 AND v_month_run < 4) THEN
                                CAR_BI_LIMITS := '49';
                            END IF;
                        END IF;

                        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '959' THEN
                            CAR_BI_LIMITS := '49';
                        END IF;

                        -- Skip to end of Liability Limits Section
                        v_LIAB_LIMITS_SW := '1';
                    END IF;
                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN

                -- If CBI-COV or CBI-SDIP-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('109', '111', '117') THEN
                    IF ma_stat.EFF_DATE > TO_DATE('12311995', 'MMDDYYYY') THEN
                        CAR_BI_LIMITS := '01';

                        IF NVL(ma_stat.COV_110_SW, ' ') = 'Y' THEN
                            CAR_BI_LIMITS := '04';
                        END IF;

                        -- Skip to end of Liability Limits Section
                        v_LIAB_LIMITS_SW := '1';
                    ELSE
                        IF ma_stat.EFF_DATE > TO_DATE('12311992', 'MMDDYYYY') THEN
                            CAR_BI_LIMITS := '04';
                            -- Skip to end of Liability Limits Section
                            v_LIAB_LIMITS_SW := '1';
                        ELSE
                            IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                                CAR_BI_LIMITS := '03';
                                -- Skip to end of Liability Limits Section
                                v_LIAB_LIMITS_SW := '1';
                            ELSE
                                CAR_BI_LIMITS := '02';
                                -- Skip to end of Liability Limits Section
                                v_LIAB_LIMITS_SW := '1';
                            END IF;
                        END IF;
                    END IF;
                END IF;

            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN

                IF NVL(ma_stat.AU_OLD_NEW_STAT, ' ') = '0' THEN
                    v_HOLD_CSL_LIMIT := v_HOLD_CSL_LIMIT_OLD;
                ELSE
                    v_HOLD_CSL_LIMIT := v_HOLD_CSL_LIMIT_NEW;
                END IF;

                -- If CSL-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103') THEN
                    IF v_LIMIT_AMT_PERSON = 0 THEN
                        v_LIMIT_AMT_PERSON := v_HOLD_CSL_LIMIT;

                        IF v_LIMIT_AMT_PERSON = 0 THEN
                            v_LIMIT_AMT_PERSON := 1000000;
                        END IF;
                    ELSE
                        IF NVL(ma_stat.AU_OLD_NEW_STAT, ' ') = '0' THEN
                            v_HOLD_CSL_LIMIT_OLD := v_LIMIT_AMT_PERSON;
                        ELSE
                            v_HOLD_CSL_LIMIT_NEW := v_LIMIT_AMT_PERSON;
                        END IF;
                    END IF;
                END IF;


                -- If CSL-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103') THEN

                    v_INDEX := 1;
                    -- Search CSL LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX = (CSL_LIMIT_OCCUR + 1)) OR (v_LIMIT_AMT_PERSON = CSL_LIMIT_1(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use entry for v_INDEX = 20
                    IF v_INDEX = (CSL_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (CSL_LIMIT_OCCUR - 1);
                    END IF;

                    IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '104', '105', '106', '110', '112', '134', '959') THEN
                        CAR_BI_LIMITS := CSL_LIMIT_CODE(v_INDEX);
                        -- Skip to end of Liability Limits Section
                        v_LIAB_LIMITS_SW := '1';
                    ELSE
                        CAR_PD_LIMIT := CSL_LIMIT_CODE(v_INDEX);
                        -- Skip to end of Liability Limits Section
                        v_LIAB_LIMITS_SW := '1';
                    END IF;

                END IF;

            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                -- If OBI-COV or OBI-SDIP-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '104', '105', '106', '110', '112', '134', '959', '118') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX = (MMV_LIMIT_OCCUR + 1)) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX) AND v_LIMIT_AMT_OCCUR = MMV_LIMIT_2(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_BI_LIMITS := MMV_LIMIT_BI(v_INDEX);

                    IF CAR_BI_LIMITS = '15' THEN
                        IF (v_year_run < 2007) OR (v_year_run = 2007 AND v_month_run < 4) THEN
                            CAR_BI_LIMITS := '49';
                        END IF;
                    END IF;

                    IF NVL(ma_stat.COVERAGE_CODE, '   ') = '959' THEN
                        CAR_BI_LIMITS := '49';
                    END IF;

                    -- Skip to end of Liability Limits Section
                    v_LIAB_LIMITS_SW := '1';
                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                -- If PD-COV or CR-COV or SU-COV or PD-SDIP-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('120', '113', '122', '121', '127') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX = (MMV_LIMIT_OCCUR + 1)) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_PD_LIMIT := MMV_LIMIT_PD(v_INDEX);

                    -- Skip to end of Liability Limits Section
                    v_LIAB_LIMITS_SW := '1';
                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                -- If MED-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('130') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX = (MMV_LIMIT_OCCUR + 1)) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_MP_LIMIT := MMV_LIMIT_MP(v_INDEX);

                    -- Skip to end of Liability Limits Section
                    v_LIAB_LIMITS_SW := '1';
                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --If U1-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('145') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX = (MMV_LIMIT_OCCUR + 1)) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX) AND v_LIMIT_AMT_OCCUR = MMV_LIMIT_2(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_UNINS_LIMIT := MMV_LIMIT_UM(v_INDEX);

                    IF CAR_UNINS_LIMIT = '15' THEN
                        IF (v_year_run < 2007) OR (v_year_run = 2007 AND v_month_run < 4) THEN
                            CAR_UNINS_LIMIT := '49';
                        END IF;
                    END IF;

                    IF NVL(ma_stat.COV_151_SW, ' ') = 'Y' THEN
                        CAR_UNDERINS_LIMIT := '04';
                    END IF;

                    -- Skip to end of Liability Limits Section
                    v_LIAB_LIMITS_SW := '1';
                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --If U2-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('151') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX = (MMV_LIMIT_OCCUR + 1)) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX) AND v_LIMIT_AMT_OCCUR = MMV_LIMIT_2(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_UNDERINS_LIMIT := MMV_LIMIT_UM(v_INDEX);

                    IF CAR_UNDERINS_LIMIT = '15' THEN
                        IF (v_year_run < 2007) OR (v_year_run = 2007 AND v_month_run < 4) THEN
                            CAR_UNDERINS_LIMIT := '49';
                        END IF;
                    END IF;

                    -- Skip to end of Liability Limits Section
                    v_LIAB_LIMITS_SW := '1';
                END IF;
            END IF;
        END IF;

---------------------------------------------------
--- End of Liability Limits Section             ---
---------------------------------------------------


 -- CAR_AGGR_LIMITS_ID                   VARCHAR2(1);
        CAR_AGGR_LIMITS_ID := ' ';

        -- AFTER LIABILITY SECTION

        IF NVL(ma_stat.AU_OLD_NEW_STAT, ' ') = '0' THEN
            v_HOLD_CSL_LIMIT := v_HOLD_CSL_LIMIT_OLD;
        ELSE
            v_HOLD_CSL_LIMIT := v_HOLD_CSL_LIMIT_NEW;
        END IF;

        IF NVL(ma_stat.GROUP_LINE, ' ') = '38' THEN
            IF SUBSTR(CAR_CLASS_CODE, 1, 4) = '0705' THEN
                IF v_HOLD_CSL_LIMIT = 2000000 THEN
                    CAR_AGGR_LIMITS_ID := '1';
                ELSE
                    IF v_HOLD_CSL_LIMIT = 1000000 THEN
                        CAR_AGGR_LIMITS_ID := '2';
                    ELSE
                        CAR_AGGR_LIMITS_ID := '9';
                    END IF;
                END IF;
            END IF;
        END IF;



--- ========
--- No-Fault
--- ========

 -- CAR_PIP_COVERAGE                     VARCHAR2(1);
        CAR_PIP_COVERAGE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
            CAR_PIP_COVERAGE := '1';
        END IF;


 -- CAR_PIP_DEDUCTIBLE                   VARCHAR2(2);
        CAR_PIP_DEDUCTIBLE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN

            IF NVL(ma_stat.DED_TYPE, ' ') = '1' THEN
                CASE ma_stat.DED_AMT
                    WHEN    0 THEN CAR_PIP_DEDUCTIBLE := '01';
                    WHEN  100 THEN CAR_PIP_DEDUCTIBLE := '12';
                    WHEN  200 THEN CAR_PIP_DEDUCTIBLE := '  ';
                    WHEN  250 THEN CAR_PIP_DEDUCTIBLE := '13';
                    WHEN  300 THEN CAR_PIP_DEDUCTIBLE := '  ';
                    WHEN  500 THEN CAR_PIP_DEDUCTIBLE := '14';
                    WHEN 1000 THEN CAR_PIP_DEDUCTIBLE := '15';
                    WHEN 2000 THEN CAR_PIP_DEDUCTIBLE := '16';
                    WHEN 4000 THEN CAR_PIP_DEDUCTIBLE := '17';
                    WHEN 8000 THEN CAR_PIP_DEDUCTIBLE := '18';
                    ELSE           CAR_PIP_DEDUCTIBLE := '  ';
                END CASE;
            ELSE
                CASE ma_stat.DED_AMT
                    WHEN    0 THEN CAR_PIP_DEDUCTIBLE := '01';
                    WHEN  100 THEN CAR_PIP_DEDUCTIBLE := '22';
                    WHEN  200 THEN CAR_PIP_DEDUCTIBLE := '  ';
                    WHEN  250 THEN CAR_PIP_DEDUCTIBLE := '23';
                    WHEN  300 THEN CAR_PIP_DEDUCTIBLE := '  ';
                    WHEN  500 THEN CAR_PIP_DEDUCTIBLE := '24';
                    WHEN 1000 THEN CAR_PIP_DEDUCTIBLE := '25';
                    WHEN 2000 THEN CAR_PIP_DEDUCTIBLE := '26';
                    WHEN 4000 THEN CAR_PIP_DEDUCTIBLE := '27';
                    WHEN 8000 THEN CAR_PIP_DEDUCTIBLE := '28';
                    ELSE           CAR_PIP_DEDUCTIBLE := '  ';
                END CASE;
            END IF;

            IF CAR_PIP_DEDUCTIBLE = '  ' THEN
                CAR_PIP_DEDUCTIBLE := '01';
            END IF;

        END IF;


--- ===============
--- Physical Damage
--- ===============


 -- CAR_SYMBOL                           VARCHAR2(2);
        CAR_SYMBOL := ' ';


        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN

            CAR_SYMBOL := NVL(ma_stat.AU_SYMBOL, '01');

            IF CAR_SYMBOL IN ('09', '00') OR NVL(ma_stat.AU_ISO_POLK, ' ') = 'P' THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN

                    v_INDEX := 1;

                    --Search 1990 COMMERCIAL COSTS SYMBOLS TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > COMCL_1990_OCCUR) OR (v_LIST_MARKET < HI_COST_COMCL_1990(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    IF v_INDEX = (COMCL_1990_OCCUR  + 1) THEN
                        v_INDEX := COMCL_1990_OCCUR;
                    END IF;

                    CAR_SYMBOL := SYMBOL_COMCL_1990(v_INDEX);

                END IF;
            END IF;



            -- AS OF 1/1/2011 - SYMBOL CODE IS NO LONGER REQUIRED FOR PRIVATE PASSENGER
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('01012011', 'MMDDYYYY') THEN
                    CAR_SYMBOL := ' ';
                END IF;
            END IF;

        END IF;



 -- CAR_PREINSPECT                       VARCHAR2(1);
        CAR_PREINSPECT := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            CAR_PREINSPECT := NVL(ma_stat.AU_PREINSPEC, ' ');

            IF ma_stat.EFF_DATE >= TO_DATE('01011986', 'MMDDYYYY') AND SUBSTR(NVL(ma_stat.POLICY_NUMBER, ' '), 1, 2) < '86' THEN
                CAR_PREINSPECT := '9';
            END IF;

            -- CHANGE PRINSPECTION LOGIC PER CAR 2002 AUDIT -  7/18/03 --
            IF CAR_PREINSPECT = '1' THEN
                CAR_PREINSPECT := '2';
            ELSE
                IF CAR_PREINSPECT = '3' THEN
                    CAR_PREINSPECT := '1';
                ELSE
                    IF CAR_PREINSPECT = '4' THEN
                        CAR_PREINSPECT := '2';
                    ELSE
                        CAR_PREINSPECT := '9';
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_ANTITHEFT                        VARCHAR2(1);
        CAR_ANTITHEFT := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '987', '   ', '217') THEN
                CAR_ANTITHEFT := NVL(ma_stat.AU_BURG_DEVICE, '0');
            END IF;
        END IF;



 -- CAR_OEM_COVERAGE                     VARCHAR2(1);
        CAR_OEM_COVERAGE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            CAR_OEM_COVERAGE := '0';
        END IF;


 -- CAR_ORIGINAL_COST                    VARCHAR2(3);
        CAR_ORIGINAL_COST := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') = '07' THEN
                IF ma_stat.EFF_DATE >= TO_DATE('07012011', 'MMDDYYYY') THEN
                    IF v_LIST_MARKET > 90000 THEN
                        IF v_LIST_MARKET > 999000 THEN
                            CAR_ORIGINAL_COST := '999';
                        ELSE
                            CAR_ORIGINAL_COST := ROUND(v_LIST_MARKET / 1000);
                        END IF;

                        CAR_ORIGINAL_COST := LPAD(CAR_ORIGINAL_COST, 3, '0');
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_VALUE_CODE                       VARCHAR2(3);
        CAR_VALUE_CODE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            IF (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0408' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0431')
             OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0508' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0531')
             OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0608' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0631') THEN

                IF ma_stat.EFF_DATE >= TO_DATE('01012005', 'MMDDYYYY') THEN
                    IF v_LIST_MARKET > 99900 THEN
                        CAR_VALUE_CODE := '999';
                    ELSE
                        --CAR_VALUE_CODE := ROUND(v_LIST_MARKET / 100);    -- NPS uses rounded value, CAR requires the value be rounded upward.
                        CAR_VALUE_CODE := TRUNC( (v_LIST_MARKET + 99) / 100 );
                    END IF;
                END IF;

                IF ma_stat.EFF_DATE < TO_DATE('01012005', 'MMDDYYYY') THEN
                    IF v_LIST_MARKET > 10000 THEN
                        CAR_VALUE_CODE := '999';
                    ELSE
                        --CAR_VALUE_CODE := ROUND(v_LIST_MARKET / 100);    -- NPS uses rounded value, CAR requires the value be rounded upward.
                        CAR_VALUE_CODE := TRUNC( (v_LIST_MARKET + 99) / 100 );
                    END IF;
                END IF;

                CAR_VALUE_CODE := LPAD(CAR_VALUE_CODE, 3, '0');

            END IF;
        END IF;



 -- CAR_HIGH_THEFT                       VARCHAR2(1);
        CAR_HIGH_THEFT := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                    CAR_HIGH_THEFT := NVL(ma_stat.AU_RISK_VEH, '0');

                    IF NVL(ma_stat.AU_VEH_AGE, ' ') > '5' THEN
                        CAR_HIGH_THEFT := '0';
                    END IF;
                END IF;
            END IF;
        END IF;


 -- CAR_OTC_EXTRA_RISK                   VARCHAR2(1);
        CAR_OTC_EXTRA_RISK := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                    CAR_OTC_EXTRA_RISK := NVL(ma_stat.AU_EXTRA_RISK_COMP, '0');
                END IF;
            END IF;
        END IF;


 -- CAR_COLL_EXTRA_RISK                  VARCHAR2(1);
        CAR_COLL_EXTRA_RISK := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                    CAR_COLL_EXTRA_RISK := NVL(ma_stat.AU_EXTRA_RISK_COLL, '0');
                END IF;
            END IF;
        END IF;



---------------------------------------------------
--- Physical Damage Coverage Section            ---
---------------------------------------------------
 -- CAR_OTC_COVERAGE                     VARCHAR2(3);
 -- CAR_COLL_COVERAGE                    VARCHAR2(3);
---------------------------------------------------

        CAR_OTC_COVERAGE := ' ';
        CAR_COLL_COVERAGE := ' ';

        v_PHYS_COV_SW := ' ';

        IF v_HOLD_POLICY_NUMBER <> ma_stat.POLICY_NUMBER OR v_HOLD_ITEM_NUMBER <> ma_stat.ITEM_NUM THEN
            v_HOLD_COLL_COVERAGE := ' ';
        END IF;


        --- Physical Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN

            --COL-COV
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('200', '201', '299') THEN
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '200' THEN

                    v_INDEX := 1;
                    -- Search MMV DEDUCTIBLE TABLE
                    LOOP
                        EXIT WHEN (v_INDEX = (MMV_DED_OCCUR + 1)) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If deductible not found, use last entry on table
                    IF v_INDEX = (MMV_DED_OCCUR + 1) THEN
                        v_INDEX := (MMV_DED_OCCUR);
                    END IF;

                    IF v_INDEX < 5 THEN
                        IF ma_stat.EFF_DATE >= TO_DATE('01011989', 'MMDDYYYY') THEN
                            v_INDEX := 5;
                        END IF;
                    END IF;

                    IF NVL(ma_stat.DED_TYPE, ' ') <> ' ' THEN
                        CAR_COLL_COVERAGE := MMV_DED_CLWW(v_INDEX);
                    ELSE
                        CAR_COLL_COVERAGE := MMV_DED_CLWOW(v_INDEX);
                    END IF;

                    -- Skip to end of Physical Damage Coverage Section
                    v_PHYS_COV_SW := '1';
                ELSE
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') = '201' THEN
                        CAR_COLL_COVERAGE := '092';

                        -- Skip to end of Physical Damage Coverage Section
                        v_PHYS_COV_SW := '1';
                    ELSE
                        IF NVL(ma_stat.CSP_COV, '   ') <> '   ' THEN
                            CAR_COLL_COVERAGE := ma_stat.CSP_COV;

                            -- Skip to end of Physical Damage Coverage Section
                            v_PHYS_COV_SW := '1';
                        ELSE
                            CAR_COLL_COVERAGE := '099';

                            -- Skip to end of Physical Damage Coverage Section
                            v_PHYS_COV_SW := '1';
                        END IF;
                    END IF;
                END IF;
            END IF;


            IF v_PHYS_COV_SW <> '1' THEN
                --LTD-COV-ST-A
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '206' THEN
                    CAR_COLL_COVERAGE := '041';

                    -- Skip to end of Physical Damage Coverage Section
                    v_PHYS_COV_SW := '1';
                END IF;
            END IF;


            IF v_PHYS_COV_SW <> '1' THEN
                --COL-SDIP-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '207' THEN
                    IF v_LIMIT_AMT_PERSON = 0 THEN

                        v_INDEX := 1;
                        -- Search MMV DEDUCTIBLE TABLE
                        LOOP
                            EXIT WHEN (v_INDEX = (MMV_DED_OCCUR + 1)) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                            v_INDEX := v_INDEX + 1;
                        END LOOP;

                        -- If deductible not found, use last entry on table
                        IF v_INDEX = (MMV_DED_OCCUR + 1) THEN
                            v_INDEX := (MMV_DED_OCCUR);
                        END IF;

                        IF v_INDEX < 5 THEN
                            IF ma_stat.EFF_DATE >= TO_DATE('01011989', 'MMDDYYYY') THEN
                                v_INDEX := 5;
                            END IF;
                        END IF;


                        IF NVL(ma_stat.DED_TYPE, ' ') <> ' ' THEN
                            CAR_COLL_COVERAGE := MMV_DED_CLWW(v_INDEX);
                        ELSE
                            CAR_COLL_COVERAGE := MMV_DED_CLWOW(v_INDEX);
                        END IF;

                        --For Comp SDIP coverage, keep the previous collision code
                        IF v_HOLD_COLL_COVERAGE <> ' ' THEN
                            CAR_COLL_COVERAGE := v_HOLD_COLL_COVERAGE;
                        END IF;

                        -- Skip to end of Physical Damage Coverage Section
                        v_PHYS_COV_SW := '1';

                    ELSE
                        CAR_COLL_COVERAGE := '092';

                        -- Skip to end of Physical Damage Coverage Section
                        v_PHYS_COV_SW := '1';
                    END IF;
                END IF;
            END IF;


            IF v_PHYS_COV_SW <> '1' THEN
                --LTD-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '205' THEN
                    CAR_COLL_EXTRA_RISK := ' ';

                    v_INDEX := 1;
                    -- Search MMV DEDUCTIBLE TABLE
                    LOOP
                        EXIT WHEN (v_INDEX = (MMV_DED_OCCUR + 1)) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If deductible not found, use last entry on table
                    IF v_INDEX = (MMV_DED_OCCUR + 1) THEN
                        v_INDEX := (MMV_DED_OCCUR);
                    END IF;

                    CAR_COLL_COVERAGE := MMV_DED_LT(v_INDEX);

                    -- Skip to end of Physical Damage Coverage Section
                    v_PHYS_COV_SW := '1';
                END IF;
            END IF;


            IF v_PHYS_COV_SW <> '1' THEN
                --OTC-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '987', '   ') THEN
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') = '210' THEN

                        v_INDEX := 1;
                        -- Search MMV DEDUCTIBLE TABLE
                        LOOP
                            EXIT WHEN (v_INDEX = (MMV_DED_OCCUR + 1)) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                            v_INDEX := v_INDEX + 1;
                        END LOOP;

                        -- If deductible not found, use last entry on table
                        IF v_INDEX = (MMV_DED_OCCUR + 1) THEN
                            v_INDEX := (MMV_DED_OCCUR);
                        END IF;

                        IF v_INDEX < 5 THEN
                            IF ma_stat.EFF_DATE >= TO_DATE('01011989', 'MMDDYYYY') THEN
                                v_INDEX := 5;
                            END IF;
                        END IF;

                        -- Determine which code to use based off Towing coverage indicator.
                        IF NVL(ma_stat.REF_TOW_IND, ' ') = '050' THEN
                            CAR_OTC_COVERAGE := MMV_DED_CP50(v_INDEX);
                        ELSE
                            IF NVL(ma_stat.REF_TOW_IND, ' ') = '100' THEN
                                CAR_OTC_COVERAGE := MMV_DED_CP100(v_INDEX);
                            ELSE
                                CAR_OTC_COVERAGE := MMV_DED_CP(v_INDEX);
                            END IF;
                        END IF;

                    ELSE
                        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '211' THEN
                            CAR_OTC_COVERAGE := '060';
                        ELSE
                            IF NVL(ma_stat.CSP_COV, '   ') <> '   ' THEN
                                CAR_OTC_COVERAGE := ma_stat.CSP_COV;
                            ELSE
                                CAR_OTC_COVERAGE := '089';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;


            IF v_PHYS_COV_SW <> '1' THEN
                --OTC-SDIP-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '217' THEN

                    v_INDEX := 1;
                    -- Search MMV DEDUCTIBLE TABLE
                    LOOP
                        EXIT WHEN (v_INDEX = (MMV_DED_OCCUR + 1)) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If deductible not found, use last entry on table
                    IF v_INDEX = (MMV_DED_OCCUR + 1) THEN
                        v_INDEX := (MMV_DED_OCCUR);
                    END IF;

                    IF v_INDEX < 5 THEN
                        IF ma_stat.EFF_DATE >= TO_DATE('01011989', 'MMDDYYYY') THEN
                            v_INDEX := 5;
                        END IF;
                    END IF;

                    -- Determine which code to use based off Towing coverage indicator.
                    IF NVL(ma_stat.REF_TOW_IND, ' ') = '050' THEN
                        CAR_OTC_COVERAGE := MMV_DED_CP50(v_INDEX);
                    ELSE
                        IF NVL(ma_stat.REF_TOW_IND, ' ') = '100' THEN
                            CAR_OTC_COVERAGE := MMV_DED_CP100(v_INDEX);
                        ELSE
                            CAR_OTC_COVERAGE := MMV_DED_CP(v_INDEX);
                        END IF;
                    END IF;

                    -- Skip to end of Physical Damage Coverage Section
                    v_PHYS_COV_SW := '1';
                END IF;
            END IF;


            IF v_PHYS_COV_SW <> '1' THEN
                --OTC-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '987', '   ') THEN
                    -- DED_TYPE = 1 indicates $100 comp glass deductible, add 1 to first digit of OTC code.
                    IF NVL(ma_stat.DED_TYPE, ' ') = '1' THEN
                        --CAR_OTC_COVERAGE := '1' || SUBSTR(CAR_OTC_COVERAGE, 2, 2);  --change from ticket 55526.
                        CAR_OTC_COVERAGE := TO_CHAR(TO_NUMBER(SUBSTR(CAR_OTC_COVERAGE, 1, 1)) + 1)
                                            || SUBSTR(CAR_OTC_COVERAGE, 2, 2);
                    END IF;

                    -- Skip to end of Physical Damage Coverage Section
                    v_PHYS_COV_SW := '1';
                END IF;
            END IF;


            IF v_PHYS_COV_SW <> '1' THEN
                --TOW-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '220' THEN
                    IF v_LIMIT_AMT_PERSON = 50 THEN
                        CAR_OTC_COVERAGE := '082';
                    ELSE
                        IF v_LIMIT_AMT_PERSON = 100 THEN
                            CAR_OTC_COVERAGE := '080';
                        ELSE
                            CAR_OTC_COVERAGE := '081';
                        END IF;
                    END IF;

                    IF CAR_OTC_COVERAGE = '081' THEN
                        IF SUBSTR(CAR_POL_EFF_DATE, 2, 2) > '01' THEN
                            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                                CAR_OTC_COVERAGE := '082';
                            END IF;
                        END IF;
                    END IF;

                    -- Skip to end of Physical Damage Coverage Section
                    v_PHYS_COV_SW := '1';
                END IF;
            END IF;


            IF v_PHYS_COV_SW <> '1' THEN
                --If SST-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '230' THEN
                    IF (v_LIMIT_AMT_PERSON = 0) OR (v_LIMIT_AMT_PERSON = 15) THEN
                        CAR_OTC_COVERAGE := '083';
                    ELSE
                        IF v_LIMIT_AMT_PERSON = 30 THEN
                            CAR_OTC_COVERAGE := '085';
                        ELSE
                            IF v_LIMIT_AMT_PERSON = 45 THEN
                                CAR_OTC_COVERAGE := '084';
                            ELSE
                                IF v_LIMIT_AMT_PERSON = 100 THEN
                                    CAR_OTC_COVERAGE := '086';
                                ELSE
                                    CAR_OTC_COVERAGE := '089';
                                END IF;
                            END IF;
                        END IF;
                    END IF;

                    IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
                        IF CAR_OTC_COVERAGE <> '083' THEN
                            CAR_OTC_COVERAGE := '083';
                        END IF;
                    END IF;

                    -- Skip to end of Physical Damage Coverage Section
                    v_PHYS_COV_SW := '1';
                END IF;
            END IF;


            IF v_PHYS_COV_SW <> '1' THEN
                --CB-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '250' THEN
                    CAR_OTC_COVERAGE := '089';
                    -- Skip to end of Physical Damage Coverage Section
                    v_PHYS_COV_SW := '1';
                END IF;
            END IF;
        END IF;


        --- Physical Coverage Endorsements        -- Added separate handling for endorsements 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
        IF ( NVL(ma_stat.COVERAGE_CODE, '   ') = '959' ) AND ( CAR_ASL IN ('211', '212') ) THEN
            IF ma_stat.END_NUM IS NULL THEN
                --Manual premium adjustment.
                CAR_OTC_COVERAGE := '089';
            ELSE
                CASE
                    WHEN TRIM(ma_stat.END_NUM) IN ('ND0003S', 'AP-2', 'CA 20 71') THEN
                        -- Miscellaneous OTC coverage.
                        CAR_OTC_COVERAGE := '089';

                    WHEN TRIM(ma_stat.END_NUM) = 'CA 99 60' THEN
                        -- Audio/Visual/Data electronic equipment OTC coverage.
                        CAR_OTC_COVERAGE := '087';

                    ELSE
                        -- Unknown handling, use misc OTC code.
                        CAR_OTC_COVERAGE := '089';
                END CASE;
            END IF;
        END IF;



---------------------------------------------------
--- End of Physical Damage Coverage Section     ---
---------------------------------------------------




--- Other than Physical Damage ---

 -- CAR_PASSIVE_RESTRAINT                VARCHAR2(1);
        CAR_PASSIVE_RESTRAINT := NVL(ma_stat.REF_PAS_RES_DIS, '0');



--- Commercial ---

 -- CAR_ZONE_RATING                      VARCHAR2(3);
        CAR_ZONE_RATING := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_ZONE_RATING := '000';
        END IF;

        --IF NVL(ma_stat.AU_COMM_ZONE, ' ') <> ' ' AND NVL(ma_stat.AU_COMM_ZONE, ' ') <> '000' THEN
        IF NVL(ltrim(ma_stat.au_comm_zone,chr(ascii(ma_stat.au_comm_zone))), ' ') <> ' ' AND NVL(ltrim(ma_stat.au_comm_zone,chr(ascii(ma_stat.au_comm_zone))), ' ') <> '000' THEN
            CAR_ZONE_RATING := ma_stat.AU_COMM_ZONE;
        END IF;



 -- CAR_AGE_CODE                         VARCHAR2(1);
        CAR_AGE_CODE := ' ';
        v_TEMP_AGE := NVL(ma_stat.AU_VEH_AGE, ' ');

        IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('01', '05', '06') THEN
            IF NVL(ma_stat.AU_VEH_YEAR, ' ') = ' ' THEN
                v_TEMP_AGE := ' ';
            ELSE
                v_TEMP_AGE_Y1 := EXTRACT(YEAR FROM ma_stat.EFF_DATE);
                IF EXTRACT(MONTH FROM ma_stat.EFF_DATE) > 9 THEN
                    v_TEMP_AGE_Y1 := v_TEMP_AGE_Y1 + 1;
                END IF;

                v_TEMP_AGE_Y2 := TO_NUMBER(NVL(ma_stat.AU_VEH_YEAR, '0'));
                IF v_TEMP_AGE_Y2 = 0 OR v_TEMP_AGE_Y2 < 30 THEN
                    v_TEMP_AGE_Y2 := v_TEMP_AGE_Y2 + 100;
                END IF;
                v_TEMP_AGE_Y2 := v_TEMP_AGE_Y2 + 1900;

                IF v_TEMP_AGE_Y2 > v_TEMP_AGE_Y1 THEN
                    v_TEMP_AGE_Y1 := v_TEMP_AGE_Y2;
                END IF;

                v_TEMP_AGE_Y1 := v_TEMP_AGE_Y1 - v_TEMP_AGE_Y2 + 1;

                IF v_TEMP_AGE_Y1 > 9 THEN
                    v_TEMP_AGE_Y1 := 9;
                END IF;

                v_TEMP_AGE := MOD(v_TEMP_AGE_Y1, 10);
            END IF;
        END IF;

        IF ma_stat.EFF_DATE >= TO_DATE('01011996', 'MMDDYYYY') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('01', '05', '06') THEN
                CAR_AGE_CODE := v_TEMP_AGE;
            END IF;
        END IF;



        -- Check for valid numeric value in f_MODEL_YEAR.
        IF INSTR(f_MODEL_YEAR, ' ') = 0 AND TRANSLATE(f_MODEL_YEAR, '1234567890', '          ') = '    ' THEN
            IF TO_NUMBER(f_MODEL_YEAR) <= 1980 THEN
                CAR_AGE_CODE := '0';
            END IF;
        ELSE
            -- This previous logic will break in 2021, only use if model year data from history table is not valid/numeric.
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
                IF ( NVL(ma_stat.AU_VEH_YEAR, ' ') > '20' AND NVL(ma_stat.AU_VEH_YEAR, ' ') < '81' ) THEN
                    CAR_AGE_CODE := '0';
                END IF;
            END IF;
        END IF;



 -- CAR_RATING_ID                        VARCHAR2(1);
        CAR_RATING_ID := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_RATING_ID := '9';

            IF NVL(ma_stat.EXPERIENCE_RATED, ' ') = 'Y' THEN
                CAR_RATING_ID := '1';
            END IF;
        END IF;

        -- Liability.
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN
            IF CAR_SUBLINE = '611' THEN
                IF NVL(ma_stat.EXPERIENCE_LIAB, ' ') > '000' THEN
                    CAR_RATING_ID := '1';
                ELSE
                    CAR_RATING_ID := '9';
                END IF;
            END IF;
        END IF;

        -- No-Fault
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN    --Added '959' to this handling 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
            IF CAR_SUBLINE = '615' THEN
                IF NVL(ma_stat.EXPERIENCE_LIAB, ' ') > '000' THEN
                    CAR_RATING_ID := '1';
                ELSE
                    CAR_RATING_ID := '9';
                END IF;
            END IF;
        END IF;

        -- Physical Damage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN    --Added '959' to this handling 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
            IF CAR_SUBLINE = '618' THEN
                IF NVL(ma_stat.EXPERIENCE_PD, ' ') > '000' THEN
                    CAR_RATING_ID := '1';
                ELSE
                    CAR_RATING_ID := '9';
                END IF;
            END IF;
        END IF;



 -- CAR_TERRORISM                        VARCHAR2(1);
        CAR_TERRORISM := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('01012007', 'MMDDYYYY') THEN
                CAR_TERRORISM := 'C';
            ELSE
                IF ma_stat.EFF_DATE > TO_DATE('04312003', 'MMDDYYYY') THEN
                    CAR_TERRORISM := '1';
                END IF;
            END IF;
        END IF;



 -- CAR_EXP_RATING_MOD                   VARCHAR2(3);
        CAR_EXP_RATING_MOD := ' ';

        IF ma_stat.ITEM_NUM = '001' THEN
            v_WORK_RATING_MOD := ROUND(1000 * v_SDIP_1 * v_MULTI_1 * v_GROUP_1);
        END IF;

        IF ma_stat.ITEM_NUM >= '002' THEN
            v_WORK_RATING_MOD := ROUND(1000 * v_SDIP_2 * v_MULTI_2 * v_GROUP_2);
        END IF;

        IF MOD(v_WORK_RATING_MOD, 1000) = 0 THEN
            CAR_EXP_RATING_MOD := '100';
        ELSE
            CAR_EXP_RATING_MOD := MOD(v_WORK_RATING_MOD, 1000);
            CAR_EXP_RATING_MOD := LPAD(CAR_EXP_RATING_MOD, 3, ' ');
        END IF;



        IF ma_stat.EFF_DATE < TO_DATE('01011996', 'MMDDYYYY') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                CAR_EXP_RATING_MOD := '100';

                IF v_AGENT_NUM IN ('20100', '20292', '20293', '20295', '20296', '20297', '20301', '20307', '20309', '20310', '20312') THEN
                    --10 PCT AGT
                    CAR_EXP_RATING_MOD := '900';
                ELSE
                    IF v_AGENT_NUM IN ('20281', '20283', '20284') THEN
                        --7.5 PCT AGT
                        CAR_EXP_RATING_MOD := '925';
                    ELSE
                        IF v_AGENT_NUM IN ('20291', '20971') THEN
                            --7 PCT AGT
                            CAR_EXP_RATING_MOD := '925';
                        ELSE
                            IF v_AGENT_NUM IN ('20298') THEN
                                --6 PCT AGT
                                CAR_EXP_RATING_MOD := '940';
                            ELSE
                                IF v_AGENT_NUM IN ('20029', '20236', '20271', '20274', '20275', '20277', '20278', '20282', '20290', '20299', '20300', '20315', '20317') THEN
                                    --5 PCT AGT
                                    CAR_EXP_RATING_MOD := '950';
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311995', 'MMDDYYYY') THEN
                IF v_AGENT_NUM = '20274' THEN
                    CAR_EXP_RATING_MOD := '000';
                END IF;
            END IF;
        END IF;

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE > TO_DATE('01051996', 'MMDDYYYY') THEN
                IF v_AGENT_NUM IN ('20271', '20275', '20278', '20282', '20291', '20292', '20293', '20295', '20296', '20297', '20298', '20299', '20300', '20301', '20310', '20315') THEN
                    CAR_EXP_RATING_MOD := '000';
                END IF;
            END IF;
        END IF;

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311997', 'MMDDYYYY') THEN
                IF v_AGENT_NUM IN ('20277', '20278', '20282', '20284', '20290', '20292', '20293', '20295', '20296', '20297', '20298', '20299', '20300', '20307') THEN
                    CAR_EXP_RATING_MOD := '000';
                END IF;
            END IF;
        END IF;

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF CAR_EXP_RATING_MOD = '000' THEN
                CAR_EXP_RATING_MOD := '100';
            END IF;
        END IF;


        v_HOLD_RATING_MOD := CAR_EXP_RATING_MOD;


        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_EXP_RATING_MOD := '100';
        END IF;

        -- Liability.
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN  --OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN    -- Removed '959' from this handling 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
            IF CAR_SUBLINE = '611' THEN
                IF NVL(ma_stat.EXPERIENCE_LIAB, ' ') > '000' THEN
                    CAR_EXP_RATING_MOD := ma_stat.EXPERIENCE_LIAB;
                END IF;
            END IF;
        END IF;

        -- No-Fault
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
            IF CAR_SUBLINE = '615' THEN
                IF NVL(ma_stat.EXPERIENCE_LIAB, ' ') > '000' THEN
                    CAR_EXP_RATING_MOD := ma_stat.EXPERIENCE_LIAB;
                END IF;
            END IF;
        END IF;

        -- Physical Damage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            IF CAR_SUBLINE = '618' THEN
                IF NVL(ma_stat.EXPERIENCE_PD, ' ') > '000' THEN
                    CAR_EXP_RATING_MOD := ma_stat.EXPERIENCE_PD;
                END IF;
            END IF;
        END IF;


        -- Miscellaneous endorsements        -- Added separate handling for endorsements 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '959' THEN
            IF ma_stat.END_NUM IS NULL THEN
                -- Manual premium adjustments, leave current value.
                NULL;
            ELSE
                CASE
                    WHEN TRIM(ma_stat.END_NUM) IN ('ND0003S', 'AP-2', 'CA 20 71', 'CA 99 60') THEN
                        -- Miscellaneous OTC coverages.
                        IF NVL(ma_stat.EXPERIENCE_PD, ' ') > '000' THEN
                            CAR_EXP_RATING_MOD := ma_stat.EXPERIENCE_PD;
                        END IF;

                    ELSE
                        -- Unknown handling, leave current value.
                        NULL;

                END CASE;
            END IF;
        END IF;


        -- PPA Rate Departure Factor no longer reportable 2009 and subsequent.
        IF CAR_SUBLINE IN ('621', '625', '628') THEN
            CAR_EXP_RATING_MOD := ' ';
        END IF;



 -- CAR_OTHER_RATING_MOD                 VARCHAR2(3);
        CAR_OTHER_RATING_MOD := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_OTHER_RATING_MOD := '100';
        END IF;



--- Private Passenger ---

 -- CAR_MODEL_YEAR_CENTURY               VARCHAR2(1);
        CAR_MODEL_YEAR_CENTURY := ' ';

        -- This code will break in 2026, fix w/ century digits available in Oracle
        IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('01011987', 'MMDDYYYY') THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') AND ma_stat.EFF_DATE > TO_DATE('12311998', 'MMDDYYYY') THEN
                    -- Use value from history table if available.
                    IF f_CENTURY <> ' ' AND f_ERROR_CODE = '   ' THEN
                        CAR_MODEL_YEAR_CENTURY := f_CENTURY;
                    ELSE
                        IF NVL(ma_stat.AU_VEH_YEAR, '  ') <> '  ' THEN
                            IF ma_stat.AU_VEH_YEAR > '25' AND ma_stat.AU_VEH_YEAR < '9A' THEN
                                CAR_MODEL_YEAR_CENTURY := '1';
                            ELSE
                                IF NVL(ma_stat.AU_VEH_TYPE, ' ') = 'AN' THEN
                                    CAR_MODEL_YEAR_CENTURY := '1';
                                ELSE
                                    CAR_MODEL_YEAR_CENTURY := '2';
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;




 -- CAR_ANNUAL_MILEAGE                   VARCHAR2(3);
        CAR_ANNUAL_MILEAGE := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
            CAR_ANNUAL_MILEAGE := '999';

            IF ma_stat.EFF_DATE >= TO_DATE('01011987', 'MMDDYYYY') THEN
                IF ma_stat.AU_ANNUAL_MILES = 0 THEN
                    CAR_ANNUAL_MILEAGE := '999';
                ELSE
                    CAR_ANNUAL_MILEAGE := ROUND(ma_stat.AU_ANNUAL_MILES / 100);
                END IF;

                IF (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0400' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0431')
                 OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0500' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0531')
                 OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0600' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0631')
                 OR (SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('1900', '7000', '8000', '9020', '0426', '0483', '0495', '0453', '0455', '0459', '0539')) THEN
                    CAR_ANNUAL_MILEAGE := '999';
                END IF;

                IF SUBSTR(CAR_CLASS_CODE, 1, 4) < '1   ' OR SUBSTR(CAR_CLASS_CODE, 1, 4) > '1899' THEN
                    CAR_ANNUAL_MILEAGE := '   ';
                END IF;
            END IF;

            CAR_ANNUAL_MILEAGE := LPAD(CAR_ANNUAL_MILEAGE, 3, '0');
        END IF;



 -- CAR_MODEL_YEAR                       VARCHAR2(2);
        CAR_MODEL_YEAR := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') AND ma_stat.EFF_DATE >= TO_DATE('01011996', 'MMDDYYYY') THEN
            CAR_MODEL_YEAR := NVL(ma_stat.AU_VEH_YEAR, ' ');

            IF CAR_MODEL_YEAR = ' ' THEN
                IF SUBSTR(CAR_POL_EFF_DATE, 1, 1) IN ('0', '-', '&') THEN
                    CAR_MODEL_YEAR := TO_NUMBER(SUBSTR(CAR_POL_EFF_DATE, 2, 2)) - TO_NUMBER(NVL(ma_stat.AU_VEH_AGE, '9')) + 2;
                ELSE
                    CAR_MODEL_YEAR := TO_NUMBER(SUBSTR(CAR_POL_EFF_DATE, 2, 2)) - TO_NUMBER(NVL(ma_stat.AU_VEH_AGE, '9')) + 1;
                END IF;
            END IF;

            CAR_MODEL_YEAR := LPAD(CAR_MODEL_YEAR, 2, '0');
        END IF;


 -- CAR_DISCOUNT_CODE                    VARCHAR2(1);
        CAR_DISCOUNT_CODE := ' ';

         IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
            IF ma_stat.EFF_DATE < TO_DATE('01011987', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AU_MULTI_IND, ' ') = 'Y' THEN
                    CAR_DISCOUNT_CODE := '1';
                ELSE
                    CAR_DISCOUNT_CODE := '9';
                END IF;
            ELSE
                v_DISC_WORK_AREA := 'NNN';

                IF NVL(ma_stat.AU_MULTI_IND, ' ') = 'Y' THEN
                    v_DISC_WORK_AREA := SUBSTR(v_DISC_WORK_AREA, 1, 1) || 'Y' || SUBSTR(v_DISC_WORK_AREA, 3, 1);
                    v_DISC_WORK_AREA := 'Y' || SUBSTR(v_DISC_WORK_AREA, 2, 2);
                END IF;

                IF ma_stat.AU_ANNUAL_MILES > 0 AND ma_stat.AU_ANNUAL_MILES <= 10000 THEN
                    v_DISC_WORK_AREA := SUBSTR(v_DISC_WORK_AREA, 1, 2) || 'Y';
                END IF;

                CASE v_DISC_WORK_AREA
                    WHEN 'YYN' THEN CAR_DISCOUNT_CODE := '1';
                    WHEN 'YNY' THEN CAR_DISCOUNT_CODE := '2';
                    WHEN 'YYY' THEN CAR_DISCOUNT_CODE := '4';
                    WHEN 'YNN' THEN CAR_DISCOUNT_CODE := '5';
                    WHEN 'NYY' THEN CAR_DISCOUNT_CODE := '3';
                    WHEN 'NNY' THEN CAR_DISCOUNT_CODE := '3';
                    WHEN 'NYN' THEN CAR_DISCOUNT_CODE := '9';
                    WHEN 'NNN' THEN CAR_DISCOUNT_CODE := '9';
                END CASE;

                IF ( SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0408' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0431' )
                 OR ( SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0508' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0531' )
                 OR ( SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0608' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0631' ) THEN
                    IF NVL(ma_stat.AU_MULTI_IND, ' ') = 'M' OR NVL(ma_stat.AU_BUMPER, ' ') = 'Y' THEN
                        CAR_DISCOUNT_CODE := '6';
                    ELSE
                        CAR_DISCOUNT_CODE := '9';
                    END IF;
                END IF;

                IF ma_stat.EFF_DATE >= TO_DATE('07012006', 'MMDDYYYY') THEN
                    IF CAR_DISCOUNT_CODE IN ('5', '9') THEN
                        CAR_DISCOUNT_CODE := '0';
                    ELSE
                        IF CAR_DISCOUNT_CODE = '3' THEN
                            CAR_DISCOUNT_CODE := '2';
                        END IF;
                    END IF;
                END IF;

                IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                    IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                        CASE CAR_DISCOUNT_CODE
                            WHEN '0' THEN CAR_DISCOUNT_CODE := 'A';
                            WHEN '1' THEN CAR_DISCOUNT_CODE := 'B';
                            WHEN '2' THEN CAR_DISCOUNT_CODE := 'C';
                            WHEN '4' THEN CAR_DISCOUNT_CODE := 'D';
                            WHEN '6' THEN CAR_DISCOUNT_CODE := 'E';
                            ELSE          CAR_DISCOUNT_CODE := CAR_DISCOUNT_CODE;
                        END CASE;
                    END IF;
                END IF;
            END IF;
        END IF;

        BEGIN
         SELECT DISTINCT HI.CONTINUOUS_COVERAGE,HI.LOW_FREQUENCY,HN.CONTINUOUS_COVERAGE,HN.LOW_FREQUENCY
         INTO V_ITEM_CONT_COV_DISC,V_ITEM_LOW_FREQ_DISC,V_NAME_CONT_COV_DISC,V_NAME_LOW_FREQ_DISC
         FROM STAGING.HISTORY_WANG_POLICY HP,
              STAGING.HISTORY_WANG_ITEM HI,
              STAGING.HISTORY_WANG_NAME HN
       WHERE HP.POL_NUM=HI.POL_NUM
       AND HP.RUN_DATE=HI.RUN_DATE
       AND HI.POL_NUM = HN.POL_NUM
       AND HI.RUN_DATE = HN.RUN_DATE
       AND HI.DR_ASSIGN=HN.NAME_SEQ
       AND HN.NAME_TYPE='DR'
       AND HP.POL_NUM=ma_stat.policy_number
       AND HP.RUN_DATE=ma_stat.actg_date
       AND HI.ITEM_SEQ=ltrim(ma_stat.item_num,'0'); 
        EXCEPTION
        WHEN OTHERS THEN 
        V_ITEM_CONT_COV_DISC:=NULL;
        V_ITEM_LOW_FREQ_DISC:=NULL;
        V_NAME_CONT_COV_DISC:=NULL;
        V_NAME_LOW_FREQ_DISC:=NULL;
        END; 

 -- CAR_CONT_COV_DISC                    VARCHAR2(1);
       CAR_CONT_COV_DISC := '';
        -- CAR_LOW_FREQ_DISC                    VARCHAR2(1);
        CAR_LOW_FREQ_DISC := '';
       --ADDED CV 3/14/19 TO CORRCT THE JAN 2019 FILE.  STAT REQ CHANGED
      

    /* cv3/14/19     IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('01011987', 'MMDDYYYY') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                    IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                        IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987')) THEN
                            IF ma_stat.AU_CONTCOV_LOWFREQ IN ('1', '3') THEN
                                CAR_CONT_COV_DISC := '1';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;*/



 -- CAR_LOW_FREQ_DISC                    VARCHAR2(1);
  --      CAR_LOW_FREQ_DISC := '';
--ADDED CV 3/14/19 TO CORRCT THE JAN 2019 FILE.  STAT REQ CHANGED       
           IF ma_stat.EFF_DATE >= TO_DATE('01012019', 'MMDDYYYY') then
                       IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                     IF V_ITEM_CONT_COV_DISC='Y' AND V_NAME_CONT_COV_DISC='Y' THEN CAR_CONT_COV_DISC:='1';
                            ELSIF NVL(V_ITEM_CONT_COV_DISC,'N')<>'Y' AND V_NAME_CONT_COV_DISC='Y' THEN  CAR_CONT_COV_DISC:='2';
                            ELSE CAR_CONT_COV_DISC:='0';
                            END IF;
                       
                       IF V_ITEM_LOW_FREQ_DISC='Y' AND V_NAME_LOW_FREQ_DISC='Y' THEN CAR_LOW_FREQ_DISC:='1';
                            ELSIF NVL(V_ITEM_LOW_FREQ_DISC,'N')<>'Y' AND V_NAME_LOW_FREQ_DISC='Y' THEN  CAR_LOW_FREQ_DISC:='2';
                            ELSE CAR_LOW_FREQ_DISC:='0';
                            END IF;
                    eND IF;
             else
                       IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                            IF ma_stat.EFF_DATE >= TO_DATE('01011987', 'MMDDYYYY') THEN
                                IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                                    IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                                        IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987')) THEN
                                            IF ma_stat.AU_CONTCOV_LOWFREQ IN ('2', '3') THEN
                                                CAR_LOW_FREQ_DISC := '1';
                                            END IF;
                                        END IF;
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                        
                        IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                            IF ma_stat.EFF_DATE >= TO_DATE('01011987', 'MMDDYYYY') THEN
                                IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                                    IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                                        IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987')) THEN
                                            IF ma_stat.AU_CONTCOV_LOWFREQ IN ('1', '3') THEN
                                                CAR_CONT_COV_DISC := '1';
                                            END IF;
                                        END IF;
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
             end if;       
        /* cv3/14/19IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('01011987', 'MMDDYYYY') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                    IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                        IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987')) THEN
                            IF ma_stat.AU_CONTCOV_LOWFREQ IN ('2', '3') THEN
                                CAR_LOW_FREQ_DISC := '1';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;*/




---------------------------------------------------
--- After Line-Specific Processing              ---
---------------------------------------------------


 -- v_HOLD_OTC_COVERAGE                VARCHAR2(3);
        --Physical Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '987') THEN
            v_HOLD_OTC_COVERAGE := CAR_OTC_COVERAGE;
        END IF;

        --No-Fault Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
            v_HOLD_OTC_COVERAGE := CAR_PIP_COVERAGE || CAR_PIP_DEDUCTIBLE;
        END IF;

        --Liability Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN  --OR (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN    -- Removed '959' from this handling 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
            v_HOLD_OTC_COVERAGE := CAR_BI_LIMITS || SUBSTR(CAR_PD_LIMIT, 1, 1);
        END IF;


        -- Miscellaneous endorsements.        -- Added separate handling for endorsements 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') = '959') THEN
            CASE
                WHEN CAR_ASL IN ('192', '194') THEN v_HOLD_OTC_COVERAGE := CAR_BI_LIMITS || SUBSTR(CAR_PD_LIMIT, 1, 1);
                WHEN CAR_ASL IN ('191', '193') THEN v_HOLD_OTC_COVERAGE := CAR_PIP_COVERAGE || CAR_PIP_DEDUCTIBLE;
                WHEN CAR_ASL IN ('211', '212') THEN v_HOLD_OTC_COVERAGE := CAR_OTC_COVERAGE;
                ELSE NULL;
            END CASE;
        END IF;

 -- CAR_CLASS_CODE                       VARCHAR2(6);
        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF v_HOLD_OTC_COVERAGE IN ('056', '057', '080', '081', '082', '083', '084', '085', '086', '087', '089', '096', '097', '099') THEN
                CAR_CLASS_CODE := SUBSTR(CAR_CLASS_CODE, 1, 4) || '00';
            END IF;
        END IF;


        -- PersonalPak coverage.
        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '987' THEN
            CAR_CLASS_CODE := '998000';
        END IF;


        -- Miscellaneous endorsements.        -- Added separate handling for endorsements 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '959' THEN
            IF ma_stat.END_NUM IS NULL THEN
                -- Manual premium adjustments or missing END_NUM, set to '998000', all other special rating and adjustment.
                CAR_CLASS_CODE := '998000';

            ELSE

                CASE
                    WHEN TRIM(ma_stat.END_NUM) ='ND0003S' THEN
                        -- PPA Accident Forgiveness, use class code '998000', all other special rating and adjustment.
                        CAR_CLASS_CODE := '998000';

                    WHEN TRIM(ma_stat.END_NUM) IN ('AP-2', 'CA 20 71') THEN
                        -- Commercial misc, leave current value.
                        NULL;

                    WHEN TRIM(ma_stat.END_NUM) = 'CA 99 60' THEN
                        -- Audio/visual/data equipment coverage, omit class code per Appendix A.
                        CAR_CLASS_CODE := '      ';

                    ELSE
                        -- Unknown handling, do nothing.
                        NULL;

                END CASE;

            END IF;
        END IF;


 -- CAR_EXPOSURE                         NUMBER(7);
        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            IF CAR_OTC_COVERAGE IN ('050', '051', '052', '053', '054', '059', '080', '081', '082', '083', '084', '087', '089', '202', '203', '204', '211', '212', '213', '214', '215', '216', '217', '090', '091', '093', '094', '099', '311', '312', '313', '317', '477', '478') THEN
                CAR_EXPOSURE := 0;
            END IF;
        END IF;

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF CAR_OTC_COVERAGE IN ('056', '057', '080', '081', '082', '083', '084', '085', '086', '087', '089', '096', '097', '099') THEN
                CAR_EXPOSURE := 0;
            END IF;
        END IF;




 -- CAR_TYPE_OF_RISK                     VARCHAR2(1);
        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF v_HOLD_RATING_MOD = '100' THEN
                CAR_TYPE_OF_RISK := '1';
            END IF;
        END IF;

        -- PersonalPak coverage.
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('987') THEN
            CAR_TYPE_OF_RISK := '9';
        END IF;


        -- Miscellaneous endorsements.        -- Added separate handling for endorsements 10/30/2017, tickets 82412 & 85630.  --ASI/RCrawford
        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '959' THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN    --Only adjust type of risk on endorsements for personal auto.
                IF ma_stat.END_NUM IS NULL THEN
                    -- Manual premium adjustments, leave current value.
                    NULL;

                ELSE

                    CASE
                        WHEN TRIM(ma_stat.END_NUM) ='ND0003S' THEN
                            -- PPA Accident Forgiveness, use type of risk code '9', company specific coverage.
                            CAR_TYPE_OF_RISK := '9';

                        ELSE
                            -- Unknown handling, do nothing.
                            NULL;

                    END CASE;

                END IF;
            END IF;
        END IF;




 -- Added the following section 11/07/2017, tickets 82412 & 85630.  --ASI/RCrawford
--------------------------------------------------------
--- Limited Reporting for Miscellaneous Endorsements ---
---          Per Stat Manuals - Appendix A           ---
--------------------------------------------------------

        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '959' THEN

            -- PPA Accident Forgiveness (OTC)
            IF TRIM(ma_stat.END_NUM) = 'ND0003S' THEN
                CAR_COLL_COVERAGE      := ' ';

                CAR_TOWN_CODE          := ' ';
                CAR_MODEL_YEAR_CENTURY := ' ';
                CAR_ANNUAL_MILEAGE     := ' ';
                CAR_MODEL_YEAR         := ' ';
                CAR_ANTITHEFT          := ' ';
                CAR_OEM_COVERAGE       := ' ';
                CAR_DISCOUNT_CODE      := ' ';
                CAR_VALUE_CODE         := ' ';
                CAR_HIGH_THEFT         := ' ';
                CAR_OTC_EXTRA_RISK     := ' ';
                CAR_COLL_EXTRA_RISK    := ' ';
                CAR_ZIP_CODE           := ' ';
                CAR_EXPOSURE           := 0;
                CAR_VIN                := ' ';
            END IF;


            -- Commercial OTC Miscellaneous
            IF TRIM(ma_stat.END_NUM) IN ('AP-2','CA 20 71') THEN
                CAR_COLL_COVERAGE      := ' ';

                CAR_TOWN_CODE          := ' ';
                CAR_SYMBOL             := ' ';
                CAR_PREINSPECT         := ' ';
                CAR_ZONE_RATING        := ' ';
                CAR_AGE_CODE           := ' ';
                CAR_ANTITHEFT          := ' ';
                CAR_ORIGINAL_COST      := ' ';
                CAR_ZIP_CODE           := ' ';
                CAR_EXPOSURE           := 0;
                CAR_VIN                := ' ';
            END IF;


            -- Commercial Audio/Video/Sound (OTC)
            IF TRIM(ma_stat.END_NUM) = 'CA 99 60' THEN
                CAR_COLL_COVERAGE      := ' ';

                CAR_TOWN_CODE          := ' ';
                CAR_CLASS_CODE         := ' ';
                CAR_SYMBOL             := ' ';
                CAR_PREINSPECT         := ' ';
                CAR_ZONE_RATING        := ' ';
                CAR_AGE_CODE           := ' ';
                CAR_ANTITHEFT          := ' ';
                CAR_ORIGINAL_COST      := ' ';
                CAR_RATING_ID          := ' ';
                CAR_ZIP_CODE           := ' ';
                CAR_EXPOSURE           := 0;
                CAR_VIN                := ' ';
            END IF;


        END IF;


---------------------------------------------------
--- CAR Sort Key Section                        ---
---------------------------------------------------

 -- k_SORT_POLICY                      VARCHAR2(10);
        k_SORT_POLICY := ' ';
        k_SORT_POLICY := ma_stat.POLICY_NUMBER;

 -- k_SORT_ID_CODE                     VARCHAR2(1);
        k_SORT_ID_CODE := ' ';
        k_SORT_ID_CODE := CAR_CAR_ID_CODE;

 -- k_SORT_SOURCE                      VARCHAR2(2);
        k_SORT_SOURCE := ' ';
        k_SORT_SOURCE := NVL(ma_stat.TRANS_SOURCE, '  ');

 -- k_SORT_CHG_DATE                    VARCHAR2(7);
        k_SORT_CHG_DATE := ' ';

        IF EXTRACT(YEAR FROM ma_stat.CHANGE_DATE) >= 2000 THEN
            k_SORT_CHG_DATE := '1';
        ELSE
            k_SORT_CHG_DATE := '0';
        END IF;

        k_SORT_CHG_DATE := k_SORT_CHG_DATE || TO_CHAR(ma_stat.CHANGE_DATE, 'YYMMDD');


 -- k_SORT_RUN_DATE                    VARCHAR2(7);
        k_SORT_RUN_DATE := ' ';

        IF EXTRACT(YEAR FROM ma_stat.ACTG_DATE) >= 2000 THEN
            k_SORT_RUN_DATE := '1';
        ELSE
            k_SORT_RUN_DATE := '0';
        END IF;

        k_SORT_RUN_DATE := k_SORT_RUN_DATE || TO_CHAR(ma_stat.ACTG_DATE, 'YYMMDD');


 -- k_SORT_OLD_NEW                     VARCHAR2(1);
        k_SORT_OLD_NEW := ' ';
        k_SORT_OLD_NEW := NVL(ma_stat.AU_OLD_NEW_STAT, ' ');

 -- k_SORT_ITEM                        VARCHAR2(3);
        k_SORT_ITEM := ' ';
        k_SORT_ITEM := ma_stat.ITEM_NUM;

 -- k_SORT_SUBLINE                     VARCHAR2(3);
        k_SORT_SUBLINE := ' ';
        k_SORT_SUBLINE := CAR_SUBLINE;

 -- k_SORT_09_10                       VARCHAR2(8);
        k_SORT_09_10 := ' ';

        IF ma_stat.EFF_DATE >= TO_DATE('04012010', 'MMDDYYYY') AND NVL(ma_stat.GROUP_LINE, ' ') = '06' AND NVL(ma_stat.AU_VEH_SDIP_STEP, '  ') <> '00' AND NVL(ma_stat.AU_VEH_SDIP_STEP, '  ') <> '  ' THEN
            v_KEY_CLASS := CAR_CLASS_CODE;

            CASE NVL(ma_stat.COVERAGE_CODE, ' ')
                WHEN '109' THEN v_KEY_CLASS_XX := '01';
                WHEN '110' THEN v_KEY_CLASS_XX := '03';
                WHEN '117' THEN v_KEY_CLASS_XX := '02';
                WHEN '118' THEN v_KEY_CLASS_XX := '04';
                WHEN '120' THEN v_KEY_CLASS_XX := '05';
                WHEN '127' THEN v_KEY_CLASS_XX := '06';
                WHEN '130' THEN v_KEY_CLASS_XX := '07';
                WHEN '145' THEN v_KEY_CLASS_XX := '08';
                WHEN '151' THEN v_KEY_CLASS_XX := '09';
                WHEN '160' THEN v_KEY_CLASS_XX := '10';
                WHEN '167' THEN v_KEY_CLASS_XX := '11';
                WHEN '200' THEN v_KEY_CLASS_XX := '12';
                WHEN '201' THEN v_KEY_CLASS_XX := '12';
                WHEN '205' THEN v_KEY_CLASS_XX := '15';
                WHEN '207' THEN v_KEY_CLASS_XX := '13';
                WHEN '210' THEN v_KEY_CLASS_XX := '16';
                WHEN '211' THEN v_KEY_CLASS_XX := '16';
                WHEN '217' THEN v_KEY_CLASS_XX := '17';
                WHEN '220' THEN v_KEY_CLASS_XX := '18';
                WHEN '230' THEN v_KEY_CLASS_XX := '19';
                ELSE            v_KEY_CLASS_XX := '99';
            END CASE;

            IF v_KEY_CLASS_XX <> '99' THEN
                -- Check if ma_stat.AU_VEH_SDIP_STEP is numeric - PM records may have invalid data in the field.
                IF TRANSLATE(TRANSLATE(NVL(ma_stat.AU_VEH_SDIP_STEP, '  '), '~', ' '), '0123456789', '~~~~~~~~~~') = '~~' THEN
                    v_KEY_CLASS := SUBSTR(v_KEY_CLASS, 1, 4) || ma_stat.AU_VEH_SDIP_STEP;
                END IF;
            END IF;

            k_SORT_09_10 := v_KEY_CLASS || v_KEY_CLASS_XX;

        ELSE

            IF NVL(ma_stat.COVERAGE_CODE, ' ') NOT IN ('117', '127', '167', '207', '118', '217') THEN
                v_KEY_CLASS := CAR_CLASS_CODE;
                v_KEY_CLASS_XX := '  ';
            ELSE
                v_KEY_CLASS := SUBSTR(CAR_CLASS_CODE, 1, 4) || '00';
                v_KEY_CLASS_XX := SUBSTR(CAR_CLASS_CODE, 5, 2);
            END IF;

            k_SORT_09_10 := v_KEY_CLASS_XX || v_KEY_CLASS;

        END IF;



 -- k_SORT_ZONE                        VARCHAR2(1);
        k_SORT_ZONE := ' ';

        IF NOT ( ma_stat.EFF_DATE >= TO_DATE('04012010', 'MMDDYYYY') AND NVL(ma_stat.GROUP_LINE, ' ') = '06' AND NVL(ma_stat.AU_VEH_SDIP_STEP, '  ') <> '00' AND NVL(ma_stat.AU_VEH_SDIP_STEP, '  ') <> '  ' ) THEN
            k_SORT_ZONE := '+';

            IF ma_stat.EFF_DATE >= TO_DATE('01012006', 'MMDDYYYY') THEN
                IF v_KEY_CLASS_XX < '98' THEN
                    k_SORT_ZONE := 'S';
                END IF;

                IF ma_stat.WRITTEN_PREM < 0 THEN
                    k_SORT_ZONE := '-';

                    IF v_KEY_CLASS_XX < '98' THEN
                        k_SORT_ZONE := 'Z';
                    END IF;
                END IF;
            ELSE
                IF v_KEY_CLASS_XX > '15' THEN
                    k_SORT_ZONE := 'S';
                END IF;

                IF ma_stat.WRITTEN_PREM < 0 THEN
                    k_SORT_ZONE := '-';

                    IF v_KEY_CLASS_XX > '15' THEN
                        k_SORT_ZONE := 'Z';
                    END IF;
                END IF;
            END IF;
        END IF;


 -- k_SORT_COV                         VARCHAR2(1);
        k_SORT_COV := 32;

        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('109', '111', '117') THEN
            k_SORT_COV := 16;
        ELSE
            IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('100', '101', '102', '104', '105', '106', '110', '112', '134', '959', '118') THEN
                k_SORT_COV := 17;
            ELSE
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '987', '   ') THEN
                    k_SORT_COV := 67;
                ELSE
                    IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('220') THEN
                        k_SORT_COV := 84;
                    ELSE
                        --force any misc OTC coverage to fall high in the sort
                        IF ( NVL(ma_stat.GROUP_LINE, ' ') < '07' AND CAR_OTC_COVERAGE IN ('056', '057', '080', '081', '082', '083', '084', '085', '086', '087', '089', '096', '097', '099') )
                         OR ( NVL(ma_stat.GROUP_LINE, ' ') > '06' AND CAR_OTC_COVERAGE IN ('050', '051', '052', '053', '054', '059', '080', '081', '082', '083', '084', '087', '089', '202', '203', '204', '211', '212', '213', '214', '215', '216', '217', '090', '091', '093', '094', '099', '311', '312', '313', '317', '477', '478') ) THEN
                            k_SORT_COV := 90;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;


        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('101') THEN
            k_SORT_COV := 48;
        ELSE
            IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('103') THEN
                k_SORT_COV := 50;
            ELSE
                IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('120', '113') THEN
                    k_SORT_COV := 50;
                ELSE
                    IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('127') THEN
                        k_SORT_COV := 50;
                    ELSE
                        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('130') THEN
                            k_SORT_COV := 51;
                        ELSE
                            IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('145') THEN
                                k_SORT_COV := 52;
                            ELSE
                                IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('151') THEN
                                    k_SORT_COV := 53;
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;


        --COL-SDIP-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('207') THEN
            IF NVL(ma_stat.COVERAGE_CODE, ' ') = '207' THEN
                k_SORT_COV := 55;
            ELSE
                k_SORT_COV := 56;
            END IF;
        END IF;


        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('217') THEN
            k_SORT_COV := 56;
        END IF;


        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('959') THEN
            k_SORT_COV := 90;
        END IF;



 -- k_SORT_COMMIS                      NUMBER(3,3);
        k_SORT_COMMIS := ma_stat.COMM_PCT;

 -- k_SORT_EXPOSURE                    NUMBER(7);
        k_SORT_EXPOSURE := CAR_EXPOSURE;


 -- k_SORT_NEW_FLAG_10                 VARCHAR2(1);
        k_SORT_NEW_FLAG_10 := ' ';

        IF ma_stat.EFF_DATE >= TO_DATE('04012010', 'MMDDYYYY') AND NVL(ma_stat.GROUP_LINE, ' ') = '06' AND NVL(ma_stat.AU_VEH_SDIP_STEP, '  ') <> '00' AND NVL(ma_stat.AU_VEH_SDIP_STEP, '  ') <> '  ' THEN
            k_SORT_NEW_FLAG_10 := '*';
        END IF;



---------------------------------------------------
--- End of CAR Sort Key Section                 ---
---------------------------------------------------



--- Post-Key correction to CAR_BI_LIMITS
     -- This code attempts to match the BI SDIP code to the optional BI code that preceded it.
     -- Records may come in staggered order- old/new/old, etc.
     -- Match old to old and new to new.

        -- If OBI-COV or CBI-SDIP-COV
        IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '104', '105', '106', '110', '112', '134', '117') THEN
            v_SORT_FIRST_31 :=    k_SORT_POLICY
                               || k_SORT_ID_CODE
                               || k_SORT_SOURCE
                               || k_SORT_CHG_DATE
                               || k_SORT_RUN_DATE
                               || k_SORT_OLD_NEW
                               || k_SORT_ITEM;

            -- If OBI-COV
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '104', '105', '106', '110', '112', '134') THEN
                IF k_SORT_OLD_NEW = '1' THEN
                    v_SAVE_FIRST_31_NEW := v_SORT_FIRST_31;
                    v_SAVE_BI_CODE_NEW := CAR_BI_LIMITS;
                ELSE
                    v_SAVE_FIRST_31_OLD := v_SORT_FIRST_31;
                    v_SAVE_BI_CODE_OLD := CAR_BI_LIMITS;
                END IF;
            END IF;

            -- If CBI-SDIP-COV
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('117') THEN
                IF k_SORT_OLD_NEW = '1' THEN
                    IF v_SORT_FIRST_31 = v_SAVE_FIRST_31_NEW THEN
                        CAR_BI_LIMITS := v_SAVE_BI_CODE_NEW;
                    END IF;
                ELSE
                    IF v_SORT_FIRST_31 = v_SAVE_FIRST_31_OLD THEN
                        CAR_BI_LIMITS := v_SAVE_BI_CODE_OLD;
                    END IF;
                END IF;
            END IF;
        END IF;




---------------------------------------------------
--- Line-Specific Areas                         ---
---------------------------------------------------
 -- v_LINE_SPEC_1                      VARCHAR2(25);   --36:60
 -- v_LINE_SPEC_2                      VARCHAR2(5);    --67:71
 -- v_LINE_SPEC_3                      VARCHAR2(6);    --88:93
---------------------------------------------------


        IF CAR_SUBLINE = '611' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_LIMITS_ID,           1, ' ')
                             || LPAD(CAR_BI_LIMITS,           2, ' ')
                             || LPAD(CAR_PD_LIMIT,            2, ' ')
                             || LPAD(CAR_MP_LIMIT,            2, ' ')
                             || LPAD(CAR_UNINS_LIMIT,         2, ' ')
                             || LPAD(CAR_UNDERINS_LIMIT,      2, ' ')
                             || ' '
                             || LPAD(CAR_POLLUTION_LIAB,      1, ' ')
                             || LPAD(CAR_ZONE_RATING,         3, ' ')
                             || LPAD(CAR_AGE_CODE,            1, ' ')
                             || LPAD(CAR_AGGR_LIMITS_ID,      1, ' ')
                             || '  '
                             || LPAD(CAR_PASSIVE_RESTRAINT,   1, ' ')
                             || '  '
                             || LPAD(CAR_RATING_ID,           1, ' ')
                             || LPAD(CAR_TERRORISM,           1, ' ');

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 :=    LPAD(CAR_EXP_RATING_MOD,      3, ' ')
                             || LPAD(CAR_OTHER_RATING_MOD,    3, ' ');

        END IF;


        IF CAR_SUBLINE = '615' THEN
            v_LINE_SPEC_1 :=    ' '
                             || LPAD(CAR_PIP_COVERAGE,        1, ' ')
                             || '           '
                             || LPAD(CAR_ZONE_RATING,         3, ' ')
                             || LPAD(CAR_AGE_CODE,            1, ' ')
                             || '   '
                             || LPAD(CAR_PASSIVE_RESTRAINT,   1, ' ')
                             || '  '
                             || LPAD(CAR_RATING_ID,           1, ' ')
                             || LPAD(CAR_TERRORISM,           1, ' ');

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 :=    LPAD(CAR_EXP_RATING_MOD,      3, ' ')
                             || LPAD(CAR_OTHER_RATING_MOD,    3, ' ');

        END IF;


        IF CAR_SUBLINE = '618' THEN
            v_LINE_SPEC_1 :=    ' '
                             || LPAD(CAR_OTC_COVERAGE,        3, ' ')
                             || LPAD(CAR_COLL_COVERAGE,       3, ' ')
                             || '  '
                             || LPAD(CAR_SYMBOL,              2, ' ')
                             || LPAD(CAR_PREINSPECT,          1, ' ')
                             || ' '
                             || LPAD(CAR_ZONE_RATING,         3, ' ')
                             || LPAD(CAR_AGE_CODE,            1, ' ')
                             || LPAD(CAR_ANTITHEFT,           1, ' ')
                             || '  '
                             || LPAD(CAR_ORIGINAL_COST,       3, ' ')
                             || LPAD(CAR_RATING_ID,           1, ' ')
                             || LPAD(CAR_TERRORISM,           1, ' ');

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 :=    LPAD(CAR_EXP_RATING_MOD,      3, ' ')
                             || LPAD(CAR_OTHER_RATING_MOD,    3, ' ');

        END IF;


        IF CAR_SUBLINE = '621' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_MODEL_YEAR_CENTURY,  1, ' ')
                             || LPAD(CAR_BI_LIMITS,           2, ' ')
                             || LPAD(CAR_PD_LIMIT,            2, ' ')
                             || LPAD(CAR_MP_LIMIT,            2, ' ')
                             || LPAD(CAR_UNINS_LIMIT,         2, ' ')
                             || LPAD(CAR_UNDERINS_LIMIT,      2, ' ')
                             || LPAD(CAR_LIMITS_ID,           1, ' ')
                             || LPAD(CAR_ANNUAL_MILEAGE,      3, ' ')
                             || LPAD(CAR_MODEL_YEAR,          2, ' ')
                             || '   '
                             || LPAD(CAR_PASSIVE_RESTRAINT,   1, ' ')
                             || LPAD(CAR_DISCOUNT_CODE,       1, ' ')
                             || LPAD(CAR_CONT_COV_DISC,       1, ' ')
                             || LPAD(CAR_LOW_FREQ_DISC,       1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 := ' ';
        END IF;


        IF CAR_SUBLINE = '625' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_MODEL_YEAR_CENTURY,  1, ' ')
                             || LPAD(CAR_PIP_COVERAGE,        1, ' ')
                             || LPAD(CAR_PIP_DEDUCTIBLE,      2, ' ')
                             || '        '
                             || LPAD(CAR_ANNUAL_MILEAGE,      3, ' ')
                             || LPAD(CAR_MODEL_YEAR,          2, ' ')
                             || '   '
                             || LPAD(CAR_PASSIVE_RESTRAINT,   1, ' ')
                             || LPAD(CAR_DISCOUNT_CODE,       1, ' ')
                             || LPAD(CAR_CONT_COV_DISC,       1, ' ')
                             || LPAD(CAR_LOW_FREQ_DISC,       1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 := ' ';
        END IF;


        IF CAR_SUBLINE = '628' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_MODEL_YEAR_CENTURY,  1, ' ')
                             || LPAD(CAR_OTC_COVERAGE,        3, ' ')
                             || LPAD(CAR_COLL_COVERAGE,       3, ' ')
                             || '     '
                             || LPAD(CAR_ANNUAL_MILEAGE,      3, ' ')
                             || LPAD(CAR_MODEL_YEAR,          2, ' ')
                             || LPAD(CAR_ANTITHEFT,           1, ' ')
                             || '  '
                             || LPAD(CAR_OEM_COVERAGE,        1, ' ')
                             || LPAD(CAR_DISCOUNT_CODE,       1, ' ')
                             || LPAD(CAR_VALUE_CODE,          3, ' ');

            v_LINE_SPEC_2 :=    LPAD(CAR_HIGH_THEFT,          1, ' ')
                             || ' '
                             || LPAD(CAR_OTC_EXTRA_RISK,      1, ' ')
                             || ' '
                             || LPAD(CAR_COLL_EXTRA_RISK,     1, ' ');

            v_LINE_SPEC_3 := ' ';
        END IF;


----------------------------------
--- End of Line-Specific Areas ---
----------------------------------



--- Other Fields ---

 -- v_RECORD_NUMBER                    NUMBER(6);
        v_RECORD_NUMBER := NVL(v_RECORD_NUMBER, 0) + 1;


--- v_DEBUG_DATA                       VARCHAR2(40);
    -- This field is used for optionally sending debug data through to the output file.
    -- Uncomment filter on column name in Procedure "write_fixed_file_ISO_LOZ" before running submission.
        v_DEBUG_DATA := '.';
        v_DEBUG_DATA := f_ERROR_CODE || '.';

--- v_PREM_ROUNDING    --rounding error tracking    -- Added 10/24/2017, ASI/RCrawford
        CASE
            WHEN CAR_ASL = '194' THEN v_prem_rounding(1) := v_prem_rounding(1) + ROUND(ma_stat.WRITTEN_PREM) - ma_stat.WRITTEN_PREM;
            WHEN CAR_ASL = '193' THEN v_prem_rounding(2) := v_prem_rounding(2) + ROUND(ma_stat.WRITTEN_PREM) - ma_stat.WRITTEN_PREM;
            WHEN CAR_ASL = '212' THEN v_prem_rounding(3) := v_prem_rounding(3) + ROUND(ma_stat.WRITTEN_PREM) - ma_stat.WRITTEN_PREM;
            WHEN CAR_ASL = '192' THEN v_prem_rounding(4) := v_prem_rounding(4) + ROUND(ma_stat.WRITTEN_PREM) - ma_stat.WRITTEN_PREM;
            WHEN CAR_ASL = '191' THEN v_prem_rounding(5) := v_prem_rounding(5) + ROUND(ma_stat.WRITTEN_PREM) - ma_stat.WRITTEN_PREM;
            WHEN CAR_ASL = '211' THEN v_prem_rounding(6) := v_prem_rounding(6) + ROUND(ma_stat.WRITTEN_PREM) - ma_stat.WRITTEN_PREM;
            ELSE                      v_prem_rounding(7) := v_prem_rounding(7) + ROUND(ma_stat.WRITTEN_PREM) - ma_stat.WRITTEN_PREM;
        END CASE;

--- --- ---

        INSERT INTO RPT_POLICY_CAR_STAT (
            COMPANY_ID                 ,
            TRANS_TYPE                 ,
            ACT_DATE                   ,
            POL_EFF_DATE               ,
            TRAN_EFF_DATE              ,
            POL_EXP_DATE               ,
            STATE_CODE                 ,
            TOWN_CODE                  ,
            CAR_ID_CODE                ,
            TYPE_OF_RISK               ,
            ASL                        ,
            SUBLINE                    ,
            CLASS_CODE                 ,
            LINE_SPEC_1                ,
            PRODUCER_CODE              ,
            LINE_SPEC_2                ,
            ZIP_CODE                   ,
            EXPOSURE                   ,
            EXP_RATING_MOD             ,
            OTHER_RATING_MOD           ,
            FILLER_94                  ,
            PREM_AMOUNT_1              ,
            PREM_AMOUNT_2              ,
            FILLER_112                 ,
            POLICY_ID                  ,
            VIN                        ,
            COMPANY_USE                ,

            SORT_POLICY                ,
            SORT_ID_CODE               ,
            SORT_SOURCE                ,
            SORT_CHG_DATE              ,
            SORT_RUN_DATE              ,
            SORT_OLD_NEW               ,
            SORT_ITEM                  ,
            SORT_SUBLINE               ,
            SORT_20XX                  ,
            SORT_ZONE                  ,
            SORT_COV                   ,
            SORT_COMMIS                ,
            SORT_EXPOSURE              ,
            SORT_NEW_FLAG_10           ,

            RECORD_NUMBER              ,
            DEBUG_DATA

        ) VALUES (
            CAR_COMPANY_ID               ,
            CAR_TRANS_TYPE               ,
            CAR_ACT_DATE                 ,
            CAR_POL_EFF_DATE             ,
            CAR_TRAN_EFF_DATE            ,
            CAR_POL_EXP_DATE             ,
            CAR_STATE_CODE               ,
            CAR_TOWN_CODE                ,
            CAR_CAR_ID_CODE              ,
            CAR_TYPE_OF_RISK             ,
            CAR_ASL                      ,
            CAR_SUBLINE                  ,
            CAR_CLASS_CODE               ,
            v_LINE_SPEC_1              ,
            CAR_PRODUCER_CODE            ,
            v_LINE_SPEC_2              ,
            CAR_ZIP_CODE                 ,
            CAR_EXPOSURE                 ,
            CAR_EXP_RATING_MOD           ,
            CAR_OTHER_RATING_MOD         ,
            CAR_FILLER_94                ,
            CAR_PREM_AMOUNT_1            ,
            CAR_PREM_AMOUNT_2            ,
            CAR_FILLER_112               ,
            CAR_POLICY_ID                ,
            CAR_VIN                      ,
            CAR_COMPANY_USE              ,

            k_SORT_POLICY              ,
            k_SORT_ID_CODE             ,
            k_SORT_SOURCE              ,
            k_SORT_CHG_DATE            ,
            k_SORT_RUN_DATE            ,
            k_SORT_OLD_NEW             ,
            k_SORT_ITEM                ,
            k_SORT_SUBLINE             ,
            k_SORT_09_10                ,
            k_SORT_ZONE                ,
            k_SORT_COV                 ,
            k_SORT_COMMIS              ,
            k_SORT_EXPOSURE            ,
            k_SORT_NEW_FLAG_10         ,

            v_RECORD_NUMBER            ,
            v_DEBUG_DATA

        );

        COMMIT;

    END LOOP;

--- --- ---

    CLOSE all_ma_stat;
    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG || ma_stat.policy_number);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

PROCEDURE collect_claim_car_ma_paid
IS

/*
    CAR monthly paid loss processing procedure.
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.COLLECT_CLAIM_CAR_MA_PAID';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR all_ma_stat
    IS
        SELECT *
        FROM RPT_CLAIMS_MA_STAT A
        WHERE
                a.dac_ind = '1'
            AND ( a.group_line IN ('06', '07') OR ( a.group_line IN ('05', '15', '38') AND a.item_state = 'MA' ) )
            AND a.book_date >= (v_begin_date)
            AND a.book_date <= (v_end_date)
            AND a.AGENT_NUM <> '20999'
            AND a.loss_amount <> 0

            AND a.trans_code in ('41', '51', '61',
                                 '52', '53', '54', '55',
                                 '81',       '91',
                                 '86', '87',
                                 '72', '82', '92',
                                       '83', '93')


        ORDER BY A.POLICY_NUMBER,
                 A.ACTG_DATE,
                 A.TRANS_CODE,
                 A.ITEM_NUM,
                 A.COVERAGE_CODE;


    ma_stat                                all_ma_stat%ROWTYPE;

--- --- ---


--- CAR Stat Variables                                 ---Character Position
    CAR_COMPANY_ID                     VARCHAR2(3);    --1:3
    CAR_TRANS_TYPE                     VARCHAR2(2);    --4:5
    CAR_ACT_DATE                       VARCHAR2(2);    --6:7
    CAR_POL_EFF_DATE                   VARCHAR2(3);    --8:10
    CAR_ACCID_DATE                     VARCHAR2(5);    --11:15
    CAR_FILLER_16                      VARCHAR2(1);    --16
    CAR_STATE_CODE                     VARCHAR2(2);    --17:18
    CAR_TOWN_CODE                      VARCHAR2(3);    --19:21
    CAR_CAR_ID_CODE                    VARCHAR2(1);    --22
    CAR_TYPE_OF_RISK                   VARCHAR2(1);    --23
    CAR_ASL                            VARCHAR2(3);    --24:26
    CAR_SUBLINE                        VARCHAR2(3);    --27:29
    CAR_CLASS_CODE                     VARCHAR2(6);    --30:35
    v_LINE_SPEC_1                      VARCHAR2(25);   --36:60
    CAR_PRODUCER_CODE                  VARCHAR2(6);    --61:66
    v_LINE_SPEC_2                      VARCHAR2(5);    --67:71
    CAR_ZIP_CODE                       VARCHAR2(9);    --72:80
    CAR_FILLER_81                      VARCHAR2(1);    --81
    v_LINE_SPEC_3                      VARCHAR2(5);    --82:86
    CAR_TYPE_OF_LOSS                   VARCHAR2(2);    --87:88
    CAR_FILLER_89                      VARCHAR2(2);    --89:90
    CAR_LOSS_AMOUNT                    NUMBER(8);      --91:98
    CAR_CLAIM_ID                       VARCHAR2(16);   --99:114
    CAR_POLICY_ID                      VARCHAR2(16);   --115:130
    CAR_VIN                            VARCHAR2(17);   --131:147
    CAR_COMPANY_USE                    VARCHAR2(3);    --148:150
--- CAR Sort Key
    k_SORT_ORDER                       VARCHAR2(1);    --151


--- Line-specific Stat Variables

 -- Liability
    CAR_LIMITS_ID                      VARCHAR2(1);
    CAR_LIAB_LIMITS                    VARCHAR2(2);
    CAR_POLLUTION_LIAB                 VARCHAR2(1);
    CAR_AGGR_LIMITS_ID                 VARCHAR2(1);
    CAR_REPORTING_DATE                 VARCHAR2(3);

 -- No-Fault
    CAR_PIP_COVERAGE                   VARCHAR2(1);
    CAR_PIP_DEDUCTIBLE                 VARCHAR2(2);
    CAR_TYPE_CLAIMANT                  VARCHAR2(1);

 -- Physical Damage
    CAR_PHY_COVERAGE_CODE              VARCHAR2(3);
    CAR_SYMBOL                         VARCHAR2(2);
    CAR_INT_APPRAISAL_ID               VARCHAR2(1);
    CAR_ANTITHEFT                      VARCHAR2(1);
    CAR_ORIGINAL_COST                  VARCHAR2(3);
    CAR_OEM_COVERAGE                   VARCHAR2(1);
    CAR_VALUE_CODE                     VARCHAR2(3);
    CAR_HIGH_THEFT                     VARCHAR2(1);
    CAR_OTC_EXTRA_RISK                 VARCHAR2(1);
    CAR_COLL_EXTRA_RISK                VARCHAR2(1);
    CAR_CATASTROPHE_CODE               VARCHAR2(2);

 -- Other than No-Fault
    CAR_PARTIAL_TOTAL_LOSS_IND         VARCHAR2(1);

 -- Other than Physical Damage
    CAR_PASSIVE_RESTRAINT              VARCHAR2(1);

 -- Commercial
    CAR_ACCIDENT_TOWN                  VARCHAR2(3);
    CAR_ZONE_RATING                    VARCHAR2(3);
    CAR_AGE_CODE                       VARCHAR2(1);
    CAR_RATING_ID                      VARCHAR2(1);

 -- Private Passenger
    CAR_MODEL_YEAR_CENTURY             VARCHAR2(1);
    CAR_ANNUAL_MILEAGE                 VARCHAR2(3);
    CAR_MODEL_YEAR                     VARCHAR2(2);
    CAR_DISCOUNT_CODE                  VARCHAR2(1);
    CAR_CONT_COV_DISC                  VARCHAR2(1);
    CAR_LOW_FREQ_DISC                  VARCHAR2(1);
    V_ITEM_CONT_COV_DISC                VARCHAR2(1);
    V_NAME_CONT_COV_DISC                VARCHAR2(1);
    V_ITEM_LOW_FREQ_DISC                VARCHAR2(1);
    V_NAME_LOW_FREQ_DISC                VARCHAR2(1);
    

--- END OF STAT VARIABLES


--- Individual record number for testing/debugging/summarization
    --v_RECORD_NUMBER                    NUMBER(6);  -- this is a global field, definition provided for documentation

--- Field for tracking IXPOLVIN interaction - value returned from function.
    v_IXPV_DATA                        VARCHAR2(32);

--- Field for optionally sending debug data through to the output file - to use, comment out the filter on the column name in Procedure "write_fixed_file_ISO_LOZ"
    v_DEBUG_DATA                       VARCHAR2(40);


--- Function Output Fields
    f_MODEL_YEAR                       VARCHAR2(4);
    f_CENTURY                          VARCHAR2(1);
    f_LIST_MARKET                      NUMBER(8);
    f_ERROR_CODE                       VARCHAR2(3);

    f_IX_RISK                          VARCHAR2(1);
    f_IX_TOWN                          VARCHAR2(3);
    f_IX_ZIP_CODE                      VARCHAR2(9);
    f_IX_DISCOUNT                      VARCHAR2(1);


--- Procedural Variables
    v_TRANS_CODE                       VARCHAR2(2);
    v_INDEX                            NUMBER(2);

    v_LIMIT_AMT_PERSON                 NUMBER(8);
    v_HOLD_CSL_LIMIT                   NUMBER(8);
    v_LIAB_LIMITS_SW                   VARCHAR2(1);
    v_PHY_COV_SW                       VARCHAR2(1);
    v_ACCIDENT_TOWN                    VARCHAR2(3);
    v_LIST_MARKET                      NUMBER(8);

    v_MMV_OTC_IND                      VARCHAR2(1);
    v_TEMP_TOW_COV                     VARCHAR2(3);

    v_CLAIM_COUNT                      VARCHAR2(1);



--- Reference Tables ---

    -- MMV LIMIT TABLE, 22 entries
    MMV_LIMIT_1         Amount_TBL := Amount_TBL(0000000, 0010000, 0015000, 0020000, 0020000, 0025000, 0025000, 0030000, 0035000, 0050000, 0100000, 0250000, 0500000, 0500000, 0000500, 0000750, 0001000, 0002000, 0005000, 0750000, 1000000, 9999999);
    MMV_LIMIT_2         Amount_TBL := Amount_TBL(0000000, 0020000, 0030000, 0040000, 0050000, 0050000, 0060000, 0070000, 0080000, 0100000, 0300000, 0500000, 0500000, 1000000, 0000000, 0000000, 0000000, 0000000, 0000000, 0000000, 1000000, 9999999);
    MMV_LIMIT_UM        Code2_TBL  := Code2_TBL(   '00',    '02',    '03',    '04',    '11',    '06',    '05',    '12',    '13',    '07',    '08',    '09',    '15',    '10',    '--',    '--',    '--',    '--',    '--',    '--',    '14',    '49');
    MMV_LIMIT_BI        Code2_TBL  := Code2_TBL(   '00',    '02',    '03',    '04',    '11',    '06',    '05',    '12',    '13',    '07',    '08',    '09',    '15',    '10',    '--',    '--',    '--',    '--',    '--',    '--',    '14',    '49');
    MMV_LIMIT_PD        Code2_TBL  := Code2_TBL(   '00',    '02',    '03',    '09',    '09',    '04',    '04',    '09',    '05',    '06',    '07',    '11',    '10',    '10',    '09',    '09',    '09',    '09',    '01',    '12',    '13',    '09');
    MMV_LIMIT_MP        Code2_TBL  := Code2_TBL(   '00',    '06',    '07',    '08',    '08',    '09',    '09',    '--',    '--',    '10',    '11',    '--',    '--',    '--',    '01',    '02',    '03',    '04',    '05',    '--',    '--',    '49');
    MMV_LIMIT_OCCUR     NUMBER(2) := 22;

    -- CSL LIMIT TABLE, 21 entries
    CSL_LIMIT_1         Amount_TBL := Amount_TBL(0035000, 0040000, 0045000, 0050000, 0075000, 0100000, 0150000, 0200000, 0250000, 0300000, 0400000, 0500000, 0750000, 1000000, 1500000, 2000000, 2500000, 3000000, 5000000, 7500000, 9999999);
    CSL_LIMIT_CODE      Code2_TBL  := Code2_TBL(   '03',    '07',    '04',    '08',    '09',    '10',    '11',    '12',    '13',    '14',    '15',    '16',    '17',    '18',    '19',    '20',    '21',    '22',    '23',    '24',    '25');
    CSL_LIMIT_OCCUR     NUMBER(2) := 21;

    -- MMV DEDUCTIBLE TABLE, 11 entries
    MMV_DEDUCTIBLE      Amount_TBL := Amount_TBL(0000000, 0000100, 0000200, 0000250, 0000300, 0000500, 0001000, 0002000, 0004000, 0008000, 9999999);
    MMV_DED_PIPI        Code2_TBL  := Code2_TBL(   '01',    '12',    '  ',    '13',    '  ',    '14',    '15',    '16',    '17',    '18',    '  ');
    MMV_DED_PIPIH       Code2_TBL  := Code2_TBL(   '01',    '22',    '  ',    '23',    '  ',    '24',    '25',    '26',    '27',    '28',    '  ');
    MMV_DED_CLWW        Code3_TBL  := Code3_TBL(  '   ',   '013',   '014',   '019',   '015',   '016',   '017',   '012',   '019',   '019',   '019');
    MMV_DED_CLWOW       Code3_TBL  := Code3_TBL(  '   ',   '074',   '075',   '079',   '076',   '077',   '078',   '072',   '079',   '079',   '079');
    MMV_DED_LT          Code3_TBL  := Code3_TBL(  '040',   '049',   '049',   '049',   '045',   '042',   '043',   '046',   '049',   '049',   '049');
     --MMV_DED_CP          Code3_TBL  := Code3_TBL(  '   ',   '031',   '033',   '004',   '035',   '037',   '039',   '023',   '004',   '004',   '004');
     --MMV_DED_CPTW        Code3_TBL  := Code3_TBL(  '   ',   '   ',   '   ',   '   ',   '234',   '236',   '238',   '222',   '   ',   '   ',   '264');
     -- Table changes per ticket 50337.
    MMV_DED_CP          Code3_TBL  := Code3_TBL(  '   ',   '004',   '004',   '004',   '035',   '037',   '039',   '023',   '004',   '004',   '004');
    MMV_DED_CP50        Code3_TBL  := Code3_TBL(  '   ',   '264',   '264',   '264',   '234',   '236',   '238',   '222',   '264',   '264',   '264');
    MMV_DED_CP100       Code3_TBL  := Code3_TBL(  '   ',   '464',   '464',   '464',   '434',   '436',   '438',   '422',   '464',   '464',   '464');
     -- End of table changes.
    MMV_DED_OCCUR       NUMBER(2) := 11;


    -- 1990 COMMERCIAL COSTS SYMBOLS TABLE
    HI_COST_COMCL_1990  Amount_TBL := Amount_TBL(0004501, 0006001, 0008001, 0010001, 0015001, 0020001, 0025001, 0040001, 0065001, 0090001, 9999999);
    SYMBOL_COMCL_1990   Code2_TBL  := Code2_TBL(   '01',    '02',    '03',    '04',    '05',    '06',    '07',    '08',    '10',    '11',    '12');
    COMCL_1990_OCCUR    NUMBER(2) := 11;


--- --- ---

BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'collect_claim_car_ma_paid_insert';

    OPEN all_ma_stat;


--- Initial values at start of processing
    v_HOLD_CSL_LIMIT := 0;



--- Main processing loop
    LOOP
        FETCH all_ma_stat INTO ma_stat;

        EXIT WHEN all_ma_stat%NOTFOUND;


    -- Uncomment when using v_DEBUG_DATA to reset the field to null at the start of each record
        --v_DEBUG_DATA = '';


    --- Transaction Code modification and record filtering
        v_TRANS_CODE := NVL(ma_stat.TRANS_CODE, '  ');
        IF v_TRANS_CODE IN ('73', '83', '93') THEN
            v_TRANS_CODE := '72';
        END IF;


        IF v_TRANS_CODE = '87' THEN
            GOTO END_OF_RECORD;
        END IF;


        IF v_TRANS_CODE IN ('02', '12', '22', '32', '42', '43', '44', '45', '46', '47', '48', '52', '53', '54', '55', '56', '57', '58', '62', '63', '64', '65', '66', '67', '68') THEN
            IF NVL(ma_stat.AU_FACILITY, ' ') <> 'F' THEN
                IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959','987')) OR (v_TRANS_CODE IN ('46', '56', '66', '47', '57', '67')) THEN
                    GOTO END_OF_RECORD;
                END IF;
            END IF;
        END IF;



    --- Values determined at start of each record

        v_LIMIT_AMT_PERSON := ma_stat.LIMIT_AMT_PERSON;

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103')) THEN
            IF v_LIMIT_AMT_PERSON = 0 THEN
                v_LIMIT_AMT_PERSON := v_HOLD_CSL_LIMIT;
            ELSE
                v_HOLD_CSL_LIMIT := v_LIMIT_AMT_PERSON;
            END IF;
        END IF;


        IF NVL(ma_stat.AU_ACCIDENT_CITY, '   ') IN ('   ', '000') THEN
            v_ACCIDENT_TOWN := ma_stat.TERRITORY;
        ELSE
            v_ACCIDENT_TOWN := ma_stat.AU_ACCIDENT_CITY;
        END IF;



        -- Retrieve vehicle data from history table.
        f_ERROR_CODE := Get_CAR_Vehicle_Data(ma_stat.POLICY_NUMBER, ma_stat.GROUP_LINE, ma_stat.ITEM_NUM, '1', ma_stat.EFF_DATE, ma_stat.REPORTED_DATE, ma_stat.AU_IDENT_NUM, f_LIST_MARKET, f_CENTURY, f_MODEL_YEAR);

        IF ma_stat.AU_LIST_MARKET <> f_LIST_MARKET THEN
            IF ma_stat.AU_LIST_MARKET = 0 THEN
                -- RDK18 record missing list market value.
                v_LIST_MARKET := f_LIST_MARKET;
            ELSE
                IF f_LIST_MARKET = 0 THEN
                    -- staging.history_wang_item table missing list market value.
                    v_LIST_MARKET := ma_stat.AU_LIST_MARKET;
                ELSE
                    -- RDK18 record and staging.history_wang_item table have different values.
                    v_LIST_MARKET := ma_stat.AU_LIST_MARKET;
                END IF;
            END IF;
        ELSE
            -- RDK18 value and staging.history_wang_item value either identical or both missing.
            v_LIST_MARKET := f_LIST_MARKET;
        END IF;




--------------------------
--- CAR Stat Variables ---
--------------------------

 -- CAR_COMPANY_ID                       VARCHAR2(3);    --1:3
        CAR_COMPANY_ID := '664';


 -- CAR_TRANS_TYPE                       VARCHAR2(2);    --4:5
        CAR_TRANS_TYPE := '  ';

        IF v_TRANS_CODE IN ('01') THEN
            CAR_TRANS_TYPE := '21';
        ELSE
            IF v_TRANS_CODE IN ('41', '51', '61') THEN
                CAR_TRANS_TYPE := '23';
            ELSE
                IF v_TRANS_CODE IN ('02', '12', '22', '32') THEN
                    CAR_TRANS_TYPE := '22';
                ELSE
                    IF v_TRANS_CODE IN ('53') THEN
                        CAR_TRANS_TYPE := '24';
                    ELSE
                        IF v_TRANS_CODE IN ('54', '55') THEN
                            CAR_TRANS_TYPE := '27';
                        ELSE
                            IF v_TRANS_CODE IN ('52') THEN
                                CAR_TRANS_TYPE := '29';
                            ELSE
                                IF v_TRANS_CODE IN ('71', '81', '91') THEN
                                    CAR_TRANS_TYPE := '25';
                                ELSE
                                    IF v_TRANS_CODE IN ('72', '82', '92', '86', '87') THEN
                                        CAR_TRANS_TYPE := '26';
                                    ELSE
                                        CAR_TRANS_TYPE := '  ';
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;


        --SALVAGE NOT ALLOWED ON PIP
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') > '159' AND NVL(ma_stat.COVERAGE_CODE, '   ') < '170') THEN
            IF v_TRANS_CODE IN ('71', '81', '91') THEN
                CAR_TRANS_TYPE := '26';
            END IF;
        END IF;


        IF ma_stat.EFF_DATE < TO_DATE('01011993', 'MMDDYYYY') THEN
            IF v_TRANS_CODE IN ('52', '55') THEN
                CAR_TRANS_TYPE := '24';
            END IF;
        END IF;


        --Replace Transaction Type for Allocated Expense Subro.
        IF v_TRANS_CODE = '86' THEN
            --- Use replacement value determined from CDK03.
            CAR_TRANS_TYPE := NVL(ma_stat.REF_TRANS_TYPE_86, '  ');
        END IF;



 -- CAR_ACT_DATE                         VARCHAR2(2);    --6:7
        CAR_ACT_DATE := CAR_Date_Conv(ma_stat.BOOK_DATE, 'MY');


 -- CAR_POL_EFF_DATE                     VARCHAR2(3);
        CAR_POL_EFF_DATE := CAR_Date_Conv(ma_stat.EFF_DATE, 'MYY');


 -- CAR_ACCID_DATE                       VARCHAR2(5);    --11:15
        CAR_ACCID_DATE := CAR_Date_Conv(ma_stat.LOSS_DATE, 'MDDYY');


 -- CAR_FILLER_16                        VARCHAR2(1);    --16
        CAR_FILLER_16 := ' ';


 -- CAR_STATE_CODE                       VARCHAR2(2);    --17:18
        CAR_STATE_CODE := '20';


 -- CAR_TOWN_CODE                        VARCHAR2(3);    --19:21
        CAR_TOWN_CODE := ma_stat.TERRITORY;
        CAR_TOWN_CODE := LPAD(CAR_TOWN_CODE, 3, '0');

        -- CV 6/12/19IF NVL(ma_stat.AU_COMM_ZONE, '   ') <> '   ' THEN
       if NVL(ltrim(ma_stat.au_comm_zone,chr(ascii(ma_stat.au_comm_zone))), '   ') <> '   ' then
            CAR_TOWN_CODE := '000';
        END IF;




---------------------------------------------------
--- Annual Statement Line & Subline             ---
---------------------------------------------------
 -- CAR_ASL                              VARCHAR2(3);    --24:26
 -- CAR_SUBLINE                          VARCHAR2(3);    --27:29
---------------------------------------------------

        CAR_ASL := ' ';
        CAR_SUBLINE := ' ';


        -- Private Passenger Auto
        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
                CAR_ASL := '192';
                CAR_SUBLINE := '621';
            END IF;

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
                CAR_ASL := '191';
                CAR_SUBLINE := '625';
            END IF;

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
                CAR_ASL := '211';
                CAR_SUBLINE := '628';
            END IF;

        -- Commercial Auto
        ELSE

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
                CAR_ASL := '194';
                CAR_SUBLINE := '611';
            END IF;

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
                CAR_ASL := '193';
                CAR_SUBLINE := '615';
            END IF;

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
                CAR_ASL := '212';
                CAR_SUBLINE := '618';
            END IF;

        END IF;



 -- CAR_CLASS_CODE                       VARCHAR2(6);    --30:35
        CAR_CLASS_CODE := SUBSTR(RPAD(NVL(ma_stat.CLASS_CODE, ' '), 6, ' '), 1, 6);

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE < TO_DATE('01012007', 'MMDDYYYY') THEN
                CAR_CLASS_CODE := SUBSTR(CAR_CLASS_CODE, 1, 4) || '00';
            END IF;

            IF ( SUBSTR(CAR_CLASS_CODE, 1, 1) = '1' ) AND ( SUBSTR(CAR_CLASS_CODE, 4, 1) = '2' ) THEN
                CAR_CLASS_CODE := '1152' || SUBSTR(CAR_CLASS_CODE, 5, 2);

                IF ma_stat.EFF_DATE > TO_DATE('12312004', 'MMDDYYYY') THEN
                    IF (ma_stat.DRIVER_AGE > 74) AND (ma_stat.DRIVER_AGE < 202) THEN
                        CAR_CLASS_CODE := '1162' || SUBSTR(CAR_CLASS_CODE, 5, 2);
                    END IF;
                END IF;
            END IF;
        END IF;

        CAR_CLASS_CODE := TRANSLATE(CAR_CLASS_CODE, ' ', '0');

        IF NVL(ma_stat.COVERAGE_CODE, ' ') = '987' THEN
            CAR_CLASS_CODE := '998000';
        END IF;



 -- CAR_CAR_ID_CODE                      VARCHAR2(1),    --22
        CAR_CAR_ID_CODE := ' ';

        CAR_CAR_ID_CODE := NVL(ma_stat.AU_MA_CAR_ID, ' ');

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '15') THEN
            IF CAR_CAR_ID_CODE = ' ' THEN
                CAR_CAR_ID_CODE := '0';
            END IF;
        END IF;


        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('04012009', 'MMDDYYYY') THEN
                CAR_CAR_ID_CODE := NVL(ma_stat.AU_MA_CAR_ID, ' ');

                IF CAR_CAR_ID_CODE = ' ' THEN
                    -- Use value retrieved from PDK03.
                    CAR_CAR_ID_CODE := NVL(ma_stat.REF_MA_CAR_ID, ' ');
                END IF;
            END IF;
        END IF;


        IF CAR_CAR_ID_CODE = ' ' THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('04012008', 'MMDDYYYY') THEN
                    IF ( NVL(ma_stat.PCB10_MA_MAIP, ' ') = 'Y' ) OR ( SUBSTR(NVL(ma_stat.AGENT_NUM, ' '), 1, 2) = '21' ) THEN
                        IF NVL(ma_stat.PCB10_MA_MAIP, ' ') = 'Y' THEN
                            CAR_CAR_ID_CODE := '9';
                        ELSE
                            IF NVL(ma_stat.PCB10_MA_MAIP_ELIGIBLE, ' ') = 'Y' THEN
                                CAR_CAR_ID_CODE := '8';
                            ELSE
                                -- Use values retrieved from PDK03.
                                IF NVL(ma_stat.REF_MA_MAIP, ' ') = 'Y' THEN
                                    CAR_CAR_ID_CODE := '9';
                                ELSE
                                    IF NVL(ma_stat.REF_MA_MAIP_ELIGIBLE, ' ') = 'Y' THEN
                                        CAR_CAR_ID_CODE := '8';
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;


        IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('0483', '9620') THEN
            IF CAR_CAR_ID_CODE = '8' THEN
                CAR_CAR_ID_CODE := '0';
            ELSE
                CAR_CAR_ID_CODE := '1';
            END IF;
        END IF;

        IF SUBSTR(CAR_CLASS_CODE, 1, 4) = '0483' THEN
            IF ma_stat.EFF_DATE >= TO_DATE('04012009', 'MMDDYYYY') THEN
                CAR_CAR_ID_CODE := '8';
            END IF;
        END IF;



 -- CAR_TYPE_OF_RISK                     VARCHAR2(1);    --23
        CAR_TYPE_OF_RISK := '1';


        -- SPECIAL GROUP MARKETING AGENTS
        IF NVL(ma_stat.AGENT_NUM, ' ') IN ('20100', '20991', '20333', '20561', '20571', '20506') THEN
            CAR_TYPE_OF_RISK := '3';
        END IF;

        IF NVL(ma_stat.AGENT_NUM, ' ') IN ('20345', '20281', '20971', '20409', '20410') THEN
            CAR_TYPE_OF_RISK := '3';
        END IF;

        IF ( NVL(ma_stat.AGENT_NUM, ' ') = '20554' ) AND ( NVL(ma_stat.AGENT_SUB, ' ') = '002' ) THEN
            CAR_TYPE_OF_RISK := '3';
        END IF;


        -- DISAPPROVED AGENTS (SPECIAL DEVIATION WAS REVOKED)
        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311995', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AGENT_NUM, ' ') = '20274' THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;

            IF ma_stat.EFF_DATE > TO_DATE('01051997', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AGENT_NUM, ' ') IN ('20271', '20275', '20278', '20282', '20291', '20292', '20293', '20295', '20296', '20297', '20298', '20299', '20300', '20301', '20310', '20315') THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;

            IF ma_stat.EFF_DATE > TO_DATE('12311997', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AGENT_NUM, ' ') IN ('20277', '20278', '20282', '20284', '20290', '20292', '20293', '20295', '20296', '20297', '20298', '20299', '20300', '20307') THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;
        END IF;



        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '15', '38') THEN
            CAR_TYPE_OF_RISK := '1';
        END IF;

        IF SUBSTR(CAR_CLASS_CODE, 1, 4) = '7000' THEN
            CAR_TYPE_OF_RISK := '6';
        END IF;

        IF NVL(ma_stat.COVERAGE_CODE, ' ') = '987' THEN
            CAR_TYPE_OF_RISK := '9';
        END IF;



 -- CAR_PRODUCER_CODE                    VARCHAR2(6);    --61:66
        CAR_PRODUCER_CODE := ' ';

        CAR_PRODUCER_CODE := Get_CAR_Producer(ma_stat.AGENT_NUM, ma_stat.AGENT_SUB);



 -- CAR_ZIP_CODE                         VARCHAR2(9);    --72:80
        CAR_ZIP_CODE := LPAD(NVL(ma_stat.LOC_ZIP_1, '00000'), 5, '0');

        -- Check for problem ZIP codes.
        IF CAR_ZIP_CODE IN ('02146', '02147', '02154', '02258', '02159', '02160', '02161', '02162', '02164', '02165', '02166', '02167', '02158', '02168', '02195', '02173', '02174', '02175', '02178', '02179', '02181', '02157', '02192', '02194', '02193', '02172', '02272', '02277', '02401', '02402', '02403', '02404', '02405', '02411') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('01012003', 'MMDDYYYY') THEN
                -- Use value from ZDK01 to replace a problem ZIP code.
                CAR_ZIP_CODE := LPAD(NVL(ma_stat.REF_ZIP_1, '00000'), 5, '0');
            END IF;
        END IF;
        
      --CAR_ZIP_CODE := CAR_ZIP_CODE || LPAD(NVL(ma_stat.LOC_ZIP_2, '0000'), 4, '0');    -- Changed 10/24/2017 per recent CAR errors.  --ASI/RCrawford

        IF NVL(ma_stat.LOC_ZIP_2, '0000') <> '0000' THEN
            CAR_ZIP_CODE := CAR_ZIP_CODE || LPAD(NVL(ma_stat.LOC_ZIP_2, '    '), 4, '0');
        ELSE
            CAR_ZIP_CODE := CAR_ZIP_CODE || '    ';
        END IF;


 -- CAR_FILLER_81                        VARCHAR2(1);    --81
        CAR_FILLER_81 := ' ';


 -- CAR_FILLER_89                        VARCHAR2(2);    --89:90
        CAR_FILLER_89 := ' ';


 -- CAR_LOSS_AMOUNT                      NUMBER(8);      --91:98
        CAR_LOSS_AMOUNT := ROUND(ma_stat.LOSS_AMOUNT);

        IF v_TRANS_CODE IN ('71', '72', '73', '81', '82', '83', '86', '87', '91', '92', '93') THEN
            CAR_LOSS_AMOUNT := CAR_LOSS_AMOUNT * -1;
        END IF;


 -- CAR_CLAIM_ID                         VARCHAR2(16);   --99:114
        CAR_CLAIM_ID := NVL(ma_stat.CLAIM_NUMBER, '') || NVL(ma_stat.CLAIMANT_NUMBER, '');


 -- CAR_POLICY_ID                        VARCHAR2(16);   --115:130
        CAR_POLICY_ID := RPAD(NVL(ma_stat.AGENT_NUM, ' '), 5, ' ') || RPAD(NVL(ma_stat.POLICY_NUMBER, ' '), 10, ' ');

        IF ma_stat.EFF_DATE >= TO_DATE('09012001', 'MMDDYYYY') THEN
            CAR_POLICY_ID := NVL(ma_stat.POLICY_NUMBER, ' ');
        END IF;


 -- CAR_VIN                              VARCHAR2(17);   --131:147
        CAR_VIN := NVL(ma_stat.AU_IDENT_NUM, ' ');

        CAR_VIN := RPAD(CAR_VIN, 17, ' ');


 -- CAR_COMPANY_USE                      VARCHAR2(3);    --148:150
        CAR_COMPANY_USE := NVL(ma_stat.ITEM_NUM, '   ');



---------------------------------------------------
--- Line-Specific Processing                    ---
---------------------------------------------------


--- Liability
 -- CAR_LIMITS_ID                        VARCHAR2(1);
        CAR_LIMITS_ID := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103') THEN
                    --CSL-COV
                    CAR_LIMITS_ID := '2';
                ELSE
                    CAR_LIMITS_ID := '3';
                END IF;
            END IF;

            IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('01012013', 'MMDDYYYY') THEN
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103') THEN
                        --CSL-COV
                        CAR_LIMITS_ID := '2';
                    ELSE
                        CAR_LIMITS_ID := '3';
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_LIAB_LIMITS                      VARCHAR2(2);
        CAR_LIAB_LIMITS := ' ';
        v_LIAB_LIMITS_SW := '0';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN

            --CBI-COV
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('109', '111') THEN
                IF ma_stat.EFF_DATE > TO_DATE('12311995', 'MMDDYYYY') THEN
                    CAR_LIAB_LIMITS := '01';
                    v_LIAB_LIMITS_SW := '1';
                ELSE
                    IF ma_stat.EFF_DATE > TO_DATE('12311992', 'MMDDYYYY') THEN
                        CAR_LIAB_LIMITS := '04';
                        v_LIAB_LIMITS_SW := '1';
                    ELSE
                        IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                            CAR_LIAB_LIMITS := '03';
                            v_LIAB_LIMITS_SW := '1';
                        ELSE
                            CAR_LIAB_LIMITS := '02';
                            v_LIAB_LIMITS_SW := '1';
                        END IF;
                    END IF;
                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --CSL-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103') THEN

                    v_INDEX := 1;
                    -- Search CSL LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > CSL_LIMIT_OCCUR) OR (v_LIMIT_AMT_PERSON <= CSL_LIMIT_1(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (CSL_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (CSL_LIMIT_OCCUR);
                    END IF;

                    CAR_LIAB_LIMITS := CSL_LIMIT_CODE(v_INDEX);
                    v_LIAB_LIMITS_SW := '1';

                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --OBI-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103', '104', '105', '106', '110', '112', '134') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_LIMIT_OCCUR) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX) AND ma_stat.LIMIT_AMT_OCCUR = MMV_LIMIT_2(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_LIAB_LIMITS := MMV_LIMIT_BI(v_INDEX);

                    IF CAR_LIAB_LIMITS = '15' THEN
                        IF (v_year_run < 2007) OR (v_year_run = 2007 AND v_month_run < 4) THEN
                            CAR_LIAB_LIMITS := '49';
                        END IF;
                    END IF;

                    v_LIAB_LIMITS_SW := '1';

                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --PD-COV, CR-COV, SU-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('120', '103', '113', '122', '121') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_LIMIT_OCCUR) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_LIAB_LIMITS := MMV_LIMIT_PD(v_INDEX);
                    v_LIAB_LIMITS_SW := '1';

                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --MED-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('130') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_LIMIT_OCCUR) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_LIAB_LIMITS := MMV_LIMIT_MP(v_INDEX);
                    v_LIAB_LIMITS_SW := '1';

                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --U1-COV, U2-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('145', '151') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_LIMIT_OCCUR) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX) AND ma_stat.LIMIT_AMT_OCCUR = MMV_LIMIT_2(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_LIAB_LIMITS := MMV_LIMIT_UM(v_INDEX);

                    IF CAR_LIAB_LIMITS = '15' THEN
                        IF (v_year_run < 2007) OR (v_year_run = 2007 AND v_month_run < 4) THEN
                            CAR_LIAB_LIMITS := '49';
                        END IF;
                    END IF;

                    v_LIAB_LIMITS_SW := '1';

                END IF;
            END IF;

        END IF;



 -- CAR_POLLUTION_LIAB                   VARCHAR2(1);
        CAR_POLLUTION_LIAB := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_POLLUTION_LIAB := '0';
        END IF;



 -- CAR_AGGR_LIMITS_ID                   VARCHAR2(1);
        CAR_AGGR_LIMITS_ID := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') = '38' THEN
                IF SUBSTR(CAR_CLASS_CODE, 1, 4) = '0705' THEN
                    IF v_HOLD_CSL_LIMIT = 2000000 THEN
                        CAR_AGGR_LIMITS_ID := '1';
                    ELSE
                        IF v_HOLD_CSL_LIMIT = 1000000 THEN
                            CAR_AGGR_LIMITS_ID := '2';
                        ELSE
                            CAR_AGGR_LIMITS_ID := '9';
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_REPORTING_DATE                   VARCHAR2(3);
        CAR_REPORTING_DATE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
            CAR_REPORTING_DATE := CAR_Date_Conv(ma_stat.REPORTED_DATE, 'MYY');
        END IF;



--- No-Fault
 -- CAR_PIP_COVERAGE                     VARCHAR2(1);
        CAR_PIP_COVERAGE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
            CAR_PIP_COVERAGE := '1';
        END IF;



 -- CAR_PIP_DEDUCTIBLE                   VARCHAR2(2);
        CAR_PIP_DEDUCTIBLE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN

            v_INDEX := 1;
            -- Search MMV DEDUCTIBLE TABLE
            LOOP
                EXIT WHEN (v_INDEX = (MMV_DED_OCCUR + 1)) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                v_INDEX := v_INDEX + 1;
            END LOOP;

            -- If limit not found, use last entry on table
            IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                v_INDEX := (MMV_LIMIT_OCCUR);
            END IF;

            -- Check DED_TYPE to determine which code to use.
            IF NVL(ma_stat.DED_TYPE, ' ') IN ('1', ' ') THEN
                CAR_PIP_DEDUCTIBLE := MMV_DED_PIPI(v_INDEX);
            ELSE
                CAR_PIP_DEDUCTIBLE := MMV_DED_PIPIH(v_INDEX);
            END IF;

        END IF;



 -- CAR_TYPE_CLAIMANT                    VARCHAR2(1);
        CAR_TYPE_CLAIMANT := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
            CAR_TYPE_CLAIMANT := '1';

            CASE NVL(ma_stat.NAME_TYPE, '  ')
                WHEN 'NI' THEN CAR_TYPE_CLAIMANT := '1';
                WHEN 'MH' THEN CAR_TYPE_CLAIMANT := '2';
                WHEN 'OO' THEN CAR_TYPE_CLAIMANT := '3';
                WHEN 'PE' THEN CAR_TYPE_CLAIMANT := '4';
                ELSE           CAR_TYPE_CLAIMANT := CAR_TYPE_CLAIMANT;
            END CASE;
        END IF;



--- Physical Damage

 -- CAR_PHY_COVERAGE_CODE                VARCHAR2(3);
        CAR_PHY_COVERAGE_CODE := '   ';
        v_PHY_COV_SW := '0';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN

            --COL-COV
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('200', '201', '299')) THEN
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '200' THEN

                    v_INDEX := 1;

                    --Search MMV DEDUCTIBLE TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_DED_OCCUR) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    IF v_INDEX = (MMV_DED_OCCUR  + 1) THEN
                        v_INDEX := MMV_DED_OCCUR;
                    END IF;

                    IF v_INDEX < 5 THEN
                        IF ma_stat.EFF_DATE >= TO_DATE('01011989', 'MMDDYYYY') THEN
                            v_INDEX := 5;
                        END IF;
                    END IF;

                    --Check DED_TYPE to determine which code to use
                    IF NVL(ma_stat.DED_TYPE, ' ') <> ' ' THEN
                        CAR_PHY_COVERAGE_CODE := MMV_DED_CLWW(v_INDEX);
                    ELSE
                        CAR_PHY_COVERAGE_CODE := MMV_DED_CLWOW(v_INDEX);
                    END IF;

                    IF CAR_PHY_COVERAGE_CODE = '   ' THEN
                        CAR_PHY_COVERAGE_CODE := '015';
                    END IF;

                    v_PHY_COV_SW := '1';

                ELSE

                    IF NVL(ma_stat.COVERAGE_CODE, '   ') = '201' THEN
                        CAR_PHY_COVERAGE_CODE := '092';
                        v_PHY_COV_SW := '1';
                    ELSE
                        IF NVL(ma_stat.CSP_COV, '   ') <> '   ' THEN
                            CAR_PHY_COVERAGE_CODE := ma_stat.CSP_COV;
                            v_PHY_COV_SW := '1';
                        ELSE
                            CAR_PHY_COVERAGE_CODE := '099';
                            v_PHY_COV_SW := '1';
                        END IF;
                    END IF;
                END IF;
            END IF;



            IF v_PHY_COV_SW <> '1' THEN
                --LTD-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '205' THEN

                    v_INDEX := 1;

                    --Search MMV DEDUCTIBLE TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_DED_OCCUR) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    IF v_INDEX = (MMV_DED_OCCUR  + 1) THEN
                        v_INDEX := MMV_DED_OCCUR;
                    END IF;

                    CAR_PHY_COVERAGE_CODE := MMV_DED_LT(v_INDEX);
                    v_PHY_COV_SW := '1';
                END IF;
            END IF;



            IF v_PHY_COV_SW <> '1' THEN
                --OTC-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '959', '987') THEN
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') = '210' THEN

                        v_INDEX := 1;

                        --Search MMV DEDUCTIBLE TABLE
                        LOOP
                            EXIT WHEN (v_INDEX > MMV_DED_OCCUR) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                            v_INDEX := v_INDEX + 1;
                        END LOOP;

                        IF v_INDEX = (MMV_DED_OCCUR  + 1) THEN
                            v_INDEX := MMV_DED_OCCUR;
                        END IF;

                        IF v_INDEX < 5 THEN
                            IF ma_stat.EFF_DATE >= TO_DATE('01011989', 'MMDDYYYY') THEN
                                v_INDEX := 5;
                            END IF;
                        END IF;


                        -- Determine which code to use based off Towing coverage indicator.
                        IF NVL(ma_stat.REF_TOW_IND, ' ') = '050' THEN
                            CAR_PHY_COVERAGE_CODE := MMV_DED_CP50(v_INDEX);
                        ELSE
                            IF NVL(ma_stat.REF_TOW_IND, ' ') = '100' THEN
                                CAR_PHY_COVERAGE_CODE := MMV_DED_CP100(v_INDEX);
                            ELSE
                                CAR_PHY_COVERAGE_CODE := MMV_DED_CP(v_INDEX);
                            END IF;
                        END IF;


/*  -- Removed per changes from ticket 50337.
                        --RIG THE COVERAGE CODE IF TOWING COV PRESENT ON THE POLICY
                        --AS OF 2002, NO MORE $25 TOWING FOR PP. MINIMUM IS $50
                        v_MMV_OTC_IND := NVL(ma_stat.AU_MMV_OTC_IND, ' ');

                        IF v_MMV_OTC_IND = '1' THEN
                            IF SUBSTR(CAR_POL_EFF_DATE, 2, 2) > '01' THEN
                                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                                    v_MMV_OTC_IND := '2';
                                END IF;
                            END IF;
                        END IF;


                        --BUMP DOWN THE THIRD POSITION OF OTC CODE TO REFLECT TOWING
                        IF v_MMV_OTC_IND <> ' ' THEN
                            CASE CAR_PHY_COVERAGE_CODE
                                WHEN '035' THEN CAR_PHY_COVERAGE_CODE := '034';
                                WHEN '037' THEN CAR_PHY_COVERAGE_CODE := '036';
                                WHEN '039' THEN CAR_PHY_COVERAGE_CODE := '038';
                                WHEN '023' THEN CAR_PHY_COVERAGE_CODE := '022';
                                WHEN '004' THEN CAR_PHY_COVERAGE_CODE := '064';
                                ELSE            CAR_PHY_COVERAGE_CODE := CAR_PHY_COVERAGE_CODE;
                            END CASE;
                        END IF;


                        --THE $50 TOWING CODES ARE NOT VALID (YET) FOR COMMERCIAL
                        IF v_MMV_OTC_IND > '1' THEN
                            CAR_PHY_COVERAGE_CODE := v_MMV_OTC_IND || SUBSTR(CAR_PHY_COVERAGE_CODE, 2, 2);
                        END IF;


                        --RIG THE COVERAGE CODE IF $100 GLASS DEDUCTIBLE IS PRESENT
                        IF NVL(ma_stat.DED_TYPE, ' ') NOT IN ('0', ' ') THEN
                            CAR_PHY_COVERAGE_CODE := TO_CHAR(1 + TO_NUMBER(SUBSTR(CAR_PHY_COVERAGE_CODE, 1, 1))) || SUBSTR(CAR_PHY_COVERAGE_CODE, 2, 2);
                        END IF;
*/
                    ELSE

                        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '211' THEN
                            CAR_PHY_COVERAGE_CODE := '060';
                        ELSE
                            IF NVL(ma_stat.CSP_COV, '   ') <> '   ' THEN
                                CAR_PHY_COVERAGE_CODE := ma_stat.CSP_COV;
                            ELSE
                                CAR_PHY_COVERAGE_CODE := '089';
                            END IF;
                        END IF;

                    END IF;


                    -- DED_TYPE = 1 indicates $100 comp glass deductible, add 1 to first digit of OTC code.
                    IF NVL(ma_stat.DED_TYPE, ' ') = '1' THEN
                        --CAR_PHY_COVERAGE_CODE := '1' || SUBSTR(CAR_PHY_COVERAGE_CODE, 2, 2);  --change from ticket 50337.
                        CAR_PHY_COVERAGE_CODE := TO_CHAR(TO_NUMBER(SUBSTR(CAR_PHY_COVERAGE_CODE, 1, 1)) + 1)
                                                 || SUBSTR(CAR_PHY_COVERAGE_CODE, 2, 2);
                    END IF;

                    v_PHY_COV_SW := '1';

                END IF;

            END IF;



            IF v_PHY_COV_SW <> '1' THEN
                --TOW-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('220') THEN
                    IF v_LIMIT_AMT_PERSON = 50 THEN
                        CAR_PHY_COVERAGE_CODE := '082';
                    ELSE
                        IF v_LIMIT_AMT_PERSON = 100 THEN
                            CAR_PHY_COVERAGE_CODE := '080';
                        ELSE
                            CAR_PHY_COVERAGE_CODE := '081';
                        END IF;
                    END IF;

                    IF CAR_PHY_COVERAGE_CODE = '081' THEN
                        IF SUBSTR(CAR_POL_EFF_DATE, 2, 2) = '01' THEN
                            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                                CAR_PHY_COVERAGE_CODE := '082';
                            END IF;
                        END IF;
                    END IF;


/*  -- Removed per changes from ticket 50337.
                    --Towing must reflect the combined tow/comp ded on the policy
                    IF (ma_stat.DED_AMT > 0) AND (ma_stat.DED_AMT < 10000) THEN

                        v_INDEX := 1;

                        --Search MMV DEDUCTIBLE TABLE
                        LOOP
                            EXIT WHEN (v_INDEX > MMV_DED_OCCUR) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                            v_INDEX := v_INDEX + 1;
                        END LOOP;

                        IF v_INDEX = (MMV_DED_OCCUR  + 1) THEN
                            v_INDEX := MMV_DED_OCCUR;
                        END IF;

                        IF v_INDEX < 5 THEN
                            IF ma_stat.EFF_DATE >= TO_DATE('01011989', 'MMDDYYYY') THEN
                                v_INDEX := 5;
                            END IF;
                        END IF;


                        --RIG THE COVERAGE CODE IF TOWING COV PRESENT ON THE POLICY
                        --AS OF 2002, NO MORE $25 TOWING FOR PP. MINIMUM IS $50
                        v_MMV_OTC_IND := NVL(ma_stat.AU_MMV_OTC_IND, ' ');

                        IF v_MMV_OTC_IND = '1' THEN
                            IF SUBSTR(CAR_POL_EFF_DATE, 2, 2) > '01' THEN
                                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                                    v_MMV_OTC_IND := '2';
                                END IF;
                            END IF;
                        END IF;


                        v_TEMP_TOW_COV := MMV_DED_CPTW(v_INDEX);

                        IF CAR_PHY_COVERAGE_CODE = '080' THEN
                            v_TEMP_TOW_COV := '4' || SUBSTR(v_TEMP_TOW_COV, 2, 2);
                        END IF;

                        IF (NVL(ma_stat.DED_TYPE, ' ') = '1') OR (NVL(ma_stat.AU_COV_210_SW, ' ') = '1') THEN
                            v_TEMP_TOW_COV := TO_CHAR(1 + TO_NUMBER(SUBSTR(v_TEMP_TOW_COV, 1, 1))) || SUBSTR(v_TEMP_TOW_COV, 2, 2);
                        END IF;


                        CAR_PHY_COVERAGE_CODE := v_TEMP_TOW_COV;
                    END IF;
*/
                END IF;
            END IF;



            IF v_PHY_COV_SW <> '1' THEN
                --SST-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('230') THEN
/*  -- Replaced per changes from ticket 50337.
                    IF v_LIMIT_AMT_PERSON IN (0, 15, 450) THEN
                        CAR_PHY_COVERAGE_CODE := '083';
                    ELSE
                        IF v_LIMIT_AMT_PERSON IN (30, 900) THEN
                            CAR_PHY_COVERAGE_CODE := '085';
                        ELSE
                            IF v_LIMIT_AMT_PERSON IN (45, 1350) THEN
                                CAR_PHY_COVERAGE_CODE := '084';
                            ELSE
                                IF v_LIMIT_AMT_PERSON IN (100, 3000) THEN
                                    CAR_PHY_COVERAGE_CODE := '086';
                                ELSE
                                    CAR_PHY_COVERAGE_CODE := '089';
                                END IF;
                            END IF;
                        END IF;
                    END IF;
*/

                    IF ma_stat.REF_SST_LIMIT = 0 OR ma_stat.REF_SST_LIMIT = 15 THEN
                        CAR_PHY_COVERAGE_CODE := '083';
                    ELSE
                        IF ma_stat.REF_SST_LIMIT = 30 THEN
                            CAR_PHY_COVERAGE_CODE := '085';
                        ELSE
                            IF ma_stat.REF_SST_LIMIT = 45 THEN
                                CAR_PHY_COVERAGE_CODE := '084';
                            ELSE
                                IF ma_stat.REF_SST_LIMIT = 100 THEN
                                    CAR_PHY_COVERAGE_CODE := '086';
                                ELSE
                                    CAR_PHY_COVERAGE_CODE := '089';
                                END IF;
                            END IF;
                        END IF;
                    END IF;


                    -- This check is still required, reported coverage code must be '083' for commercial lines.
                    IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
                        IF CAR_PHY_COVERAGE_CODE <> '083' THEN
                            CAR_PHY_COVERAGE_CODE := '083';
                        END IF;
                    END IF;

                    v_PHY_COV_SW := '1';

                END IF;
            END IF;



            IF v_PHY_COV_SW <> '1' THEN
                --CB-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('250') THEN
                    CAR_PHY_COVERAGE_CODE := '089';
                    v_PHY_COV_SW := '1';
                END IF;
            END IF;

        END IF;



 -- CAR_SYMBOL                           VARCHAR2(2);
        CAR_SYMBOL := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN

            CAR_SYMBOL := NVL(ma_stat.AU_SYMBOL, '  ');

            IF CAR_SYMBOL = '  ' THEN
                CAR_SYMBOL := '01';
            END IF;


            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15') THEN
                IF (CAR_SYMBOL IN ('09', '00')) OR (NVL(ma_stat.AU_ISO_POLK, ' ') = 'P') THEN
                    IF v_LIST_MARKET > 0 THEN

                        v_INDEX := 1;

                        --Search 1990 COMMERCIAL COSTS SYMBOLS TABLE
                        LOOP
                            EXIT WHEN (v_INDEX > COMCL_1990_OCCUR) OR (v_LIST_MARKET < HI_COST_COMCL_1990(v_INDEX));
                            v_INDEX := v_INDEX + 1;
                        END LOOP;

                        IF v_INDEX = (COMCL_1990_OCCUR  + 1) THEN
                            v_INDEX := COMCL_1990_OCCUR;
                        END IF;

                        CAR_SYMBOL := SYMBOL_COMCL_1990(v_INDEX);

                    END IF;
                END IF;
            END IF;


            --AS OF 1/1/2011 - SYMBOL CODE IS NO LONGER REQUIRED FOR PRIVATE PASSENGER
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('01012011', 'MMDDYYYY') THEN
                    CAR_SYMBOL := ' ';
                END IF;
            END IF;

        END IF;



 -- CAR_INT_APPRAISAL_ID                 VARCHAR2(1);
        CAR_INT_APPRAISAL_ID := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            CAR_INT_APPRAISAL_ID := NVL(ma_stat.AU_INT_APP_ID_CODE, ' ');

            IF CAR_INT_APPRAISAL_ID NOT IN ('3', '4', '9') THEN
                CAR_INT_APPRAISAL_ID := '9';
            END IF;
        END IF;



 -- CAR_ANTITHEFT                        VARCHAR2(1);
        CAR_ANTITHEFT := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            --OTC-COV
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '959', '987')) THEN
                CAR_ANTITHEFT := NVL(ma_stat.AU_BURG_DEVICE, ' ');

                IF CAR_ANTITHEFT = ' ' THEN
                    CAR_ANTITHEFT := '0';
                END IF;
            END IF;
        END IF;



 -- CAR_ORIGINAL_COST                    VARCHAR2(3);
        CAR_ORIGINAL_COST := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('07012011', 'MMDDYYYY') THEN
                    IF v_LIST_MARKET > 90000 THEN
                        IF v_LIST_MARKET > 999000 THEN
                            CAR_ORIGINAL_COST := '999';
                        ELSE
                            CAR_ORIGINAL_COST := ROUND(v_LIST_MARKET / 1000);
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_OEM_COVERAGE                     VARCHAR2(1);
        CAR_OEM_COVERAGE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            CAR_OEM_COVERAGE := '0';
        END IF;



 -- CAR_VALUE_CODE                       VARCHAR2(3);
        CAR_VALUE_CODE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            IF (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0408' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0431')
             OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0508' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0531')
             OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0608' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0631') THEN

                IF ma_stat.EFF_DATE >= TO_DATE('01012005', 'MMDDYYYY') THEN
                    IF v_LIST_MARKET > 99900 THEN
                        CAR_VALUE_CODE := '999';
                    ELSE
                        --CAR_VALUE_CODE := ROUND(v_LIST_MARKET / 100);    -- NPS uses rounded value, CAR requires the value be rounded upward.
                        CAR_VALUE_CODE := TRUNC( (v_LIST_MARKET + 99) / 100 );
                    END IF;
                END IF;

                IF ma_stat.EFF_DATE < TO_DATE('01012005', 'MMDDYYYY') THEN
                    IF v_LIST_MARKET > 10000 THEN
                        CAR_VALUE_CODE := '999';
                    ELSE
                        --CAR_VALUE_CODE := ROUND(v_LIST_MARKET / 100);    -- NPS uses rounded value, CAR requires the value be rounded upward.
                        CAR_VALUE_CODE := TRUNC( (v_LIST_MARKET + 99) / 100 );
                    END IF;
                END IF;

                CAR_VALUE_CODE := LPAD(CAR_VALUE_CODE, 3, '0');

            END IF;
        END IF;






 -- CAR_HIGH_THEFT                       VARCHAR2(1);
        CAR_HIGH_THEFT := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN

            IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                    -- NOT COL-COV
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') NOT IN ('200', '201', '299') THEN
                        --OTC-COV
                        IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '959', '987') THEN
                            CAR_HIGH_THEFT := NVL(ma_stat.AU_RISK_VEH, ' ');

                            IF CAR_HIGH_THEFT = ' ' THEN
                                CAR_HIGH_THEFT := '0';
                            END IF;

                            IF (TO_NUMBER(NVL(ma_stat.AU_VEH_AGE, '9')) > 5) OR (NVL(ma_stat.AU_VEH_AGE, ' ') = ' ') THEN
                                CAR_HIGH_THEFT := '0';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_OTC_EXTRA_RISK                   VARCHAR2(1);
        CAR_OTC_EXTRA_RISK := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                    -- NOT COL-COV
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') NOT IN ('200', '201', '299') THEN
                        --OTC-COV
                        IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '959', '987') THEN
                            CAR_OTC_EXTRA_RISK := NVL(ma_stat.AU_EXTRA_RISK_COMP, ' ');

                            IF CAR_OTC_EXTRA_RISK = ' ' THEN
                                CAR_OTC_EXTRA_RISK := '0';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;




 -- CAR_COLL_EXTRA_RISK                  VARCHAR2(1);
        CAR_COLL_EXTRA_RISK := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                    --COL-COV
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('200', '201', '299') THEN
                        CAR_COLL_EXTRA_RISK := NVL(ma_stat.AU_EXTRA_RISK_COLL, ' ');

                        IF CAR_COLL_EXTRA_RISK = ' ' THEN
                            CAR_COLL_EXTRA_RISK := '0';
                        END IF;
                    END IF;
                END IF;
            END IF;

            --LTD-COV
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('205') THEN
                CAR_COLL_EXTRA_RISK := ' ';
            END IF;
        END IF;



 -- CAR_CATASTROPHE_CODE                 VARCHAR2(2);
        CAR_CATASTROPHE_CODE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            CAR_CATASTROPHE_CODE := SUBSTR(LPAD(NVL(ma_stat.CATASTROPHE_NUMBER, '  '), 3, ' '), -2, 2);
        END IF;




--- Other than No-Fault
 -- CAR_PARTIAL_TOTAL_LOSS_IND           VARCHAR2(1);
        CAR_PARTIAL_TOTAL_LOSS_IND := ' ';

        ---Liability Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
            --PD-COV, CR-COV, SU-COV
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('120', '113', '122', '121') THEN
                CAR_PARTIAL_TOTAL_LOSS_IND := NVL(ma_stat.AU_TOT_PART_IND, ' ');

                IF CAR_PARTIAL_TOTAL_LOSS_IND NOT IN ('1', '2') THEN
                    CAR_PARTIAL_TOTAL_LOSS_IND := '1';
                END IF;
            END IF;
        END IF;

        ---Physical Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            --If not Towing & Labor
            IF NVL(ma_stat.COVERAGE_CODE, ' ') <> '220' THEN
                CAR_PARTIAL_TOTAL_LOSS_IND := NVL(ma_stat.AU_TOT_PART_IND, ' ');

                IF CAR_PARTIAL_TOTAL_LOSS_IND NOT IN ('1', '2') THEN
                    CAR_PARTIAL_TOTAL_LOSS_IND := '1';
                END IF;
            END IF;
        END IF;



--- Other than Physical Damage
 -- CAR_PASSIVE_RESTRAINT                VARCHAR2(1);
        CAR_PASSIVE_RESTRAINT := ' ';

        -- Use value determined from ZDK01 in extract program.
        CAR_PASSIVE_RESTRAINT := NVL(ma_stat.REF_PAS_RES_DIS, ' ');




--- Commercial
 -- CAR_ACCIDENT_TOWN                    VARCHAR2(3);
        CAR_ACCIDENT_TOWN := ' ';


        CAR_ACCIDENT_TOWN := LPAD(v_ACCIDENT_TOWN, 3, '0');


        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                CAR_ACCIDENT_TOWN := ' ';
            END IF;
        END IF;



 -- CAR_ZONE_RATING                      VARCHAR2(3);
        CAR_ZONE_RATING := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_ZONE_RATING := '000';
        END IF;

        --CV 6/12/19IF NVL(ma_stat.AU_COMM_ZONE, '   ') <> '   ' THEN
        IF NVL(ltrim(ma_stat.au_comm_zone,chr(ascii(ma_stat.au_comm_zone))), '   ') <> '   ' THEN
            CAR_ZONE_RATING := ma_stat.AU_COMM_ZONE;
        END IF;



 -- CAR_AGE_CODE                         VARCHAR2(1);
        CAR_AGE_CODE := ' ';

        IF ma_stat.EFF_DATE >= TO_DATE('01011996', 'MMDDYYYY') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('01', '05', '06') THEN
                CAR_AGE_CODE := NVL(ma_stat.AU_VEH_AGE, '9');
            END IF;
        END IF;

        -- Check for valid numeric value in f_MODEL_YEAR.
        IF INSTR(f_MODEL_YEAR, ' ') = 0 AND TRANSLATE(f_MODEL_YEAR, '1234567890', ' ') = '    ' THEN
            IF TO_NUMBER(f_MODEL_YEAR) <= 1980 THEN
                CAR_AGE_CODE := '0';
            END IF;
        ELSE
            -- This previous logic will break in 2021, only use if model year data from history table is not valid/numeric.
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
                IF ( NVL(ma_stat.AU_VEH_YEAR, '  ') > '20' AND NVL(ma_stat.AU_VEH_YEAR, '  ') < '81' ) THEN
                    CAR_AGE_CODE := '0';
                END IF;
            END IF;
        END IF;



 -- CAR_RATING_ID                        VARCHAR2(1);
        CAR_RATING_ID := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_RATING_ID := '9';
        END IF;

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '38') THEN
            IF NVL(ma_stat.EXPERIENCE_RATED, ' ') = 'Y' THEN
                CAR_RATING_ID := '1';
            END IF;
        END IF;



--- Private Passenger

 -- CAR_MODEL_YEAR_CENTURY               VARCHAR2(1);
        CAR_MODEL_YEAR_CENTURY := ' ';

        -- This code will break in 2026, fix w/ century digits available in Oracle
        IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
            IF (NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06')) AND (ma_stat.EFF_DATE > TO_DATE('12311998', 'MMDDYYYY')) THEN
                -- Use value from history table if available.
                IF f_CENTURY <> ' ' AND f_ERROR_CODE = '   ' THEN
                    CAR_MODEL_YEAR_CENTURY := f_CENTURY;
                ELSE
                    IF NVL(ma_stat.AU_VEH_YEAR, '  ') <> '  ' THEN
                        IF ma_stat.AU_VEH_YEAR > '25' AND ma_stat.AU_VEH_YEAR < '9A' THEN
                            CAR_MODEL_YEAR_CENTURY := '1';
                        ELSE
                            IF NVL(ma_stat.AU_VEH_TYPE, '  ') = 'AN' THEN
                                CAR_MODEL_YEAR_CENTURY := '1';
                            ELSE
                                CAR_MODEL_YEAR_CENTURY := '2';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_ANNUAL_MILEAGE                   VARCHAR2(3);
        CAR_ANNUAL_MILEAGE := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN

            IF ma_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') THEN
                IF ma_stat.AU_ANNUAL_MILES IN (0, 99999, 20202) THEN
                    CAR_ANNUAL_MILEAGE := '999';
                ELSE
                    CAR_ANNUAL_MILEAGE := ROUND(ma_stat.AU_ANNUAL_MILES / 100);
                END IF;

                CAR_ANNUAL_MILEAGE := LPAD(CAR_ANNUAL_MILEAGE, 3, '0');

                --Check if CAR_ANNUAL_MILEAGE is not numeric.
                IF TRANSLATE(TRANSLATE(CAR_ANNUAL_MILEAGE, '~', ' '), '0123456789', '~~~~~~~~~~') <> '~~~' THEN
                    CAR_ANNUAL_MILEAGE := '999';
                END IF;

            ELSE
                CAR_ANNUAL_MILEAGE := '999';

                IF ma_stat.AU_ANNUAL_MILES IN (0, 99999, 20202) THEN
                    CAR_ANNUAL_MILEAGE := '999';
                ELSE
                    CAR_ANNUAL_MILEAGE := ROUND(ma_stat.AU_ANNUAL_MILES / 100);
                END IF;

                CAR_ANNUAL_MILEAGE := LPAD(CAR_ANNUAL_MILEAGE, 3, '0');

                --Check if CAR_ANNUAL_MILEAGE is not numeric.
                IF TRANSLATE(TRANSLATE(CAR_ANNUAL_MILEAGE, '~', ' '), '0123456789', '~~~~~~~~~~') <> '~~~' THEN
                    CAR_ANNUAL_MILEAGE := '999';
                END IF;
            END IF;
        END IF;



 -- CAR_MODEL_YEAR                       VARCHAR2(2);
        CAR_MODEL_YEAR := ' ';

        IF ma_stat.EFF_DATE >= TO_DATE('01011996', 'MMDDYYYY') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                CAR_MODEL_YEAR := LPAD(NVL(ma_stat.AU_VEH_YEAR, ' '), 2, ' ');

                IF CAR_MODEL_YEAR = '  ' THEN
                    IF SUBSTR(CAR_POL_EFF_DATE, 1, 1) IN ('0', '-', '&') THEN
                        CAR_MODEL_YEAR := TO_NUMBER(SUBSTR(CAR_POL_EFF_DATE, 2, 2)) - TO_NUMBER(NVL(ma_stat.AU_VEH_AGE, '9')) + 2;
                    ELSE
                        CAR_MODEL_YEAR := TO_NUMBER(SUBSTR(CAR_POL_EFF_DATE, 2, 2)) - TO_NUMBER(NVL(ma_stat.AU_VEH_AGE, '9')) + 1;
                    END IF;
                END IF;
            END IF;

            CAR_MODEL_YEAR := LPAD(CAR_MODEL_YEAR, 2, '0');
        END IF;



 -- CAR_DISCOUNT_CODE                    VARCHAR2(1);
        CAR_DISCOUNT_CODE := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN

            IF ma_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') THEN
            -- NEW DISCOUNTS

                CAR_DISCOUNT_CODE := '0';

                IF NVL(ma_stat.AU_MULTI_IND, ' ') = 'Y' THEN
                    IF (ma_stat.AU_ANNUAL_MILES > 0) AND (ma_stat.AU_ANNUAL_MILES <= 10000) AND (ma_stat.AU_ANNUAL_MILES NOT IN (0, 99999, 20202)) THEN
                        CAR_DISCOUNT_CODE := '4';
                    ELSE
                        CAR_DISCOUNT_CODE := '1';
                    END IF;
                ELSE
                    IF (ma_stat.AU_ANNUAL_MILES > 0) AND (ma_stat.AU_ANNUAL_MILES <= 10000) AND (ma_stat.AU_ANNUAL_MILES NOT IN (0, 99999, 20202)) THEN
                        CAR_DISCOUNT_CODE := '2';
                    END IF;
                END IF;

            ELSE
            -- OLD DISCOUNTS

                CAR_DISCOUNT_CODE := '9';

                IF ma_stat.TOT_ITEMS = 2 THEN
                    IF (NVL(ma_stat.AU_MULTI_IND, ' ') <> 'Y') OR (NVL(ma_stat.AU_MULTI_IND, ' ') = 'Y' AND SUBSTR(CAR_CLASS_CODE, 4, 1) NOT IN ('1', '2', '5')) THEN
                        IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('1101', '1201', '1401', '1221', '1241', '1421', '1261', '1152', '1305', '1162') THEN
                            CAR_DISCOUNT_CODE := '5';
                        END IF;
                    END IF;
                END IF;

                IF CAR_ANNUAL_MILEAGE < '076' THEN
                    CAR_DISCOUNT_CODE := '3';

                    IF ma_stat.TOT_ITEMS = 2 THEN
                        IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('1101', '1201', '1401', '1221', '1241', '1421', '1261', '1152', '1305', '1162') THEN
                            CAR_DISCOUNT_CODE := '2';
                        END IF;
                    END IF;
                END IF;


                IF ma_stat.TOT_ITEMS = 2 THEN
                    IF (NVL(ma_stat.AU_MULTI_IND, ' ') = 'Y') AND (SUBSTR(CAR_CLASS_CODE, 4, 1) IN ('1', '2', '5')) THEN
                        IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('1101', '1201', '1401', '1221', '1241', '1421', '1261', '1152', '1162') THEN
                            CAR_DISCOUNT_CODE := '1';
                        END IF;
                    END IF;
                END IF;


                IF CAR_ANNUAL_MILEAGE < '076' THEN
                    IF ma_stat.TOT_ITEMS = 2 THEN
                        IF (NVL(ma_stat.AU_MULTI_IND, ' ') = 'Y') AND (SUBSTR(CAR_CLASS_CODE, 4, 1) IN ('1', '2', '5')) THEN
                            IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('1101', '1201', '1401', '1221', '1241', '1421', '1261', '1152', '1162') THEN
                                CAR_DISCOUNT_CODE := '4';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;


            IF (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0408' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0431') OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0508' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0531') OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0608' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0631') THEN
                IF NVL(ma_stat.AU_MULTI_IND, ' ') = 'M' THEN
                    CAR_DISCOUNT_CODE := '6';
                ELSE
                    CAR_DISCOUNT_CODE := '0';
                END IF;
            END IF;


            IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                    CASE CAR_DISCOUNT_CODE
                        WHEN '0' THEN CAR_DISCOUNT_CODE := 'A';
                        WHEN '1' THEN CAR_DISCOUNT_CODE := 'B';
                        WHEN '2' THEN CAR_DISCOUNT_CODE := 'C';
                        WHEN '4' THEN CAR_DISCOUNT_CODE := 'D';
                        WHEN '6' THEN CAR_DISCOUNT_CODE := 'E';
                        ELSE          CAR_DISCOUNT_CODE := CAR_DISCOUNT_CODE;
                    END CASE;
                END IF;
            END IF;


            IF ma_stat.EFF_DATE >= TO_DATE('07012006', 'MMDDYYYY') THEN
                IF CAR_DISCOUNT_CODE IN ('9', '5') THEN
                    CAR_DISCOUNT_CODE := '0';
                ELSE
                    IF CAR_DISCOUNT_CODE = '3' THEN
                        CAR_DISCOUNT_CODE := '2';
                    END IF;
                END IF;
            END IF;

        END IF;


BEGIN
         SELECT DISTINCT HI.CONTINUOUS_COVERAGE,HI.LOW_FREQUENCY,HN.CONTINUOUS_COVERAGE,HN.LOW_FREQUENCY
         INTO V_ITEM_CONT_COV_DISC,V_ITEM_LOW_FREQ_DISC,V_NAME_CONT_COV_DISC,V_NAME_LOW_FREQ_DISC
         FROM STAGING.HISTORY_WANG_POLICY HP,
              STAGING.HISTORY_WANG_ITEM HI,
              STAGING.HISTORY_WANG_NAME HN
       WHERE HP.POL_NUM=HI.POL_NUM
       AND HP.RUN_DATE=HI.RUN_DATE
       AND HI.POL_NUM = HN.POL_NUM
       AND HI.RUN_DATE = HN.RUN_DATE
       AND HI.DR_ASSIGN=HN.NAME_SEQ
       AND HN.NAME_TYPE='DR'
       AND HP.POL_NUM=ma_stat.policy_number
       --AND HP.RUN_DATE=ma_stat.actg_date
       AND HI.ITEM_SEQ=ltrim(ma_stat.item_num,'0')
       AND HP.RUN_DATE=(SELECT MAX(RUN_DATE)
                          FROM STAGING.HISTORY_WANG_POLICY HP1
                          WHERE HP1.POL_NUM=MA_STAT.POLICY_NUMBER
                            AND HP1.RUN_DATE<=MA_STAT.LOSS_DATE); 
        EXCEPTION
        WHEN OTHERS THEN 
        V_ITEM_CONT_COV_DISC:=NULL;
        V_ITEM_LOW_FREQ_DISC:=NULL;
        V_NAME_CONT_COV_DISC:=NULL;
        V_NAME_LOW_FREQ_DISC:=NULL;
        END; 



 -- CAR_CONT_COV_DISC                    VARCHAR2(1);
        CAR_CONT_COV_DISC := ' ';

       /*CV 3/14/19 IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN

            IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                    IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987'))) THEN
                        IF ma_stat.AU_CONTCOV_LOWFREQ IN ('1', '3') THEN
                            CAR_CONT_COV_DISC := '1';
                        END IF;
                    END IF;
                END IF;
            END IF;

        END IF;*/

 
 -- CAR_LOW_FREQ_DISC                    VARCHAR2(1);
        CAR_LOW_FREQ_DISC := ' ';

        /* CV 3/14/19 IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN

            IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                    IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987'))) THEN
                        IF ma_stat.AU_CONTCOV_LOWFREQ IN ('2', '3') THEN
                            CAR_LOW_FREQ_DISC := '1';
                        END IF;
                    END IF;
                END IF;
            END IF;

        END IF;*/
       
          IF ma_stat.EFF_DATE >= TO_DATE('01012019', 'MMDDYYYY') then 
                IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                IF V_ITEM_CONT_COV_DISC='Y' AND V_NAME_CONT_COV_DISC='Y' THEN CAR_CONT_COV_DISC:='1';
                        ELSIF NVL(V_ITEM_CONT_COV_DISC,'N')<>'Y' AND V_NAME_CONT_COV_DISC='Y' THEN  CAR_CONT_COV_DISC:='2';
                        ELSE CAR_CONT_COV_DISC:='0';
                        END IF;
                        
                        IF V_ITEM_LOW_FREQ_DISC='Y' AND V_NAME_LOW_FREQ_DISC='Y' THEN CAR_LOW_FREQ_DISC:='1';
                        ELSIF NVL(V_ITEM_LOW_FREQ_DISC,'N')<>'Y' AND V_NAME_LOW_FREQ_DISC='Y' THEN  CAR_LOW_FREQ_DISC:='2';
                        ELSE CAR_LOW_FREQ_DISC:='0';
                        END IF;
                END IF;
          Else
                 IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                    IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                        IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                            IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987'))) THEN
                                IF ma_stat.AU_CONTCOV_LOWFREQ IN ('2', '3') THEN
                                    CAR_LOW_FREQ_DISC := '1';
                                END IF;
                            END IF;
                        END IF;
                    END IF;           
                  END IF;     
                     
                    IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                        IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                            IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                                IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987'))) THEN
                                    IF ma_stat.AU_CONTCOV_LOWFREQ IN ('1', '3') THEN
                                        CAR_CONT_COV_DISC := '1';
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                    END IF;          
          End if;      


---------------------------------------------------
--- After Line-Specific Processing              ---
---------------------------------------------------

 -- CAR_TYPE_OF_LOSS                     VARCHAR2(2);    --87:88
        CAR_TYPE_OF_LOSS := NVL(ma_stat.TYPE_LOSS, '  ');

        -- CBI-COV, OBI-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('109', '111', '100', '101', '102', '103', '104', '105', '106', '110', '112', '134') THEN
            IF NVL(ma_stat.TYPE_LOSS, '  ') NOT IN ('01', '02', '11', '14') THEN
                IF NVL(ma_stat.TRANS_CODE, ' ') IN ('81', '91', '72', '82', '92', '86', '87', '83', '93') THEN
                    CAR_TYPE_OF_LOSS := '11';
                ELSE
                    CAR_TYPE_OF_LOSS := '01';
                END IF;
            END IF;
        END IF;

        IF v_ACCIDENT_TOWN IN ('991', '992', '993', '994', '995', '996', '999') THEN
            -- CBI-COV, OBI-COV
            IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('109', '111', '100', '101', '102', '103', '104', '105', '106', '110', '112', '134') THEN
                IF CAR_TYPE_OF_LOSS = '01' THEN
                    CAR_TYPE_OF_LOSS := '02';
                END IF;

                IF CAR_TYPE_OF_LOSS = '11' THEN
                    CAR_TYPE_OF_LOSS := '14';
                END IF;
            END IF;
        END IF;


        -- PD-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('120', '103', '113') THEN
            CAR_TYPE_OF_LOSS := '03';
        END IF;

        -- MED-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('130') THEN
            CAR_TYPE_OF_LOSS := '05';
        END IF;

        -- U1-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('145') THEN
            CAR_TYPE_OF_LOSS := '06';
        END IF;

        -- U2-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('151') THEN
            CAR_TYPE_OF_LOSS := '07';
        END IF;

        -- TOW-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('220') THEN
            CAR_TYPE_OF_LOSS := '08';
        END IF;

        -- SST-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('230') THEN
            CAR_TYPE_OF_LOSS := '09';
        END IF;



        -- PIP-COV
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
            CAR_TYPE_OF_LOSS := '24';

            IF NVL(ma_stat.TRANS_CODE, ' ') IN ('81', '91', '72', '82', '92', '86', '87', '83', '93') THEN
                CAR_TYPE_OF_LOSS := '45';
            ELSE
                IF NVL(ma_stat.AU_PIP_PAYMENT_CODE, ' ') = '2' THEN
                    CAR_TYPE_OF_LOSS := '24';
                ELSE
                    IF NVL(ma_stat.AU_PIP_PAYMENT_CODE, ' ') = '3' THEN
                        CAR_TYPE_OF_LOSS := '34';
                    ELSE
                        IF NVL(ma_stat.AU_PIP_PAYMENT_CODE, ' ') = '4' THEN
                            CAR_TYPE_OF_LOSS := '44';
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;


        -- PIP-COV
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') AND (CAR_TYPE_OF_LOSS = '  ') THEN
            IF NVL(ma_stat.TRANS_CODE, ' ') IN ('01') THEN
                CAR_TYPE_OF_LOSS := '23';
            ELSE
                CAR_TYPE_OF_LOSS := '24';
            END IF;
        END IF;


        -- COL-COV, LTD-COV
        IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('200', '201', '299', '205') THEN
            IF NVL(ma_stat.TYPE_LOSS, '  ') NOT IN ('12', '11', '10') THEN
                --COL-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('200', '201', '299') THEN
                    IF NVL(ma_stat.DED_TYPE, ' ') = 'Y' THEN
                        CAR_TYPE_OF_LOSS := '12';
                    ELSE
                        CAR_TYPE_OF_LOSS := '10';
                    END IF;
                ELSE
                -- LTD-COV
                    IF ma_stat.DED_AMT = 0 THEN
                        CAR_TYPE_OF_LOSS := '12';
                    ELSE
                        CAR_TYPE_OF_LOSS := '10';
                    END IF;
                END IF;
            END IF;
        END IF;


        -- OTC-COV
        IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '959', '987') THEN
            IF NVL(ma_stat.TYPE_LOSS, '  ') NOT IN ('01', '02', '03', '05', '06', '07', '08', '09') THEN
                CAR_TYPE_OF_LOSS := '09';
            END IF;
        END IF;



        IF NVL(ma_stat.TRANS_CODE, ' ') = '86' THEN
            CAR_TYPE_OF_LOSS := '45';
        END IF;


        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '987' THEN
            CAR_TYPE_OF_LOSS := '09';
        END IF;



        --PHY-COV
        IF ( NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299' ) OR ( NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987') ) THEN
            IF ( (CAR_PHY_COVERAGE_CODE IN ('045', '042', '043', '046', '049')) OR ( SUBSTR(CAR_PHY_COVERAGE_CODE, 1, 2) = '07' ) ) AND (CAR_TYPE_OF_LOSS <> '10') THEN
                CAR_TYPE_OF_LOSS := '10';
            END IF;

            IF (CAR_PHY_COVERAGE_CODE = '040') AND (CAR_TYPE_OF_LOSS <> '12') THEN
                CAR_TYPE_OF_LOSS := '12';
            END IF;

            IF ( CAR_PHY_COVERAGE_CODE IN ('015', '016', '017', '012', '019') ) AND ( CAR_TYPE_OF_LOSS NOT IN ('11', '12') ) THEN
                CAR_TYPE_OF_LOSS := '11';
            END IF;
        END IF;



---------------------------------------------------
--- Line-Specific Areas                         ---
---------------------------------------------------
 -- v_LINE_SPEC_1                      VARCHAR2(25);   --36:60
 -- v_LINE_SPEC_2                      VARCHAR2(5);    --67:71
 -- v_LINE_SPEC_3                      VARCHAR2(5);    --82:86
---------------------------------------------------


        IF CAR_SUBLINE = '611' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_LIMITS_ID,               1, ' ')
                             || LPAD(CAR_LIAB_LIMITS,             2, ' ')
                             || ' '
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '     '
                             || LPAD(CAR_POLLUTION_LIAB,          1, ' ')
                             || LPAD(CAR_ZONE_RATING,             3, ' ')
                             || LPAD(CAR_AGE_CODE,                1, ' ')
                             || LPAD(CAR_AGGR_LIMITS_ID,          1, ' ')
                             || ' '
                             || LPAD(CAR_PARTIAL_TOTAL_LOSS_IND,  1, ' ')
                             || LPAD(CAR_PASSIVE_RESTRAINT,       1, ' ')
                             || '  '
                             || LPAD(CAR_RATING_ID,               1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 :=    LPAD(CAR_REPORTING_DATE,          3, ' ')
                             || '  ';
        END IF;


        IF CAR_SUBLINE = '615' THEN
            v_LINE_SPEC_1 :=    ' '
                             || LPAD(CAR_PIP_COVERAGE,            1, ' ')
                             || '  '
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '      '
                             || LPAD(CAR_ZONE_RATING,             3, ' ')
                             || LPAD(CAR_AGE_CODE,                1, ' ')
                             || '   '
                             || LPAD(CAR_PASSIVE_RESTRAINT,       1, ' ')
                             || '  '
                             || LPAD(CAR_RATING_ID,               1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';
            v_LINE_SPEC_3 := ' ';
        END IF;


        IF CAR_SUBLINE = '618' THEN
            v_LINE_SPEC_1 :=    ' '
                             || LPAD(CAR_PHY_COVERAGE_CODE,       3, ' ')
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '  '
                             || LPAD(CAR_SYMBOL,                  2, ' ')
                             || LPAD(CAR_INT_APPRAISAL_ID,        1, ' ')
                             || ' '
                             || LPAD(CAR_ZONE_RATING,             3, ' ')
                             || LPAD(CAR_AGE_CODE,                1, ' ')
                             || LPAD(CAR_ANTITHEFT,               1, ' ')
                             || ' '
                             || LPAD(CAR_PARTIAL_TOTAL_LOSS_IND,  1, ' ')
                             || LPAD(CAR_ORIGINAL_COST,           3, ' ')
                             || LPAD(CAR_RATING_ID,               1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 :=    '   '
                             || LPAD(CAR_CATASTROPHE_CODE,        2, ' ');
        END IF;


        IF CAR_SUBLINE = '621' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_MODEL_YEAR_CENTURY,      1, ' ')
                             || LPAD(CAR_LIAB_LIMITS,             2, ' ')
                             || ' '
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '    '
                             || LPAD(CAR_LIMITS_ID,               1, ' ')
                             || LPAD(CAR_ANNUAL_MILEAGE,          3, ' ')
                             || LPAD(CAR_MODEL_YEAR,              2, ' ')
                             || '  '
                             || LPAD(CAR_PARTIAL_TOTAL_LOSS_IND,  1, ' ')
                             || LPAD(CAR_PASSIVE_RESTRAINT,       1, ' ')
                             || LPAD(CAR_DISCOUNT_CODE,           1, ' ')
                             || LPAD(CAR_CONT_COV_DISC,           1, ' ')
                             || LPAD(CAR_LOW_FREQ_DISC,           1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 :=    LPAD(CAR_REPORTING_DATE,          3, ' ')
                             || '  ';
        END IF;


        IF CAR_SUBLINE = '625' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_MODEL_YEAR_CENTURY,      1, ' ')
                             || LPAD(CAR_PIP_COVERAGE,            1, ' ')
                             || LPAD(CAR_PIP_DEDUCTIBLE,          2, ' ')
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '     '
                             || LPAD(CAR_ANNUAL_MILEAGE,          3, ' ')
                             || LPAD(CAR_MODEL_YEAR,              2, ' ')
                             || LPAD(CAR_TYPE_CLAIMANT,           1, ' ')
                             || '  '
                             || LPAD(CAR_PASSIVE_RESTRAINT,       1, ' ')
                             || LPAD(CAR_DISCOUNT_CODE,           1, ' ')
                             || LPAD(CAR_CONT_COV_DISC,           1, ' ')
                             || LPAD(CAR_LOW_FREQ_DISC,           1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';
            v_LINE_SPEC_3 := ' ';
        END IF;


        IF CAR_SUBLINE = '628' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_MODEL_YEAR_CENTURY,      1, ' ')
                             || LPAD(CAR_PHY_COVERAGE_CODE,       3, ' ')
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '  '
                             || LPAD(CAR_SYMBOL,                  2, ' ')
                             || ' '
                             || LPAD(CAR_ANNUAL_MILEAGE,          3, ' ')
                             || LPAD(CAR_MODEL_YEAR,              2, ' ')
                             || LPAD(CAR_ANTITHEFT,               1, ' ')
                             || ' '
                             || LPAD(CAR_PARTIAL_TOTAL_LOSS_IND,  1, ' ')
                             || LPAD(CAR_OEM_COVERAGE,            1, ' ')
                             || LPAD(CAR_DISCOUNT_CODE,           1, ' ')
                             || LPAD(CAR_VALUE_CODE,              3, ' ');

            v_LINE_SPEC_2 :=    LPAD(CAR_HIGH_THEFT,              1, ' ')
                             || ' '
                             || LPAD(CAR_OTC_EXTRA_RISK,          1, ' ')
                             || ' '
                             || LPAD(CAR_COLL_EXTRA_RISK,         1, ' ');

            v_LINE_SPEC_3 :=    '   '
                             || LPAD(CAR_CATASTROPHE_CODE,        2, ' ');
        END IF;




----------------------------------
--- End of Line-Specific Areas ---
----------------------------------


--- CAR Sort Key
 -- k_SORT_ORDER                       VARCHAR2(1);    --151
        k_SORT_ORDER := ' ';

        IF CAR_SUBLINE IN ('625', '615') THEN
            k_SORT_ORDER := '1';
        END IF;

        IF CAR_SUBLINE IN ('621', '611') THEN
            k_SORT_ORDER := '2';
        END IF;


        IF CAR_SUBLINE IN ('628', '618') THEN
            k_SORT_ORDER := '3';
        END IF;


        IF k_SORT_ORDER = ' ' THEN
            k_SORT_ORDER := '1';
            --CAR_SUBLINE := '625';
        END IF;




--- Other Fields ---

 -- v_RECORD_NUMBER                    NUMBER(6);
        v_RECORD_NUMBER := NVL(v_RECORD_NUMBER, 0) + 1;


 -- v_DEBUG_DATA                       VARCHAR2(40);
    -- This field is used for optionally sending debug data through to the output file.
    -- Uncomment filter on column name in Procedure "write_fixed_file_ISO_LOZ" before running submission.
        v_DEBUG_DATA := '.';
        v_DEBUG_DATA := v_DEBUG_DATA || f_ERROR_CODE || '.';

--- v_PAID_ROUNDING    --rounding error tracking    -- Added 10/24/2017, ASI/RCrawford
        CASE
            WHEN CAR_ASL = '194' THEN v_paid_rounding(1) := v_paid_rounding(1) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            WHEN CAR_ASL = '193' THEN v_paid_rounding(2) := v_paid_rounding(2) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            WHEN CAR_ASL = '212' THEN v_paid_rounding(3) := v_paid_rounding(3) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            WHEN CAR_ASL = '192' THEN v_paid_rounding(4) := v_paid_rounding(4) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            WHEN CAR_ASL = '191' THEN v_paid_rounding(5) := v_paid_rounding(5) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            WHEN CAR_ASL = '211' THEN v_paid_rounding(6) := v_paid_rounding(6) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            ELSE                      v_paid_rounding(7) := v_paid_rounding(7) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
        END CASE;

---------------------------------------------------
--- Clean up specific records/fields for output ---
---------------------------------------------------

    -- These changes only apply to Private Passenger policies effective 2010 and subsequent.
    IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') AND CAR_ASL IN ('192', '191', '211') THEN

        -- Annual Mileage optional on PPA records, remove.
        v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 12) || '   ' || SUBSTR(v_LINE_SPEC_1, 16, 10);

        -- Passive Restraint optional on PPA records, remove.
        IF CAR_ASL IN ('192', '191') THEN
            v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 20) || ' ' || SUBSTR(v_LINE_SPEC_1, 22, 4);
        END IF;

        -- OEM Coverage, Anti-Theft codes optional on PPA records, remove.
        IF CAR_ASL IN ('211') THEN
            v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 17) || ' ' || SUBSTR(v_LINE_SPEC_1, 19, 2) || ' ' || SUBSTR(v_LINE_SPEC_1, 22, 4);
        END IF;

        -- Partial/Total Loss code optional on PPA records, remove.
        IF CAR_ASL IN ('192', '211') THEN
            v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 19) || ' ' || SUBSTR(v_LINE_SPEC_1, 21, 5);
        END IF;

    END IF;



---------------------------------
--- Claims effective pre-2003 ---
---------------------------------

        -- Claim Count (position 90) needed for claims with effective date prior to 2003.
        -- Class Group (position 54) needed for records with effective date prior to 2003.
        IF ma_stat.EFF_DATE < TO_DATE('01012003', 'MMDDYYYY') THEN
            v_CLAIM_COUNT := '0';

            -- Set position 90 to value in v_CLAIM_COUNT.
            CAR_FILLER_89 := ' ' || v_CLAIM_COUNT;

            -- Set position 54 to zero (placeholder).
            v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 18) || '0' || SUBSTR(v_LINE_SPEC_1, 20, 6);

        END IF;



-----------------------------------------------
--- Use IXPOLVIN table to force a match to  ---
---  premiums reporting on specific fields. ---
-----------------------------------------------


    -- Retrieve values from IXPOLVIN table.
    v_IXPV_DATA := Get_IXPOLVIN_Values( CAR_POLICY_ID, SUBSTR(CAR_POL_EFF_DATE, 2, 2), CAR_VIN, f_IX_RISK, f_IX_TOWN, f_IX_ZIP_CODE, f_IX_DISCOUNT );

    -- Append return value to debug data.
    v_DEBUG_DATA := v_DEBUG_DATA || v_IXPV_DATA;

    -- Update specified output values if necessary unless no matching premiums data found.
    IF v_IXPV_DATA <> 'NO MATCH' THEN
        v_IXPV_DATA := '';

        IF CAR_TYPE_OF_RISK <> '9' AND f_IX_RISK <> '9' THEN
            IF CAR_TYPE_OF_RISK <> f_IX_RISK THEN
                -- Update Type of Risk, note change in v_IXPV_DATA.
                v_IXPV_DATA := v_IXPV_DATA || 'R' || CAR_TYPE_OF_RISK || f_IX_RISK;
                CAR_TYPE_OF_RISK := f_IX_RISK;
            END IF;
        END IF;

        IF CAR_TOWN_CODE <> f_IX_TOWN THEN
            -- Update Town/Territory code, note change in v_IXPV_DATA.
            v_IXPV_DATA := v_IXPV_DATA || 'T' || CAR_TOWN_CODE || f_IX_TOWN;
            CAR_TOWN_CODE := f_IX_TOWN;
        END IF;

        IF CAR_ZIP_CODE <> f_IX_ZIP_CODE THEN
            -- Update ZIP code, note change in v_IXPV_DATA.
            v_IXPV_DATA := v_IXPV_DATA || 'Z' || CAR_ZIP_CODE || f_IX_ZIP_CODE;
            CAR_ZIP_CODE := f_IX_ZIP_CODE;
            
            -- Added 10/26/2017 to address lingering IXPV ZIP data with zeroes for ZIP+4 - if no valid ZIP+4 data set to blank.  --ASI/RCrawford
            IF NVL(SUBSTR(CAR_ZIP_CODE,6,4),'0000') = '0000' THEN
                CAR_ZIP_CODE := SUBSTR(CAR_ZIP_CODE,1,5) || '    ';
            END IF;
            
            
        END IF;

        IF SUBSTR(v_LINE_SPEC_1, 22, 1) <> f_IX_DISCOUNT THEN
            -- Update Discount code, note change in v_IXPV_DATA.
            v_IXPV_DATA := v_IXPV_DATA || 'D' || SUBSTR(v_LINE_SPEC_1, 22, 1) || f_IX_DISCOUNT;
            v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 21) || LPAD(f_IX_DISCOUNT,1,' ') || SUBSTR(v_LINE_SPEC_1, 23, 3);
        END IF;

    END IF;



--- --- ---

        INSERT INTO RPT_CLAIMS_CAR_STAT (
            COMPANY_ID                  ,
            TRANS_TYPE                  ,
            ACT_DATE                    ,
            EFF_DATE                    ,
            ACCID_DATE                  ,
            FILLER_16                   ,
            STATE_CODE                  ,
            TOWN_CODE                   ,
            CAR_ID_CODE                 ,
            TYPE_OF_RISK                ,
            ASL                         ,
            SUBLINE                     ,
            CLASS_CODE                  ,
            LINE_SPEC_1                 ,
            PRODUCER_CODE               ,
            LINE_SPEC_2                 ,
            ZIP_CODE                    ,
            FILLER_81                   ,
            LINE_SPEC_3                 ,
            TYPE_OF_LOSS                ,
            FILLER_89                   ,
            LOSS_AMOUNT                 ,
            CLAIM_ID                    ,
            POLICY_ID                   ,
            VIN                         ,
            COMPANY_USE                 ,
            SORT_ORDER                  ,
            RECORD_NUMBER               ,
            IXPV_DATA                   ,
            DEBUG_DATA
        ) VALUES (
            CAR_COMPANY_ID              ,
            CAR_TRANS_TYPE              ,
            CAR_ACT_DATE                ,
            CAR_POL_EFF_DATE            ,
            CAR_ACCID_DATE              ,
            CAR_FILLER_16               ,
            CAR_STATE_CODE              ,
            CAR_TOWN_CODE               ,
            CAR_CAR_ID_CODE             ,
            CAR_TYPE_OF_RISK            ,
            CAR_ASL                     ,
            CAR_SUBLINE                 ,
            CAR_CLASS_CODE              ,
            v_LINE_SPEC_1               ,
            CAR_PRODUCER_CODE           ,
            v_LINE_SPEC_2               ,
            CAR_ZIP_CODE                ,
            CAR_FILLER_81               ,
            v_LINE_SPEC_3               ,
            CAR_TYPE_OF_LOSS            ,
            CAR_FILLER_89               ,
            CAR_LOSS_AMOUNT             ,
            CAR_CLAIM_ID                ,
            CAR_POLICY_ID               ,
            CAR_VIN                     ,
            CAR_COMPANY_USE             ,
            k_SORT_ORDER                ,
            v_RECORD_NUMBER             ,
            v_IXPV_DATA                 ,
            v_DEBUG_DATA
        );

        COMMIT;


    <<END_OF_RECORD>>
    NULL;

    END LOOP;


    CLOSE all_ma_stat;

--- --- ---

    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG || ma_stat.policy_number);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

PROCEDURE collect_claim_car_ma_osls
IS

/*
    CAR quarterly outstanding loss processing procedure.
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.COLLECT_CLAIM_CAR_MA_OSLS';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR all_ma_stat
    IS
        SELECT DISTINCT
                        s.POLICY_NUMBER,
                        s.GROUP_LINE,
                        s.COVERAGE_CODE,
                        RPTVIEWER.GET_OS_RCS_CLMT(s.claim_number, s.coverage_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.dac_ind, s.item_state, s.company, s.item_num, lpad(s.claimant_number, 3, '0')) as LOSS_AMOUNT,
                         b.AGENT_NUM,
                         b.AGENT_SUB,
                        s.DAC_IND,
                        'O1' as TRANS_CODE,
                        s.TERRITORY,
                        s.LOC_ZIP_1,
                        s.LOC_ZIP_2,
                        s.EFF_DATE,
                        s.LIMIT_AMT_PERSON,
                        s.LIMIT_AMT_OCCUR,
                        s.DED_AMT,
                        s.DED_TYPE,
                        s.CLASS_CODE,
                        s.CSP_COV,
                        s.TOT_ITEMS,
                        s.ITEM_NUM,
                        s.DRIVER_AGE,
                        s.PCB10_MA_MAIP,
                        s.PCB10_MA_MAIP_ELIGIBLE,

                        s.CLAIM_NUMBER,
                        s.LOSS_DATE,
                        s.REPORTED_DATE,
                        s.CATASTROPHE_NUMBER,
                        s.CLAIMANT_NUMBER,
                         b.TYPE_LOSS,
                         a.NAME_TYPE,
                        s.EXPERIENCE_RATED,

                        s.AU_BURG_DEVICE,
                        s.AU_VEH_YEAR,
                        s.AU_SYMBOL,
                        s.AU_VEH_TYPE,
                        s.AU_VEH_AGE,
                        s.AU_IDENT_NUM,
                        s.AU_MULTI_IND,
                        s.AU_ISO_POLK,
                        s.AU_CONTCOV_LOWFREQ,
                        s.AU_LIST_MARKET,
                         b.AU_ANNUAL_MILES,
                        s.AU_COMM_ZONE,
                        s.AU_MA_CAR_ID,
                        s.AU_ACCIDENT_CITY,
                        s.AU_EXTRA_RISK_COMP,
                        s.AU_EXTRA_RISK_COLL,
                        s.AU_INT_APP_ID_CODE,
                         --s.AU_TOT_PART_IND,
                        s.AU_RISK_VEH,

                        s.REF_MA_CAR_ID,
                        s.REF_MA_MAIP,
                        s.REF_MA_MAIP_ELIGIBLE,
                        s.REF_PAS_RES_DIS,
                        s.REF_ZIP_1,
                        s.REF_TOW_IND,
                        s.REF_SST_LIMIT

        FROM RPT_CLAIMS_MA_STAT s


        INNER JOIN
        ( SELECT DISTINCT
                b1.AGENT_NUM,
                b1.AGENT_SUB,
                b1.TYPE_LOSS,
                b1.AU_ANNUAL_MILES,
                --b1.AU_TOT_PART_IND,
                b1.policy_number,
                b1.claim_number,
                b1.claimant_number,
                b1.item_num,
                b1.coverage_code,
                b1.dac_ind,
                b1.actg_date,
                b1.trans_code
            FROM RPT_CLAIMS_MA_STAT b1
            WHERE b1.actg_date =
                       /*
                    ( SELECT MAX (b2.actg_date)
                        FROM RPT_CLAIMS_MA_STAT b2
                        WHERE   b1.policy_number    = b2.policy_number
                            AND b1.claim_number     = b2.claim_number
                            AND b1.claimant_number  = b2.claimant_number
                            AND b1.item_num         = b2.item_num
                            AND b1.coverage_code    = b2.coverage_code
                            AND b1.dac_ind          = b2.dac_ind
                            AND b2.book_date <= v_end_date
                    )
    */      -- Changing to address duplication of reserves when multiple transactions with different type of loss data occur on the same day.  10/24/2017.  --ASI/RCrawford
            -- Note: Now using the most recent actg_date with only one transaction if one exists, otherwise using the earliest available actg_date - not ideal, and duplication is still possible, but a bit more reliable than the previous subquery.
              ( SELECT MAX (b2.actg_date)
                FROM (
                        SELECT b3.actg_date, count(b3.actg_date) as rowcount
                        FROM RPT_CLAIMS_MA_STAT b3
                        WHERE   b1.policy_number    = b3.policy_number
                            AND b1.claim_number     = b3.claim_number
                            AND b1.claimant_number  = b3.claimant_number
                            AND b1.item_num         = b3.item_num
                            AND b1.coverage_code    = b3.coverage_code
                            AND b1.dac_ind          = b3.dac_ind
                            AND b3.book_date <= v_end_date
                        GROUP BY b3.actg_date

                        union all

                        SELECT min(b4.actg_date), 1 as rowcount
                        FROM RPT_CLAIMS_MA_STAT b4
                        WHERE   b1.policy_number    = b4.policy_number
                            AND b1.claim_number     = b4.claim_number
                            AND b1.claimant_number  = b4.claimant_number
                            AND b1.item_num         = b4.item_num
                            AND b1.coverage_code    = b4.coverage_code
                            AND b1.dac_ind          = b4.dac_ind
                            AND b4.book_date <= v_end_date
                      ) b2
                WHERE b2.rowcount = 1
              )
        ) b
        ON
                s.POLICY_NUMBER   = b.POLICY_NUMBER
            AND s.CLAIM_NUMBER    = b.CLAIM_NUMBER
            AND s.CLAIMANT_NUMBER = b.CLAIMANT_NUMBER
            AND s.ITEM_NUM        = b.ITEM_NUM
            AND s.COVERAGE_CODE   = b.COVERAGE_CODE
            AND s.DAC_IND         = b.DAC_IND


        INNER JOIN
        ( SELECT DISTINCT
                a1.NAME_TYPE,
                a1.policy_number,
                a1.claim_number,
                a1.claimant_number,
                a1.item_num,
                a1.coverage_code,
                a1.dac_ind,
                a1.actg_date,
                a1.trans_code
            FROM RPT_CLAIMS_MA_STAT a1
            WHERE a1.trans_code IN ('01', '11')
              AND a1.actg_date =
                ( SELECT MIN (a2.actg_date)
                    FROM RPT_CLAIMS_MA_STAT a2
                    WHERE   a1.policy_number    = a2.policy_number
                        AND a1.claim_number     = a2.claim_number
                        AND a1.claimant_number  = a2.claimant_number
                        AND a1.item_num         = a2.item_num
                        AND a1.coverage_code    = a2.coverage_code
                        AND a1.dac_ind          = a2.dac_ind
                        AND a2.book_date <= v_end_date
                        AND a2.trans_code IN ('01', '11')
                 )

        ) a
        ON
                s.POLICY_NUMBER   = a.POLICY_NUMBER
            AND s.CLAIM_NUMBER    = a.CLAIM_NUMBER
            AND s.CLAIMANT_NUMBER = a.CLAIMANT_NUMBER
            AND s.ITEM_NUM        = a.ITEM_NUM
            AND s.COVERAGE_CODE   = a.COVERAGE_CODE
            AND s.DAC_IND         = a.DAC_IND


        WHERE
                s.dac_ind = '1'
            AND ( s.group_line IN ('06', '07') OR ( s.group_line IN ('05', '15', '38') AND s.item_state = 'MA' ) )
            AND s.book_date <= v_end_date
            AND s.AGENT_NUM <> '20999'
            AND NOT ( (s.coverage_code >= '200' and s.coverage_code <= '299') or s.coverage_code in ('959', '987') )
            AND RPTVIEWER.GET_OS_RCS_CLMT(s.claim_number, s.coverage_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.dac_ind, s.item_state, s.company, s.item_num, lpad(s.claimant_number, 3, '0')) <> 0
            AND s.actg_date =
            ( SELECT MAX (s1.actg_date)
                FROM RPT_CLAIMS_MA_STAT s1
                WHERE   s.claim_number = s1.claim_number
                        AND s.policy_number = s1.policy_number
                        AND s.claimant_number = s1.claimant_number
                        AND s.item_num = s1.item_num
                        AND s.coverage_code = s1.coverage_code
                        AND s.group_line = s1.group_line
                        AND s.item_state = s1.item_state
                        AND s.dac_ind = s1.dac_ind
                        AND s1.trans_code IN ('01', '11')
                        AND s1.book_date <= v_end_date
                )


        order by s.claim_number, s.item_num, s.claimant_number, s.coverage_code
;



    ma_stat                                all_ma_stat%ROWTYPE;

--- --- ---


--- CAR Stat Variables                                 ---Character Position
    CAR_COMPANY_ID                     VARCHAR2(3);    --1:3
    CAR_TRANS_TYPE                     VARCHAR2(2);    --4:5
    CAR_ACT_DATE                       VARCHAR2(2);    --6:7
    CAR_POL_EFF_DATE                   VARCHAR2(3);    --8:10
    CAR_ACCID_DATE                     VARCHAR2(5);    --11:15
    CAR_FILLER_16                      VARCHAR2(1);    --16
    CAR_STATE_CODE                     VARCHAR2(2);    --17:18
    CAR_TOWN_CODE                      VARCHAR2(3);    --19:21
    CAR_CAR_ID_CODE                    VARCHAR2(1);    --22
    CAR_TYPE_OF_RISK                   VARCHAR2(1);    --23
    CAR_ASL                            VARCHAR2(3);    --24:26
    CAR_SUBLINE                        VARCHAR2(3);    --27:29
    CAR_CLASS_CODE                     VARCHAR2(6);    --30:35
    v_LINE_SPEC_1                      VARCHAR2(25);   --36:60
    CAR_PRODUCER_CODE                  VARCHAR2(6);    --61:66
    v_LINE_SPEC_2                      VARCHAR2(5);    --67:71
    CAR_ZIP_CODE                       VARCHAR2(9);    --72:80
    CAR_FILLER_81                      VARCHAR2(1);    --81
    v_LINE_SPEC_3                      VARCHAR2(5);    --82:86
    CAR_TYPE_OF_LOSS                   VARCHAR2(2);    --87:88
    CAR_FILLER_89                      VARCHAR2(2);    --89:90
    CAR_LOSS_AMOUNT                    NUMBER(8);      --91:98
    CAR_CLAIM_ID                       VARCHAR2(16);   --99:114
    CAR_POLICY_ID                      VARCHAR2(16);   --115:130
    CAR_VIN                            VARCHAR2(17);   --131:147
    CAR_COMPANY_USE                    VARCHAR2(3);    --148:150
--- CAR Sort Key
    k_SORT_ORDER                       VARCHAR2(1);    --151


--- Line-specific Stat Variables

 -- Liability
    CAR_LIMITS_ID                      VARCHAR2(1);
    CAR_LIAB_LIMITS                    VARCHAR2(2);
    CAR_POLLUTION_LIAB                 VARCHAR2(1);
    CAR_AGGR_LIMITS_ID                 VARCHAR2(1);
    CAR_REPORTING_DATE                 VARCHAR2(3);

 -- No-Fault
    CAR_PIP_COVERAGE                   VARCHAR2(1);
    CAR_PIP_DEDUCTIBLE                 VARCHAR2(2);
    CAR_TYPE_CLAIMANT                  VARCHAR2(1);

 -- Physical Damage
    CAR_PHY_COVERAGE_CODE              VARCHAR2(3);
    CAR_SYMBOL                         VARCHAR2(2);
    CAR_INT_APPRAISAL_ID               VARCHAR2(1);
    CAR_ANTITHEFT                      VARCHAR2(1);
    CAR_ORIGINAL_COST                  VARCHAR2(3);
    CAR_OEM_COVERAGE                   VARCHAR2(1);
    CAR_VALUE_CODE                     VARCHAR2(3);
    CAR_HIGH_THEFT                     VARCHAR2(1);
    CAR_OTC_EXTRA_RISK                 VARCHAR2(1);
    CAR_COLL_EXTRA_RISK                VARCHAR2(1);
    CAR_CATASTROPHE_CODE               VARCHAR2(2);

 -- Other than No-Fault
    CAR_PARTIAL_TOTAL_LOSS_IND         VARCHAR2(1);

 -- Other than Physical Damage
    CAR_PASSIVE_RESTRAINT              VARCHAR2(1);

 -- Commercial
    CAR_ACCIDENT_TOWN                  VARCHAR2(3);
    CAR_ZONE_RATING                    VARCHAR2(3);
    CAR_AGE_CODE                       VARCHAR2(1);
    CAR_RATING_ID                      VARCHAR2(1);

 -- Private Passenger
    CAR_MODEL_YEAR_CENTURY             VARCHAR2(1);
    CAR_ANNUAL_MILEAGE                 VARCHAR2(3);
    CAR_MODEL_YEAR                     VARCHAR2(2);
    CAR_DISCOUNT_CODE                  VARCHAR2(1);
    CAR_CONT_COV_DISC                  VARCHAR2(1);
    CAR_LOW_FREQ_DISC                  VARCHAR2(1);
    V_ITEM_CONT_COV_DISC                VARCHAR2(1);
    V_NAME_CONT_COV_DISC                VARCHAR2(1);
    V_ITEM_LOW_FREQ_DISC                VARCHAR2(1);
    V_NAME_LOW_FREQ_DISC                VARCHAR2(1);

--- END OF STAT VARIABLES


--- Individual record number for testing/debugging/summarization
    --v_RECORD_NUMBER                    NUMBER(6);  -- this is a global field, definition provided for documentation

--- Field for tracking IXPOLVIN interaction - value returned from function.
    v_IXPV_DATA                        VARCHAR2(32);

--- Field for optionally sending debug data through to the output file - to use, comment out the filter on the column name in Procedure "write_fixed_file_ISO_LOZ"
    v_DEBUG_DATA                       VARCHAR2(40);


--- Function Output Fields
    f_MODEL_YEAR                       VARCHAR2(4);
    f_CENTURY                          VARCHAR2(1);
    f_LIST_MARKET                      NUMBER(8);
    f_ERROR_CODE                       VARCHAR2(3);

    f_TOT_PART_IND                     VARCHAR2(1);

    f_IX_RISK                          VARCHAR2(1);
    f_IX_TOWN                          VARCHAR2(3);
    f_IX_ZIP_CODE                      VARCHAR2(9);
    f_IX_DISCOUNT                      VARCHAR2(1);


--- Procedural Variables
    v_TRANS_CODE                       VARCHAR2(2);
    v_INDEX                            NUMBER(2);

    v_LIMIT_AMT_PERSON                 NUMBER(8);
    v_HOLD_CSL_LIMIT                   NUMBER(8);
    v_LIAB_LIMITS_SW                   VARCHAR2(1);
    v_PHY_COV_SW                       VARCHAR2(1);
    v_ACCIDENT_TOWN                    VARCHAR2(3);
    v_LIST_MARKET                      NUMBER(8);

    v_MMV_OTC_IND                      VARCHAR2(1);
    v_TEMP_TOW_COV                     VARCHAR2(3);

    v_CLAIM_COUNT                      VARCHAR2(1);



--- Reference Tables ---

    -- MMV LIMIT TABLE, 22 entries
    MMV_LIMIT_1         Amount_TBL := Amount_TBL(0000000, 0010000, 0015000, 0020000, 0020000, 0025000, 0025000, 0030000, 0035000, 0050000, 0100000, 0250000, 0500000, 0500000, 0000500, 0000750, 0001000, 0002000, 0005000, 0750000, 1000000, 9999999);
    MMV_LIMIT_2         Amount_TBL := Amount_TBL(0000000, 0020000, 0030000, 0040000, 0050000, 0050000, 0060000, 0070000, 0080000, 0100000, 0300000, 0500000, 0500000, 1000000, 0000000, 0000000, 0000000, 0000000, 0000000, 0000000, 1000000, 9999999);
    MMV_LIMIT_UM        Code2_TBL  := Code2_TBL(   '00',    '02',    '03',    '04',    '11',    '06',    '05',    '12',    '13',    '07',    '08',    '09',    '15',    '10',    '--',    '--',    '--',    '--',    '--',    '--',    '14',    '49');
    MMV_LIMIT_BI        Code2_TBL  := Code2_TBL(   '00',    '02',    '03',    '04',    '11',    '06',    '05',    '12',    '13',    '07',    '08',    '09',    '15',    '10',    '--',    '--',    '--',    '--',    '--',    '--',    '14',    '49');
    MMV_LIMIT_PD        Code2_TBL  := Code2_TBL(   '00',    '02',    '03',    '09',    '09',    '04',    '04',    '09',    '05',    '06',    '07',    '11',    '10',    '10',    '09',    '09',    '09',    '09',    '01',    '12',    '13',    '09');
    MMV_LIMIT_MP        Code2_TBL  := Code2_TBL(   '00',    '06',    '07',    '08',    '08',    '09',    '09',    '--',    '--',    '10',    '11',    '--',    '--',    '--',    '01',    '02',    '03',    '04',    '05',    '--',    '--',    '49');
    MMV_LIMIT_OCCUR     NUMBER(2) := 22;

    -- CSL LIMIT TABLE, 21 entries
    CSL_LIMIT_1         Amount_TBL := Amount_TBL(0035000, 0040000, 0045000, 0050000, 0075000, 0100000, 0150000, 0200000, 0250000, 0300000, 0400000, 0500000, 0750000, 1000000, 1500000, 2000000, 2500000, 3000000, 5000000, 7500000, 9999999);
    CSL_LIMIT_CODE      Code2_TBL  := Code2_TBL(   '03',    '07',    '04',    '08',    '09',    '10',    '11',    '12',    '13',    '14',    '15',    '16',    '17',    '18',    '19',    '20',    '21',    '22',    '23',    '24',    '25');
    CSL_LIMIT_OCCUR     NUMBER(2) := 21;

    -- MMV DEDUCTIBLE TABLE, 11 entries
    MMV_DEDUCTIBLE      Amount_TBL := Amount_TBL(0000000, 0000100, 0000200, 0000250, 0000300, 0000500, 0001000, 0002000, 0004000, 0008000, 9999999);
    MMV_DED_PIPI        Code2_TBL  := Code2_TBL(   '01',    '12',    '  ',    '13',    '  ',    '14',    '15',    '16',    '17',    '18',    '  ');
    MMV_DED_PIPIH       Code2_TBL  := Code2_TBL(   '01',    '22',    '  ',    '23',    '  ',    '24',    '25',    '26',    '27',    '28',    '  ');
    MMV_DED_CLWW        Code3_TBL  := Code3_TBL(  '   ',   '013',   '014',   '019',   '015',   '016',   '017',   '012',   '019',   '019',   '019');
    MMV_DED_CLWOW       Code3_TBL  := Code3_TBL(  '   ',   '074',   '075',   '079',   '076',   '077',   '078',   '072',   '079',   '079',   '079');
    MMV_DED_LT          Code3_TBL  := Code3_TBL(  '040',   '049',   '049',   '049',   '045',   '042',   '043',   '046',   '049',   '049',   '049');
     --MMV_DED_CP          Code3_TBL  := Code3_TBL(  '   ',   '031',   '033',   '004',   '035',   '037',   '039',   '023',   '004',   '004',   '004');
     --MMV_DED_CPTW        Code3_TBL  := Code3_TBL(  '   ',   '   ',   '   ',   '   ',   '234',   '236',   '238',   '222',   '   ',   '   ',   '264');
     -- Table changes per ticket 50337.
    MMV_DED_CP          Code3_TBL  := Code3_TBL(  '   ',   '004',   '004',   '004',   '035',   '037',   '039',   '023',   '004',   '004',   '004');
    MMV_DED_CP50        Code3_TBL  := Code3_TBL(  '   ',   '264',   '264',   '264',   '234',   '236',   '238',   '222',   '264',   '264',   '264');
    MMV_DED_CP100       Code3_TBL  := Code3_TBL(  '   ',   '464',   '464',   '464',   '434',   '436',   '438',   '422',   '464',   '464',   '464');
     -- End of table changes.
    MMV_DED_OCCUR       NUMBER(2) := 11;


    -- 1990 COMMERCIAL COSTS SYMBOLS TABLE
    HI_COST_COMCL_1990  Amount_TBL := Amount_TBL(0004501, 0006001, 0008001, 0010001, 0015001, 0020001, 0025001, 0040001, 0065001, 0090001, 9999999);
    SYMBOL_COMCL_1990   Code2_TBL  := Code2_TBL(   '01',    '02',    '03',    '04',    '05',    '06',    '07',    '08',    '10',    '11',    '12');
    COMCL_1990_OCCUR    NUMBER(2) := 11;



--- --- ---

BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'collect_claim_car_ma_osls_insert';

    OPEN all_ma_stat;


--- Initial values at start of processing
    v_HOLD_CSL_LIMIT := 0;



--- Main processing loop
    LOOP
        FETCH all_ma_stat INTO ma_stat;

        EXIT WHEN all_ma_stat%NOTFOUND;


    -- Uncomment when using v_DEBUG_DATA to reset the field to null at the start of each record
        --v_DEBUG_DATA = '';


    --- Transaction Code modification and record filtering
        v_TRANS_CODE := NVL(ma_stat.TRANS_CODE, '  ');


    --- Values determined at start of each record

        v_LIMIT_AMT_PERSON := ma_stat.LIMIT_AMT_PERSON;

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103')) THEN
            IF v_LIMIT_AMT_PERSON = 0 THEN
                v_LIMIT_AMT_PERSON := v_HOLD_CSL_LIMIT;
            ELSE
                v_HOLD_CSL_LIMIT := v_LIMIT_AMT_PERSON;
            END IF;
        END IF;


        IF NVL(ma_stat.AU_ACCIDENT_CITY, '   ') IN ('   ', '000') THEN
            v_ACCIDENT_TOWN := ma_stat.TERRITORY;
        ELSE
            v_ACCIDENT_TOWN := ma_stat.AU_ACCIDENT_CITY;
        END IF;



        -- Retrieve vehicle data from history table.
        --f_ERROR_CODE := Get_CAR_Vehicle_Data(ma_stat.POLICY_NUMBER, ma_stat.GROUP_LINE, ma_stat.ITEM_NUM, '1', ma_stat.EFF_DATE, ma_stat.LOSS_DATE, ma_stat.AU_IDENT_NUM, f_LIST_MARKET, f_CENTURY, f_MODEL_YEAR);
        f_ERROR_CODE := Get_CAR_Vehicle_Data(ma_stat.POLICY_NUMBER, ma_stat.GROUP_LINE, ma_stat.ITEM_NUM, '1', ma_stat.EFF_DATE, ma_stat.REPORTED_DATE, ma_stat.AU_IDENT_NUM, f_LIST_MARKET, f_CENTURY, f_MODEL_YEAR);

        IF ma_stat.AU_LIST_MARKET <> f_LIST_MARKET THEN
            IF ma_stat.AU_LIST_MARKET = 0 THEN
                -- RDK18 record missing list market value.
                v_LIST_MARKET := f_LIST_MARKET;
            ELSE
                IF f_LIST_MARKET = 0 THEN
                    -- staging.history_wang_item table missing list market value.
                    v_LIST_MARKET := ma_stat.AU_LIST_MARKET;
                ELSE
                    -- RDK18 record and staging.history_wang_item table have different values.
                    v_LIST_MARKET := ma_stat.AU_LIST_MARKET;
                END IF;
            END IF;
        ELSE
            -- RDK18 value and staging.history_wang_item value either identical or both missing.
            v_LIST_MARKET := f_LIST_MARKET;
        END IF;


        -- Retrieve the total/partial loss indicator from the most recent record for the claim/reserve.
        f_TOT_PART_IND := Get_CAR_OSLS_TotalPartialInd(ma_stat.POLICY_NUMBER, ma_stat.CLAIM_NUMBER, ma_stat.CLAIMANT_NUMBER, ma_stat.ITEM_NUM, ma_stat.COVERAGE_CODE, ma_stat.DAC_IND, v_end_date);




--------------------------
--- CAR Stat Variables ---
--------------------------

 -- CAR_COMPANY_ID                       VARCHAR2(3);    --1:3
        CAR_COMPANY_ID := '664';


 -- CAR_TRANS_TYPE                       VARCHAR2(2);    --4:5
        CAR_TRANS_TYPE := '  ';

        IF v_TRANS_CODE IN ('01', 'O1') THEN
            CAR_TRANS_TYPE := '21';
        END IF;


 -- CAR_ACT_DATE                         VARCHAR2(2);    --6:7
        --CAR_ACT_DATE := CAR_Date_Conv(ma_stat.BOOK_DATE, 'MY');
        CAR_ACT_DATE := CAR_Date_Conv(v_end_date, 'MY');


 -- CAR_POL_EFF_DATE                     VARCHAR2(3);
        CAR_POL_EFF_DATE := CAR_Date_Conv(ma_stat.EFF_DATE, 'MYY');


 -- CAR_ACCID_DATE                       VARCHAR2(5);    --11:15
        CAR_ACCID_DATE := CAR_Date_Conv(ma_stat.LOSS_DATE, 'MDDYY');


 -- CAR_FILLER_16                        VARCHAR2(1);    --16
        CAR_FILLER_16 := ' ';


 -- CAR_STATE_CODE                       VARCHAR2(2);    --17:18
        CAR_STATE_CODE := '20';


 -- CAR_TOWN_CODE                        VARCHAR2(3);    --19:21
        CAR_TOWN_CODE := ma_stat.TERRITORY;
        CAR_TOWN_CODE := LPAD(CAR_TOWN_CODE, 3, '0');

      --CV6/12/19  IF NVL(ma_stat.AU_COMM_ZONE, '   ') <> '   ' THEN
        IF NVL(ltrim(ma_stat.au_comm_zone,chr(ascii(ma_stat.au_comm_zone))), '   ') <> '   ' THEN
            CAR_TOWN_CODE := '000';
        END IF;




---------------------------------------------------
--- Annual Statement Line & Subline             ---
---------------------------------------------------
 -- CAR_ASL                              VARCHAR2(3);    --24:26
 -- CAR_SUBLINE                          VARCHAR2(3);    --27:29
---------------------------------------------------

        CAR_ASL := ' ';
        CAR_SUBLINE := ' ';


        -- Private Passenger Auto
        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
                CAR_ASL := '192';
                CAR_SUBLINE := '621';
            END IF;

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
                CAR_ASL := '191';
                CAR_SUBLINE := '625';
            END IF;

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
                CAR_ASL := '211';
                CAR_SUBLINE := '628';
            END IF;

        -- Commercial Auto
        ELSE

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
                CAR_ASL := '194';
                CAR_SUBLINE := '611';
            END IF;

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
                CAR_ASL := '193';
                CAR_SUBLINE := '615';
            END IF;

            IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
                CAR_ASL := '212';
                CAR_SUBLINE := '618';
            END IF;

        END IF;



 -- CAR_CLASS_CODE                       VARCHAR2(6);    --30:35
        CAR_CLASS_CODE := SUBSTR(RPAD(NVL(ma_stat.CLASS_CODE, ' '), 6, ' '), 1, 6);

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE < TO_DATE('01012007', 'MMDDYYYY') THEN
                CAR_CLASS_CODE := SUBSTR(CAR_CLASS_CODE, 1, 4) || '00';
            END IF;

            IF ( SUBSTR(CAR_CLASS_CODE, 1, 1) = '1' ) AND ( SUBSTR(CAR_CLASS_CODE, 4, 1) = '2' ) THEN
                CAR_CLASS_CODE := '1152' || SUBSTR(CAR_CLASS_CODE, 5, 2);

                IF ma_stat.EFF_DATE > TO_DATE('12312004', 'MMDDYYYY') THEN
                    IF (ma_stat.DRIVER_AGE > 74) AND (ma_stat.DRIVER_AGE < 202) THEN
                        CAR_CLASS_CODE := '1162' || SUBSTR(CAR_CLASS_CODE, 5, 2);
                    END IF;
                END IF;
            END IF;
        END IF;

        CAR_CLASS_CODE := TRANSLATE(CAR_CLASS_CODE, ' ', '0');

        IF NVL(ma_stat.COVERAGE_CODE, ' ') = '987' THEN
            CAR_CLASS_CODE := '998000';
        END IF;



 -- CAR_CAR_ID_CODE                      VARCHAR2(1),    --22
        CAR_CAR_ID_CODE := ' ';

        CAR_CAR_ID_CODE := NVL(ma_stat.AU_MA_CAR_ID, ' ');

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '15') THEN
            IF CAR_CAR_ID_CODE = ' ' THEN
                CAR_CAR_ID_CODE := '0';
            END IF;
        END IF;


        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('04012009', 'MMDDYYYY') THEN
                CAR_CAR_ID_CODE := NVL(ma_stat.AU_MA_CAR_ID, ' ');

                IF CAR_CAR_ID_CODE = ' ' THEN
                    -- Use value retrieved from PDK03.
                    CAR_CAR_ID_CODE := NVL(ma_stat.REF_MA_CAR_ID, ' ');
                END IF;
            END IF;
        END IF;


        IF CAR_CAR_ID_CODE = ' ' THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('04012008', 'MMDDYYYY') THEN
                    IF ( NVL(ma_stat.PCB10_MA_MAIP, ' ') = 'Y' ) OR ( SUBSTR(NVL(ma_stat.AGENT_NUM, ' '), 1, 2) = '21' ) THEN
                        IF NVL(ma_stat.PCB10_MA_MAIP, ' ') = 'Y' THEN
                            CAR_CAR_ID_CODE := '9';
                        ELSE
                            IF NVL(ma_stat.PCB10_MA_MAIP_ELIGIBLE, ' ') = 'Y' THEN
                                CAR_CAR_ID_CODE := '8';
                            ELSE
                                -- Use values retrieved from PDK03.
                                IF NVL(ma_stat.REF_MA_MAIP, ' ') = 'Y' THEN
                                    CAR_CAR_ID_CODE := '9';
                                ELSE
                                    IF NVL(ma_stat.REF_MA_MAIP_ELIGIBLE, ' ') = 'Y' THEN
                                        CAR_CAR_ID_CODE := '8';
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;


        IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('0483', '9620') THEN
            IF CAR_CAR_ID_CODE = '8' THEN
                CAR_CAR_ID_CODE := '0';
            ELSE
                CAR_CAR_ID_CODE := '1';
            END IF;
        END IF;

        IF SUBSTR(CAR_CLASS_CODE, 1, 4) = '0483' THEN
            IF ma_stat.EFF_DATE >= TO_DATE('04012009', 'MMDDYYYY') THEN
                CAR_CAR_ID_CODE := '8';
            END IF;
        END IF;



 -- CAR_TYPE_OF_RISK                     VARCHAR2(1);    --23
        CAR_TYPE_OF_RISK := '1';


        -- SPECIAL GROUP MARKETING AGENTS
        IF NVL(ma_stat.AGENT_NUM, ' ') IN ('20100', '20991', '20333', '20561', '20571', '20506') THEN
            CAR_TYPE_OF_RISK := '3';
        END IF;

        IF NVL(ma_stat.AGENT_NUM, ' ') IN ('20345', '20281', '20971', '20409', '20410') THEN
            CAR_TYPE_OF_RISK := '3';
        END IF;

        IF ( NVL(ma_stat.AGENT_NUM, ' ') = '20554' ) AND ( NVL(ma_stat.AGENT_SUB, ' ') = '002' ) THEN
            CAR_TYPE_OF_RISK := '3';
        END IF;


        -- DISAPPROVED AGENTS (SPECIAL DEVIATION WAS REVOKED)
        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311995', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AGENT_NUM, ' ') = '20274' THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;

            IF ma_stat.EFF_DATE > TO_DATE('01051997', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AGENT_NUM, ' ') IN ('20271', '20275', '20278', '20282', '20291', '20292', '20293', '20295', '20296', '20297', '20298', '20299', '20300', '20301', '20310', '20315') THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;

            IF ma_stat.EFF_DATE > TO_DATE('12311997', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AGENT_NUM, ' ') IN ('20277', '20278', '20282', '20284', '20290', '20292', '20293', '20295', '20296', '20297', '20298', '20299', '20300', '20307') THEN
                    CAR_TYPE_OF_RISK := '1';
                END IF;
            END IF;
        END IF;



        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '15', '38') THEN
            CAR_TYPE_OF_RISK := '1';
        END IF;

        IF SUBSTR(CAR_CLASS_CODE, 1, 4) = '7000' THEN
            CAR_TYPE_OF_RISK := '6';
        END IF;

        IF NVL(ma_stat.COVERAGE_CODE, ' ') = '987' THEN
            CAR_TYPE_OF_RISK := '9';
        END IF;



 -- CAR_PRODUCER_CODE                    VARCHAR2(6);    --61:66
        CAR_PRODUCER_CODE := ' ';

        CAR_PRODUCER_CODE := Get_CAR_Producer(ma_stat.AGENT_NUM, ma_stat.AGENT_SUB);


 -- CAR_ZIP_CODE                         VARCHAR2(9);    --72:80
        CAR_ZIP_CODE := LPAD(NVL(ma_stat.LOC_ZIP_1, '00000'), 5, '0');

        -- Check for problem ZIP codes.
        IF CAR_ZIP_CODE IN ('02146', '02147', '02154', '02258', '02159', '02160', '02161', '02162', '02164', '02165', '02166', '02167', '02158', '02168', '02195', '02173', '02174', '02175', '02178', '02179', '02181', '02157', '02192', '02194', '02193', '02172', '02272', '02277', '02401', '02402', '02403', '02404', '02405', '02411') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('01012003', 'MMDDYYYY') THEN
                -- Use value from ZDK01 to replace a problem ZIP code.
                CAR_ZIP_CODE := LPAD(NVL(ma_stat.REF_ZIP_1, '00000'), 5, '0');
            END IF;
        END IF;

               --CAR_ZIP_CODE := CAR_ZIP_CODE || LPAD(NVL(ma_stat.LOC_ZIP_2, '0000'), 4, '0');    -- Changed 10/24/2017 per recent CAR errors.  --ASI/RCrawford

        IF NVL(ma_stat.LOC_ZIP_2, '0000') <> '0000' THEN
            CAR_ZIP_CODE := CAR_ZIP_CODE || LPAD(NVL(ma_stat.LOC_ZIP_2, '    '), 4, '0');
        ELSE
            CAR_ZIP_CODE := CAR_ZIP_CODE || '    ';
        END IF;


 -- CAR_FILLER_81                        VARCHAR2(1);    --81
        CAR_FILLER_81 := ' ';


 -- CAR_FILLER_89                        VARCHAR2(2);    --89:90
        CAR_FILLER_89 := ' ';


 -- CAR_LOSS_AMOUNT                      NUMBER(8);      --91:98
        CAR_LOSS_AMOUNT := ROUND(ma_stat.LOSS_AMOUNT);

        IF v_TRANS_CODE IN ('71', '72', '73', '81', '82', '83', '86', '87', '91', '92', '93') THEN
            CAR_LOSS_AMOUNT := CAR_LOSS_AMOUNT * -1;
        END IF;


 -- CAR_CLAIM_ID                         VARCHAR2(16);   --99:114
        CAR_CLAIM_ID := NVL(ma_stat.CLAIM_NUMBER, '') || NVL(ma_stat.CLAIMANT_NUMBER, '');


 -- CAR_POLICY_ID                        VARCHAR2(16);   --115:130
        CAR_POLICY_ID := RPAD(NVL(ma_stat.AGENT_NUM, ' '), 5, ' ') || RPAD(NVL(ma_stat.POLICY_NUMBER, ' '), 10, ' ');

        IF ma_stat.EFF_DATE >= TO_DATE('09012001', 'MMDDYYYY') THEN
            CAR_POLICY_ID := NVL(ma_stat.POLICY_NUMBER, ' ');
        END IF;


 -- CAR_VIN                              VARCHAR2(17);   --131:147
        CAR_VIN := NVL(ma_stat.AU_IDENT_NUM, ' ');

        CAR_VIN := RPAD(CAR_VIN, 17, ' ');


 -- CAR_COMPANY_USE                      VARCHAR2(3);    --148:150
        CAR_COMPANY_USE := NVL(ma_stat.ITEM_NUM, '   ');



---------------------------------------------------
--- Line-Specific Processing                    ---
---------------------------------------------------


--- Liability
 -- CAR_LIMITS_ID                        VARCHAR2(1);
        CAR_LIMITS_ID := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103') THEN
                    --CSL-COV
                    CAR_LIMITS_ID := '2';
                ELSE
                    CAR_LIMITS_ID := '3';
                END IF;
            END IF;

            IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('01012013', 'MMDDYYYY') THEN
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103') THEN
                        --CSL-COV
                        CAR_LIMITS_ID := '2';
                    ELSE
                        CAR_LIMITS_ID := '3';
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_LIAB_LIMITS                      VARCHAR2(2);
        CAR_LIAB_LIMITS := ' ';
        v_LIAB_LIMITS_SW := '0';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN

            --CBI-COV
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('109', '111') THEN
                IF ma_stat.EFF_DATE > TO_DATE('12311995', 'MMDDYYYY') THEN
                    CAR_LIAB_LIMITS := '01';
                    v_LIAB_LIMITS_SW := '1';
                ELSE
                    IF ma_stat.EFF_DATE > TO_DATE('12311992', 'MMDDYYYY') THEN
                        CAR_LIAB_LIMITS := '04';
                        v_LIAB_LIMITS_SW := '1';
                    ELSE
                        IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                            CAR_LIAB_LIMITS := '03';
                            v_LIAB_LIMITS_SW := '1';
                        ELSE
                            CAR_LIAB_LIMITS := '02';
                            v_LIAB_LIMITS_SW := '1';
                        END IF;
                    END IF;
                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --CSL-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103') THEN

                    v_INDEX := 1;
                    -- Search CSL LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > CSL_LIMIT_OCCUR) OR (v_LIMIT_AMT_PERSON <= CSL_LIMIT_1(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (CSL_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (CSL_LIMIT_OCCUR);
                    END IF;

                    CAR_LIAB_LIMITS := CSL_LIMIT_CODE(v_INDEX);
                    v_LIAB_LIMITS_SW := '1';

                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --OBI-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('100', '101', '102', '103', '104', '105', '106', '110', '112', '134') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_LIMIT_OCCUR) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX) AND ma_stat.LIMIT_AMT_OCCUR = MMV_LIMIT_2(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_LIAB_LIMITS := MMV_LIMIT_BI(v_INDEX);

                    IF CAR_LIAB_LIMITS = '15' THEN
                        IF (v_year_run < 2007) OR (v_year_run = 2007 AND v_month_run < 4) THEN
                            CAR_LIAB_LIMITS := '49';
                        END IF;
                    END IF;

                    v_LIAB_LIMITS_SW := '1';

                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --PD-COV, CR-COV, SU-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('120', '103', '113', '122', '121') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_LIMIT_OCCUR) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_LIAB_LIMITS := MMV_LIMIT_PD(v_INDEX);
                    v_LIAB_LIMITS_SW := '1';

                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --MED-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('130') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_LIMIT_OCCUR) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_LIAB_LIMITS := MMV_LIMIT_MP(v_INDEX);
                    v_LIAB_LIMITS_SW := '1';

                END IF;
            END IF;


            IF v_LIAB_LIMITS_SW <> '1' THEN
                --U1-COV, U2-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('145', '151') THEN

                    v_INDEX := 1;
                    -- Search MMV LIMIT TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_LIMIT_OCCUR) OR (v_LIMIT_AMT_PERSON = MMV_LIMIT_1(v_INDEX) AND ma_stat.LIMIT_AMT_OCCUR = MMV_LIMIT_2(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    -- If limit not found, use last entry on table
                    IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                        v_INDEX := (MMV_LIMIT_OCCUR);
                    END IF;

                    CAR_LIAB_LIMITS := MMV_LIMIT_UM(v_INDEX);

                    IF CAR_LIAB_LIMITS = '15' THEN
                        IF (v_year_run < 2007) OR (v_year_run = 2007 AND v_month_run < 4) THEN
                            CAR_LIAB_LIMITS := '49';
                        END IF;
                    END IF;

                    v_LIAB_LIMITS_SW := '1';

                END IF;
            END IF;

        END IF;



 -- CAR_POLLUTION_LIAB                   VARCHAR2(1);
        CAR_POLLUTION_LIAB := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_POLLUTION_LIAB := '0';
        END IF;



 -- CAR_AGGR_LIMITS_ID                   VARCHAR2(1);
        CAR_AGGR_LIMITS_ID := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') = '38' THEN
                IF SUBSTR(CAR_CLASS_CODE, 1, 4) = '0705' THEN
                    IF v_HOLD_CSL_LIMIT = 2000000 THEN
                        CAR_AGGR_LIMITS_ID := '1';
                    ELSE
                        IF v_HOLD_CSL_LIMIT = 1000000 THEN
                            CAR_AGGR_LIMITS_ID := '2';
                        ELSE
                            CAR_AGGR_LIMITS_ID := '9';
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_REPORTING_DATE                   VARCHAR2(3);
        CAR_REPORTING_DATE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
            CAR_REPORTING_DATE := CAR_Date_Conv(ma_stat.REPORTED_DATE, 'MYY');
        END IF;



--- No-Fault
 -- CAR_PIP_COVERAGE                     VARCHAR2(1);
        CAR_PIP_COVERAGE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
            CAR_PIP_COVERAGE := '1';
        END IF;



 -- CAR_PIP_DEDUCTIBLE                   VARCHAR2(2);
        CAR_PIP_DEDUCTIBLE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN

            v_INDEX := 1;
            -- Search MMV DEDUCTIBLE TABLE
            LOOP
                EXIT WHEN (v_INDEX = (MMV_DED_OCCUR + 1)) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                v_INDEX := v_INDEX + 1;
            END LOOP;

            -- If limit not found, use last entry on table
            IF v_INDEX = (MMV_LIMIT_OCCUR + 1) THEN
                v_INDEX := (MMV_LIMIT_OCCUR);
            END IF;

            -- Check DED_TYPE to determine which code to use.
            IF NVL(ma_stat.DED_TYPE, ' ') IN ('1', ' ') THEN
                CAR_PIP_DEDUCTIBLE := MMV_DED_PIPI(v_INDEX);
            ELSE
                CAR_PIP_DEDUCTIBLE := MMV_DED_PIPIH(v_INDEX);
            END IF;

        END IF;



 -- CAR_TYPE_CLAIMANT                    VARCHAR2(1);
        CAR_TYPE_CLAIMANT := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
            CAR_TYPE_CLAIMANT := '1';

            CASE NVL(ma_stat.NAME_TYPE, '  ')
                WHEN 'NI' THEN CAR_TYPE_CLAIMANT := '1';
                WHEN 'MH' THEN CAR_TYPE_CLAIMANT := '2';
                WHEN 'OO' THEN CAR_TYPE_CLAIMANT := '3';
                WHEN 'PE' THEN CAR_TYPE_CLAIMANT := '4';
                ELSE           CAR_TYPE_CLAIMANT := CAR_TYPE_CLAIMANT;
            END CASE;
        END IF;



--- Physical Damage

 -- CAR_PHY_COVERAGE_CODE                VARCHAR2(3);
        CAR_PHY_COVERAGE_CODE := '   ';
        v_PHY_COV_SW := '0';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN

            --COL-COV
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('200', '201', '299')) THEN
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '200' THEN

                    v_INDEX := 1;

                    --Search MMV DEDUCTIBLE TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_DED_OCCUR) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    IF v_INDEX = (MMV_DED_OCCUR  + 1) THEN
                        v_INDEX := MMV_DED_OCCUR;
                    END IF;

                    IF v_INDEX < 5 THEN
                        IF ma_stat.EFF_DATE >= TO_DATE('01011989', 'MMDDYYYY') THEN
                            v_INDEX := 5;
                        END IF;
                    END IF;

                    --Check DED_TYPE to determine which code to use
                    IF NVL(ma_stat.DED_TYPE, ' ') <> ' ' THEN
                        CAR_PHY_COVERAGE_CODE := MMV_DED_CLWW(v_INDEX);
                    ELSE
                        CAR_PHY_COVERAGE_CODE := MMV_DED_CLWOW(v_INDEX);
                    END IF;

                    IF CAR_PHY_COVERAGE_CODE = '   ' THEN
                        CAR_PHY_COVERAGE_CODE := '015';
                    END IF;

                    v_PHY_COV_SW := '1';

                ELSE

                    IF NVL(ma_stat.COVERAGE_CODE, '   ') = '201' THEN
                        CAR_PHY_COVERAGE_CODE := '092';
                        v_PHY_COV_SW := '1';
                    ELSE
                        IF NVL(ma_stat.CSP_COV, '   ') <> '   ' THEN
                            CAR_PHY_COVERAGE_CODE := ma_stat.CSP_COV;
                            v_PHY_COV_SW := '1';
                        ELSE
                            CAR_PHY_COVERAGE_CODE := '099';
                            v_PHY_COV_SW := '1';
                        END IF;
                    END IF;
                END IF;
            END IF;



            IF v_PHY_COV_SW <> '1' THEN
                --LTD-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') = '205' THEN

                    v_INDEX := 1;

                    --Search MMV DEDUCTIBLE TABLE
                    LOOP
                        EXIT WHEN (v_INDEX > MMV_DED_OCCUR) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                        v_INDEX := v_INDEX + 1;
                    END LOOP;

                    IF v_INDEX = (MMV_DED_OCCUR  + 1) THEN
                        v_INDEX := MMV_DED_OCCUR;
                    END IF;

                    CAR_PHY_COVERAGE_CODE := MMV_DED_LT(v_INDEX);
                    v_PHY_COV_SW := '1';
                END IF;
            END IF;



            IF v_PHY_COV_SW <> '1' THEN
                --OTC-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '959', '987') THEN
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') = '210' THEN

                        v_INDEX := 1;

                        --Search MMV DEDUCTIBLE TABLE
                        LOOP
                            EXIT WHEN (v_INDEX > MMV_DED_OCCUR) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                            v_INDEX := v_INDEX + 1;
                        END LOOP;

                        IF v_INDEX = (MMV_DED_OCCUR  + 1) THEN
                            v_INDEX := MMV_DED_OCCUR;
                        END IF;

                        IF v_INDEX < 5 THEN
                            IF ma_stat.EFF_DATE >= TO_DATE('01011989', 'MMDDYYYY') THEN
                                v_INDEX := 5;
                            END IF;
                        END IF;


                        -- Determine which code to use based off Towing coverage indicator.
                        IF NVL(ma_stat.REF_TOW_IND, ' ') = '050' THEN
                            CAR_PHY_COVERAGE_CODE := MMV_DED_CP50(v_INDEX);
                        ELSE
                            IF NVL(ma_stat.REF_TOW_IND, ' ') = '100' THEN
                                CAR_PHY_COVERAGE_CODE := MMV_DED_CP100(v_INDEX);
                            ELSE
                                CAR_PHY_COVERAGE_CODE := MMV_DED_CP(v_INDEX);
                            END IF;
                        END IF;


/*  -- Removed per changes from ticket 50337.
                        --RIG THE COVERAGE CODE IF TOWING COV PRESENT ON THE POLICY
                        --AS OF 2002, NO MORE $25 TOWING FOR PP. MINIMUM IS $50
                        v_MMV_OTC_IND := NVL(ma_stat.AU_MMV_OTC_IND, ' ');

                        IF v_MMV_OTC_IND = '1' THEN
                            IF SUBSTR(CAR_POL_EFF_DATE, 2, 2) > '01' THEN
                                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                                    v_MMV_OTC_IND := '2';
                                END IF;
                            END IF;
                        END IF;


                        --BUMP DOWN THE THIRD POSITION OF OTC CODE TO REFLECT TOWING
                        IF v_MMV_OTC_IND <> ' ' THEN
                            CASE CAR_PHY_COVERAGE_CODE
                                WHEN '035' THEN CAR_PHY_COVERAGE_CODE := '034';
                                WHEN '037' THEN CAR_PHY_COVERAGE_CODE := '036';
                                WHEN '039' THEN CAR_PHY_COVERAGE_CODE := '038';
                                WHEN '023' THEN CAR_PHY_COVERAGE_CODE := '022';
                                WHEN '004' THEN CAR_PHY_COVERAGE_CODE := '064';
                                ELSE            CAR_PHY_COVERAGE_CODE := CAR_PHY_COVERAGE_CODE;
                            END CASE;
                        END IF;


                        --THE $50 TOWING CODES ARE NOT VALID (YET) FOR COMMERCIAL
                        IF v_MMV_OTC_IND > '1' THEN
                            CAR_PHY_COVERAGE_CODE := v_MMV_OTC_IND || SUBSTR(CAR_PHY_COVERAGE_CODE, 2, 2);
                        END IF;


                        --RIG THE COVERAGE CODE IF $100 GLASS DEDUCTIBLE IS PRESENT
                        IF NVL(ma_stat.DED_TYPE, ' ') NOT IN ('0', ' ') THEN
                            CAR_PHY_COVERAGE_CODE := TO_CHAR(1 + TO_NUMBER(SUBSTR(CAR_PHY_COVERAGE_CODE, 1, 1))) || SUBSTR(CAR_PHY_COVERAGE_CODE, 2, 2);
                        END IF;
*/
                    ELSE

                        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '211' THEN
                            CAR_PHY_COVERAGE_CODE := '060';
                        ELSE
                            IF NVL(ma_stat.CSP_COV, '   ') <> '   ' THEN
                                CAR_PHY_COVERAGE_CODE := ma_stat.CSP_COV;
                            ELSE
                                CAR_PHY_COVERAGE_CODE := '089';
                            END IF;
                        END IF;

                    END IF;


                    -- DED_TYPE = 1 indicates $100 comp glass deductible, add 1 to first digit of OTC code.
                    IF NVL(ma_stat.DED_TYPE, ' ') = '1' THEN
                        --CAR_PHY_COVERAGE_CODE := '1' || SUBSTR(CAR_PHY_COVERAGE_CODE, 2, 2);  --change from ticket 50337.
                        CAR_PHY_COVERAGE_CODE := TO_CHAR(TO_NUMBER(SUBSTR(CAR_PHY_COVERAGE_CODE, 1, 1)) + 1)
                                                 || SUBSTR(CAR_PHY_COVERAGE_CODE, 2, 2);
                    END IF;

                    v_PHY_COV_SW := '1';

                END IF;

            END IF;



            IF v_PHY_COV_SW <> '1' THEN
                --TOW-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('220') THEN
                    IF v_LIMIT_AMT_PERSON = 50 THEN
                        CAR_PHY_COVERAGE_CODE := '082';
                    ELSE
                        IF v_LIMIT_AMT_PERSON = 100 THEN
                            CAR_PHY_COVERAGE_CODE := '080';
                        ELSE
                            CAR_PHY_COVERAGE_CODE := '081';
                        END IF;
                    END IF;

                    IF CAR_PHY_COVERAGE_CODE = '081' THEN
                        IF SUBSTR(CAR_POL_EFF_DATE, 2, 2) = '01' THEN
                            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                                CAR_PHY_COVERAGE_CODE := '082';
                            END IF;
                        END IF;
                    END IF;


/*  -- Removed per changes from ticket 50337.
                    --Towing must reflect the combined tow/comp ded on the policy
                    IF (ma_stat.DED_AMT > 0) AND (ma_stat.DED_AMT < 10000) THEN

                        v_INDEX := 1;

                        --Search MMV DEDUCTIBLE TABLE
                        LOOP
                            EXIT WHEN (v_INDEX > MMV_DED_OCCUR) OR (ma_stat.DED_AMT = MMV_DEDUCTIBLE(v_INDEX));
                            v_INDEX := v_INDEX + 1;
                        END LOOP;

                        IF v_INDEX = (MMV_DED_OCCUR  + 1) THEN
                            v_INDEX := MMV_DED_OCCUR;
                        END IF;

                        IF v_INDEX < 5 THEN
                            IF ma_stat.EFF_DATE >= TO_DATE('01011989', 'MMDDYYYY') THEN
                                v_INDEX := 5;
                            END IF;
                        END IF;


                        --RIG THE COVERAGE CODE IF TOWING COV PRESENT ON THE POLICY
                        --AS OF 2002, NO MORE $25 TOWING FOR PP. MINIMUM IS $50
                        v_MMV_OTC_IND := NVL(ma_stat.AU_MMV_OTC_IND, ' ');

                        IF v_MMV_OTC_IND = '1' THEN
                            IF SUBSTR(CAR_POL_EFF_DATE, 2, 2) > '01' THEN
                                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                                    v_MMV_OTC_IND := '2';
                                END IF;
                            END IF;
                        END IF;


                        v_TEMP_TOW_COV := MMV_DED_CPTW(v_INDEX);

                        IF CAR_PHY_COVERAGE_CODE = '080' THEN
                            v_TEMP_TOW_COV := '4' || SUBSTR(v_TEMP_TOW_COV, 2, 2);
                        END IF;

                        IF (NVL(ma_stat.DED_TYPE, ' ') = '1') OR (NVL(ma_stat.AU_COV_210_SW, ' ') = '1') THEN
                            v_TEMP_TOW_COV := TO_CHAR(1 + TO_NUMBER(SUBSTR(v_TEMP_TOW_COV, 1, 1))) || SUBSTR(v_TEMP_TOW_COV, 2, 2);
                        END IF;


                        CAR_PHY_COVERAGE_CODE := v_TEMP_TOW_COV;
                    END IF;
*/
                END IF;
            END IF;



            IF v_PHY_COV_SW <> '1' THEN
                --SST-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('230') THEN
/*  -- Replaced per changes from ticket 50337.
                    IF v_LIMIT_AMT_PERSON IN (0, 15, 450) THEN
                        CAR_PHY_COVERAGE_CODE := '083';
                    ELSE
                        IF v_LIMIT_AMT_PERSON IN (30, 900) THEN
                            CAR_PHY_COVERAGE_CODE := '085';
                        ELSE
                            IF v_LIMIT_AMT_PERSON IN (45, 1350) THEN
                                CAR_PHY_COVERAGE_CODE := '084';
                            ELSE
                                IF v_LIMIT_AMT_PERSON IN (100, 3000) THEN
                                    CAR_PHY_COVERAGE_CODE := '086';
                                ELSE
                                    CAR_PHY_COVERAGE_CODE := '089';
                                END IF;
                            END IF;
                        END IF;
                    END IF;
*/

                    IF ma_stat.REF_SST_LIMIT = 0 OR ma_stat.REF_SST_LIMIT = 15 THEN
                        CAR_PHY_COVERAGE_CODE := '083';
                    ELSE
                        IF ma_stat.REF_SST_LIMIT = 30 THEN
                            CAR_PHY_COVERAGE_CODE := '085';
                        ELSE
                            IF ma_stat.REF_SST_LIMIT = 45 THEN
                                CAR_PHY_COVERAGE_CODE := '084';
                            ELSE
                                IF ma_stat.REF_SST_LIMIT = 100 THEN
                                    CAR_PHY_COVERAGE_CODE := '086';
                                ELSE
                                    CAR_PHY_COVERAGE_CODE := '089';
                                END IF;
                            END IF;
                        END IF;
                    END IF;


                    -- This check is still required, reported coverage code must be '083' for commercial lines.
                    IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
                        IF CAR_PHY_COVERAGE_CODE <> '083' THEN
                            CAR_PHY_COVERAGE_CODE := '083';
                        END IF;
                    END IF;

                    v_PHY_COV_SW := '1';

                END IF;
            END IF;



            IF v_PHY_COV_SW <> '1' THEN
                --CB-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('250') THEN
                    CAR_PHY_COVERAGE_CODE := '089';
                    v_PHY_COV_SW := '1';
                END IF;
            END IF;

        END IF;



 -- CAR_SYMBOL                           VARCHAR2(2);
        CAR_SYMBOL := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN

            CAR_SYMBOL := NVL(ma_stat.AU_SYMBOL, '  ');

            IF CAR_SYMBOL = '  ' THEN
                CAR_SYMBOL := '01';
            END IF;


            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15') THEN
                IF (CAR_SYMBOL IN ('09', '00')) OR (NVL(ma_stat.AU_ISO_POLK, ' ') = 'P') THEN
                    IF v_LIST_MARKET > 0 THEN

                        v_INDEX := 1;

                        --Search 1990 COMMERCIAL COSTS SYMBOLS TABLE
                        LOOP
                            EXIT WHEN (v_INDEX > COMCL_1990_OCCUR) OR (v_LIST_MARKET < HI_COST_COMCL_1990(v_INDEX));
                            v_INDEX := v_INDEX + 1;
                        END LOOP;

                        IF v_INDEX = (COMCL_1990_OCCUR  + 1) THEN
                            v_INDEX := COMCL_1990_OCCUR;
                        END IF;

                        CAR_SYMBOL := SYMBOL_COMCL_1990(v_INDEX);

                    END IF;
                END IF;
            END IF;


            --AS OF 1/1/2011 - SYMBOL CODE IS NO LONGER REQUIRED FOR PRIVATE PASSENGER
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('01012011', 'MMDDYYYY') THEN
                    CAR_SYMBOL := ' ';
                END IF;
            END IF;

        END IF;



 -- CAR_INT_APPRAISAL_ID                 VARCHAR2(1);
        CAR_INT_APPRAISAL_ID := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            CAR_INT_APPRAISAL_ID := NVL(ma_stat.AU_INT_APP_ID_CODE, ' ');

            IF CAR_INT_APPRAISAL_ID NOT IN ('3', '4', '9') THEN
                CAR_INT_APPRAISAL_ID := '9';
            END IF;
        END IF;



 -- CAR_ANTITHEFT                        VARCHAR2(1);
        CAR_ANTITHEFT := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            --OTC-COV
            IF (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '959', '987')) THEN
                CAR_ANTITHEFT := NVL(ma_stat.AU_BURG_DEVICE, ' ');

                IF CAR_ANTITHEFT = ' ' THEN
                    CAR_ANTITHEFT := '0';
                END IF;
            END IF;
        END IF;



 -- CAR_ORIGINAL_COST                    VARCHAR2(3);
        CAR_ORIGINAL_COST := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07') THEN
                IF ma_stat.EFF_DATE >= TO_DATE('07012011', 'MMDDYYYY') THEN
                    IF v_LIST_MARKET > 90000 THEN
                        IF v_LIST_MARKET > 999000 THEN
                            CAR_ORIGINAL_COST := '999';
                        ELSE
                            CAR_ORIGINAL_COST := ROUND(v_LIST_MARKET / 1000);
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_OEM_COVERAGE                     VARCHAR2(1);
        CAR_OEM_COVERAGE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            CAR_OEM_COVERAGE := '0';
        END IF;



 -- CAR_VALUE_CODE                       VARCHAR2(3);
        CAR_VALUE_CODE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            IF (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0408' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0431')
             OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0508' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0531')
             OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0608' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0631') THEN

                IF ma_stat.EFF_DATE >= TO_DATE('01012005', 'MMDDYYYY') THEN
                    IF v_LIST_MARKET > 99900 THEN
                        CAR_VALUE_CODE := '999';
                    ELSE
                        --CAR_VALUE_CODE := ROUND(v_LIST_MARKET / 100);    -- NPS uses rounded value, CAR requires the value be rounded upward.
                        CAR_VALUE_CODE := TRUNC( (v_LIST_MARKET + 99) / 100 );
                    END IF;
                END IF;

                IF ma_stat.EFF_DATE < TO_DATE('01012005', 'MMDDYYYY') THEN
                    IF v_LIST_MARKET > 10000 THEN
                        CAR_VALUE_CODE := '999';
                    ELSE
                        --CAR_VALUE_CODE := ROUND(v_LIST_MARKET / 100);    -- NPS uses rounded value, CAR requires the value be rounded upward.
                        CAR_VALUE_CODE := TRUNC( (v_LIST_MARKET + 99) / 100 );
                    END IF;
                END IF;

                CAR_VALUE_CODE := LPAD(CAR_VALUE_CODE, 3, '0');

            END IF;
        END IF;






 -- CAR_HIGH_THEFT                       VARCHAR2(1);
        CAR_HIGH_THEFT := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN

            IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                    -- NOT COL-COV
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') NOT IN ('200', '201', '299') THEN
                        --OTC-COV
                        IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '959', '987') THEN
                            CAR_HIGH_THEFT := NVL(ma_stat.AU_RISK_VEH, ' ');

                            IF CAR_HIGH_THEFT = ' ' THEN
                                CAR_HIGH_THEFT := '0';
                            END IF;

                            IF (TO_NUMBER(NVL(ma_stat.AU_VEH_AGE, '9')) > 5) OR (NVL(ma_stat.AU_VEH_AGE, ' ') = ' ') THEN
                                CAR_HIGH_THEFT := '0';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_OTC_EXTRA_RISK                   VARCHAR2(1);
        CAR_OTC_EXTRA_RISK := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                    -- NOT COL-COV
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') NOT IN ('200', '201', '299') THEN
                        --OTC-COV
                        IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '959', '987') THEN
                            CAR_OTC_EXTRA_RISK := NVL(ma_stat.AU_EXTRA_RISK_COMP, ' ');

                            IF CAR_OTC_EXTRA_RISK = ' ' THEN
                                CAR_OTC_EXTRA_RISK := '0';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;




 -- CAR_COLL_EXTRA_RISK                  VARCHAR2(1);
        CAR_COLL_EXTRA_RISK := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            IF ma_stat.EFF_DATE > TO_DATE('12311990', 'MMDDYYYY') THEN
                IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                    --COL-COV
                    IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('200', '201', '299') THEN
                        CAR_COLL_EXTRA_RISK := NVL(ma_stat.AU_EXTRA_RISK_COLL, ' ');

                        IF CAR_COLL_EXTRA_RISK = ' ' THEN
                            CAR_COLL_EXTRA_RISK := '0';
                        END IF;
                    END IF;
                END IF;
            END IF;

            --LTD-COV
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('205') THEN
                CAR_COLL_EXTRA_RISK := ' ';
            END IF;
        END IF;



 -- CAR_CATASTROPHE_CODE                 VARCHAR2(2);
        CAR_CATASTROPHE_CODE := ' ';

        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            CAR_CATASTROPHE_CODE := SUBSTR(LPAD(NVL(ma_stat.CATASTROPHE_NUMBER, '  '), 3, ' '), -2, 2);
        END IF;




--- Other than No-Fault
 -- CAR_PARTIAL_TOTAL_LOSS_IND           VARCHAR2(1);
        CAR_PARTIAL_TOTAL_LOSS_IND := ' ';

        ---Liability Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '100' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '154') THEN
            --PD-COV, CR-COV, SU-COV
            IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('120', '113', '122', '121') THEN
                --CAR_PARTIAL_TOTAL_LOSS_IND := NVL(ma_stat.AU_TOT_PART_IND, ' ');
                CAR_PARTIAL_TOTAL_LOSS_IND := f_TOT_PART_IND;

                IF CAR_PARTIAL_TOTAL_LOSS_IND NOT IN ('1', '2') THEN
                    CAR_PARTIAL_TOTAL_LOSS_IND := '1';
                END IF;
            END IF;
        END IF;

        ---Physical Coverage
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987')) THEN
            --If not Towing & Labor
            IF NVL(ma_stat.COVERAGE_CODE, ' ') <> '220' THEN
                --CAR_PARTIAL_TOTAL_LOSS_IND := NVL(ma_stat.AU_TOT_PART_IND, ' ');
                CAR_PARTIAL_TOTAL_LOSS_IND := f_TOT_PART_IND;

                IF CAR_PARTIAL_TOTAL_LOSS_IND NOT IN ('1', '2') THEN
                    CAR_PARTIAL_TOTAL_LOSS_IND := '1';
                END IF;
            END IF;
        END IF;



--- Other than Physical Damage
 -- CAR_PASSIVE_RESTRAINT                VARCHAR2(1);
        CAR_PASSIVE_RESTRAINT := ' ';

        -- Use value determined from ZDK01 in extract program.
        CAR_PASSIVE_RESTRAINT := NVL(ma_stat.REF_PAS_RES_DIS, ' ');




--- Commercial
 -- CAR_ACCIDENT_TOWN                    VARCHAR2(3);
        CAR_ACCIDENT_TOWN := ' ';


        CAR_ACCIDENT_TOWN := LPAD(v_ACCIDENT_TOWN, 3, '0');


        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
            IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                CAR_ACCIDENT_TOWN := ' ';
            END IF;
        END IF;



 -- CAR_ZONE_RATING                      VARCHAR2(3);
        CAR_ZONE_RATING := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_ZONE_RATING := '000';
        END IF;

       --CV 6/12/19 IF NVL(ma_stat.AU_COMM_ZONE, '   ') <> '   ' THEN
        IF NVL(ltrim(ma_stat.au_comm_zone,chr(ascii(ma_stat.au_comm_zone))), '   ') <> '   ' THEN
            CAR_ZONE_RATING := ma_stat.AU_COMM_ZONE;
        END IF;



 -- CAR_AGE_CODE                         VARCHAR2(1);
        CAR_AGE_CODE := ' ';

        IF ma_stat.EFF_DATE >= TO_DATE('01011996', 'MMDDYYYY') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('01', '05', '06') THEN
                CAR_AGE_CODE := NVL(ma_stat.AU_VEH_AGE, '9');
            END IF;
        END IF;

        -- Check for valid numeric value in f_MODEL_YEAR.
        IF INSTR(f_MODEL_YEAR, ' ') = 0 AND TRANSLATE(f_MODEL_YEAR, '1234567890', ' ') = '    ' THEN
            IF TO_NUMBER(f_MODEL_YEAR) <= 1980 THEN
                CAR_AGE_CODE := '0';
            END IF;
        ELSE
            -- This previous logic will break in 2021, only use if model year data from history table is not valid/numeric.
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
                IF ( NVL(ma_stat.AU_VEH_YEAR, '  ') > '20' AND NVL(ma_stat.AU_VEH_YEAR, '  ') < '81' ) THEN
                    CAR_AGE_CODE := '0';
                END IF;
            END IF;
        END IF;



 -- CAR_RATING_ID                        VARCHAR2(1);
        CAR_RATING_ID := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
            CAR_RATING_ID := '9';
        END IF;

        IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '38') THEN
            IF NVL(ma_stat.EXPERIENCE_RATED, ' ') = 'Y' THEN
                CAR_RATING_ID := '1';
            END IF;
        END IF;



--- Private Passenger

 -- CAR_MODEL_YEAR_CENTURY               VARCHAR2(1);
        CAR_MODEL_YEAR_CENTURY := ' ';

        -- This code will break in 2026, fix w/ century digits available in Oracle
        IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
            IF (NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06')) AND (ma_stat.EFF_DATE > TO_DATE('12311998', 'MMDDYYYY')) THEN
                -- Use value from history table if available.
                IF f_CENTURY <> ' ' AND f_ERROR_CODE = '   ' THEN
                    CAR_MODEL_YEAR_CENTURY := f_CENTURY;
                ELSE
                    IF NVL(ma_stat.AU_VEH_YEAR, '  ') <> '  ' THEN
                        IF ma_stat.AU_VEH_YEAR > '25' AND ma_stat.AU_VEH_YEAR < '9A' THEN
                            CAR_MODEL_YEAR_CENTURY := '1';
                        ELSE
                            IF NVL(ma_stat.AU_VEH_TYPE, '  ') = 'AN' THEN
                                CAR_MODEL_YEAR_CENTURY := '1';
                            ELSE
                                CAR_MODEL_YEAR_CENTURY := '2';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



 -- CAR_ANNUAL_MILEAGE                   VARCHAR2(3);
        CAR_ANNUAL_MILEAGE := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN

            IF ma_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') THEN
                IF ma_stat.AU_ANNUAL_MILES IN (0, 99999, 20202) THEN
                    CAR_ANNUAL_MILEAGE := '999';
                ELSE
                    CAR_ANNUAL_MILEAGE := ROUND(ma_stat.AU_ANNUAL_MILES / 100);
                END IF;

                CAR_ANNUAL_MILEAGE := LPAD(CAR_ANNUAL_MILEAGE, 3, '0');

                --Check if CAR_ANNUAL_MILEAGE is not numeric.
                IF TRANSLATE(TRANSLATE(CAR_ANNUAL_MILEAGE, '~', ' '), '0123456789', '~~~~~~~~~~') <> '~~~' THEN
                    CAR_ANNUAL_MILEAGE := '999';
                END IF;

            ELSE
                CAR_ANNUAL_MILEAGE := '999';

                IF ma_stat.AU_ANNUAL_MILES IN (0, 99999, 20202) THEN
                    CAR_ANNUAL_MILEAGE := '999';
                ELSE
                    CAR_ANNUAL_MILEAGE := ROUND(ma_stat.AU_ANNUAL_MILES / 100);
                END IF;

                CAR_ANNUAL_MILEAGE := LPAD(CAR_ANNUAL_MILEAGE, 3, '0');

                --Check if CAR_ANNUAL_MILEAGE is not numeric.
                IF TRANSLATE(TRANSLATE(CAR_ANNUAL_MILEAGE, '~', ' '), '0123456789', '~~~~~~~~~~') <> '~~~' THEN
                    CAR_ANNUAL_MILEAGE := '999';
                END IF;
            END IF;
        END IF;



 -- CAR_MODEL_YEAR                       VARCHAR2(2);
        CAR_MODEL_YEAR := ' ';

        IF ma_stat.EFF_DATE >= TO_DATE('01011996', 'MMDDYYYY') THEN
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                CAR_MODEL_YEAR := LPAD(NVL(ma_stat.AU_VEH_YEAR, ' '), 2, ' ');

                IF CAR_MODEL_YEAR = '  ' THEN
                    IF SUBSTR(CAR_POL_EFF_DATE, 1, 1) IN ('0', '-', '&') THEN
                        CAR_MODEL_YEAR := TO_NUMBER(SUBSTR(CAR_POL_EFF_DATE, 2, 2)) - TO_NUMBER(NVL(ma_stat.AU_VEH_AGE, '9')) + 2;
                    ELSE
                        CAR_MODEL_YEAR := TO_NUMBER(SUBSTR(CAR_POL_EFF_DATE, 2, 2)) - TO_NUMBER(NVL(ma_stat.AU_VEH_AGE, '9')) + 1;
                    END IF;
                END IF;
            END IF;

            CAR_MODEL_YEAR := LPAD(CAR_MODEL_YEAR, 2, '0');
        END IF;



 -- CAR_DISCOUNT_CODE                    VARCHAR2(1);
        CAR_DISCOUNT_CODE := ' ';

        IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN

            IF ma_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') THEN
            -- NEW DISCOUNTS

                CAR_DISCOUNT_CODE := '0';

                IF NVL(ma_stat.AU_MULTI_IND, ' ') = 'Y' THEN
                    IF (ma_stat.AU_ANNUAL_MILES > 0) AND (ma_stat.AU_ANNUAL_MILES <= 10000) AND (ma_stat.AU_ANNUAL_MILES NOT IN (0, 99999, 20202)) THEN
                        CAR_DISCOUNT_CODE := '4';
                    ELSE
                        CAR_DISCOUNT_CODE := '1';
                    END IF;
                ELSE
                    IF (ma_stat.AU_ANNUAL_MILES > 0) AND (ma_stat.AU_ANNUAL_MILES <= 10000) AND (ma_stat.AU_ANNUAL_MILES NOT IN (0, 99999, 20202)) THEN
                        CAR_DISCOUNT_CODE := '2';
                    END IF;
                END IF;

            ELSE
            -- OLD DISCOUNTS

                CAR_DISCOUNT_CODE := '9';

                IF ma_stat.TOT_ITEMS = 2 THEN
                    IF (NVL(ma_stat.AU_MULTI_IND, ' ') <> 'Y') OR (NVL(ma_stat.AU_MULTI_IND, ' ') = 'Y' AND SUBSTR(CAR_CLASS_CODE, 4, 1) NOT IN ('1', '2', '5')) THEN
                        IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('1101', '1201', '1401', '1221', '1241', '1421', '1261', '1152', '1305', '1162') THEN
                            CAR_DISCOUNT_CODE := '5';
                        END IF;
                    END IF;
                END IF;

                IF CAR_ANNUAL_MILEAGE < '076' THEN
                    CAR_DISCOUNT_CODE := '3';

                    IF ma_stat.TOT_ITEMS = 2 THEN
                        IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('1101', '1201', '1401', '1221', '1241', '1421', '1261', '1152', '1305', '1162') THEN
                            CAR_DISCOUNT_CODE := '2';
                        END IF;
                    END IF;
                END IF;


                IF ma_stat.TOT_ITEMS = 2 THEN
                    IF (NVL(ma_stat.AU_MULTI_IND, ' ') = 'Y') AND (SUBSTR(CAR_CLASS_CODE, 4, 1) IN ('1', '2', '5')) THEN
                        IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('1101', '1201', '1401', '1221', '1241', '1421', '1261', '1152', '1162') THEN
                            CAR_DISCOUNT_CODE := '1';
                        END IF;
                    END IF;
                END IF;


                IF CAR_ANNUAL_MILEAGE < '076' THEN
                    IF ma_stat.TOT_ITEMS = 2 THEN
                        IF (NVL(ma_stat.AU_MULTI_IND, ' ') = 'Y') AND (SUBSTR(CAR_CLASS_CODE, 4, 1) IN ('1', '2', '5')) THEN
                            IF SUBSTR(CAR_CLASS_CODE, 1, 4) IN ('1101', '1201', '1401', '1221', '1241', '1421', '1261', '1152', '1162') THEN
                                CAR_DISCOUNT_CODE := '4';
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;


            IF (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0408' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0431') OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0508' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0531') OR (SUBSTR(CAR_CLASS_CODE, 1, 4) >= '0608' AND SUBSTR(CAR_CLASS_CODE, 1, 4) <= '0631') THEN
                IF NVL(ma_stat.AU_MULTI_IND, ' ') = 'M' THEN
                    CAR_DISCOUNT_CODE := '6';
                ELSE
                    CAR_DISCOUNT_CODE := '0';
                END IF;
            END IF;


            IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                    CASE CAR_DISCOUNT_CODE
                        WHEN '0' THEN CAR_DISCOUNT_CODE := 'A';
                        WHEN '1' THEN CAR_DISCOUNT_CODE := 'B';
                        WHEN '2' THEN CAR_DISCOUNT_CODE := 'C';
                        WHEN '4' THEN CAR_DISCOUNT_CODE := 'D';
                        WHEN '6' THEN CAR_DISCOUNT_CODE := 'E';
                        ELSE          CAR_DISCOUNT_CODE := CAR_DISCOUNT_CODE;
                    END CASE;
                END IF;
            END IF;


            IF ma_stat.EFF_DATE >= TO_DATE('07012006', 'MMDDYYYY') THEN
                IF CAR_DISCOUNT_CODE IN ('9', '5') THEN
                    CAR_DISCOUNT_CODE := '0';
                ELSE
                    IF CAR_DISCOUNT_CODE = '3' THEN
                        CAR_DISCOUNT_CODE := '2';
                    END IF;
                END IF;
            END IF;

        END IF;

BEGIN
         SELECT DISTINCT HI.CONTINUOUS_COVERAGE,HI.LOW_FREQUENCY,HN.CONTINUOUS_COVERAGE,HN.LOW_FREQUENCY
         INTO V_ITEM_CONT_COV_DISC,V_ITEM_LOW_FREQ_DISC,V_NAME_CONT_COV_DISC,V_NAME_LOW_FREQ_DISC
         FROM STAGING.HISTORY_WANG_POLICY HP,
              STAGING.HISTORY_WANG_ITEM HI,
              STAGING.HISTORY_WANG_NAME HN
       WHERE HP.POL_NUM=HI.POL_NUM
       AND HP.RUN_DATE=HI.RUN_DATE
       AND HI.POL_NUM = HN.POL_NUM
       AND HI.RUN_DATE = HN.RUN_DATE
       AND HI.DR_ASSIGN=HN.NAME_SEQ
       AND HN.NAME_TYPE='DR'
       AND HP.POL_NUM=ma_stat.policy_number
       --AND HP.RUN_DATE=ma_stat.actg_date
       AND HI.ITEM_SEQ=ltrim(ma_stat.item_num,'0')
       AND HP.RUN_DATE=(SELECT MAX(RUN_DATE)
                          FROM STAGING.HISTORY_WANG_POLICY HP1
                          WHERE HP1.POL_NUM=MA_STAT.POLICY_NUMBER
                            AND HP1.RUN_DATE<=MA_STAT.LOSS_DATE); 
        EXCEPTION
        WHEN OTHERS THEN 
        V_ITEM_CONT_COV_DISC:=NULL;
        V_ITEM_LOW_FREQ_DISC:=NULL;
        V_NAME_CONT_COV_DISC:=NULL;
        V_NAME_LOW_FREQ_DISC:=NULL;
        END; 




 -- CAR_CONT_COV_DISC                    VARCHAR2(1);
        CAR_CONT_COV_DISC := ' ';

       /*CV 3/14/19  IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN

            IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                    IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987'))) THEN
                        IF ma_stat.AU_CONTCOV_LOWFREQ IN ('1', '3') THEN
                            CAR_CONT_COV_DISC := '1';
                        END IF;
                    END IF;
                END IF;
            END IF;

        END IF;*/



 -- CAR_LOW_FREQ_DISC                    VARCHAR2(1);
        CAR_LOW_FREQ_DISC := ' ';

      /*CV 3/14/19   IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN

            IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                    IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987'))) THEN
                        IF ma_stat.AU_CONTCOV_LOWFREQ IN ('2', '3') THEN
                            CAR_LOW_FREQ_DISC := '1';
                        END IF;
                    END IF;
                END IF;
            END IF;

        END IF;*/


            IF ma_stat.EFF_DATE >= TO_DATE('01012019', 'MMDDYYYY') THEN          
                    IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                    IF V_ITEM_CONT_COV_DISC='Y' AND V_NAME_CONT_COV_DISC='Y' THEN CAR_CONT_COV_DISC:='1';
                            ELSIF NVL(V_ITEM_CONT_COV_DISC,'N')<>'Y' AND V_NAME_CONT_COV_DISC='Y' THEN  CAR_CONT_COV_DISC:='2';
                            ELSE CAR_CONT_COV_DISC:='0';
                            END IF;
                            
                            IF V_ITEM_LOW_FREQ_DISC='Y' AND V_NAME_LOW_FREQ_DISC='Y' THEN CAR_LOW_FREQ_DISC:='1';
                            ELSIF NVL(V_ITEM_LOW_FREQ_DISC,'N')<>'Y' AND V_NAME_LOW_FREQ_DISC='Y' THEN  CAR_LOW_FREQ_DISC:='2';
                            ELSE CAR_LOW_FREQ_DISC:='0';
                            END IF;
                    END IF;
            ELSE    
                  IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                        IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                            IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                                IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987'))) THEN
                                    IF ma_stat.AU_CONTCOV_LOWFREQ IN ('2', '3') THEN
                                        CAR_LOW_FREQ_DISC := '1';
                                    END IF;
                                END IF;
                            END IF;
                         END IF;
                  END IF;
                  
                   IF NVL(ma_stat.GROUP_LINE, ' ') NOT IN ('07', '10', '15', '38') THEN
                        IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') THEN
                            IF NVL(ma_stat.AU_CONTCOV_LOWFREQ, ' ') <> ' ' THEN
                                IF NOT ((NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299') OR (NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987'))) THEN
                                    IF ma_stat.AU_CONTCOV_LOWFREQ IN ('1', '3') THEN
                                        CAR_CONT_COV_DISC := '1';
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                   END IF;      
                    
            End if;    

---------------------------------------------------
--- After Line-Specific Processing              ---
---------------------------------------------------

 -- CAR_TYPE_OF_LOSS                     VARCHAR2(2);    --87:88
        CAR_TYPE_OF_LOSS := NVL(ma_stat.TYPE_LOSS, '  ');

        -- CBI-COV, OBI-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('109', '111', '100', '101', '102', '103', '104', '105', '106', '110', '112', '134') THEN
            IF NVL(ma_stat.TYPE_LOSS, '  ') NOT IN ('01', '02', '11', '14') THEN
                IF NVL(ma_stat.TRANS_CODE, ' ') IN ('81', '91', '72', '82', '92', '86', '87', '83', '93') THEN
                    CAR_TYPE_OF_LOSS := '11';
                ELSE
                    CAR_TYPE_OF_LOSS := '01';
                END IF;
            END IF;
        END IF;

        IF v_ACCIDENT_TOWN IN ('991', '992', '993', '994', '995', '996', '999') THEN
            -- CBI-COV, OBI-COV
            IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('109', '111', '100', '101', '102', '103', '104', '105', '106', '110', '112', '134') THEN
                IF CAR_TYPE_OF_LOSS = '01' THEN
                    CAR_TYPE_OF_LOSS := '02';
                END IF;

                IF CAR_TYPE_OF_LOSS = '11' THEN
                    CAR_TYPE_OF_LOSS := '14';
                END IF;
            END IF;
        END IF;


        -- PD-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('120', '103', '113') THEN
            CAR_TYPE_OF_LOSS := '03';
        END IF;

        -- MED-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('130') THEN
            CAR_TYPE_OF_LOSS := '05';
        END IF;

        -- U1-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('145') THEN
            CAR_TYPE_OF_LOSS := '06';
        END IF;

        -- U2-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('151') THEN
            CAR_TYPE_OF_LOSS := '07';
        END IF;

        -- TOW-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('220') THEN
            CAR_TYPE_OF_LOSS := '08';
        END IF;

        -- SST-COV
        IF NVL(ma_stat.COVERAGE_CODE, ' ') IN ('230') THEN
            CAR_TYPE_OF_LOSS := '09';
        END IF;



        -- PIP-COV
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') THEN
            CAR_TYPE_OF_LOSS := '24';

            IF NVL(ma_stat.TRANS_CODE, ' ') IN ('81', '91', '72', '82', '92', '86', '87', '83', '93') THEN
                CAR_TYPE_OF_LOSS := '45';
            ELSE
                IF NVL(ma_stat.TRANS_CODE, ' ') IN ('O1') THEN
                    CAR_TYPE_OF_LOSS := '23';
                END IF;
            END IF;
        END IF;


        -- PIP-COV
        IF (NVL(ma_stat.COVERAGE_CODE, '   ') >= '160' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '170') AND (CAR_TYPE_OF_LOSS = '  ') THEN
            IF NVL(ma_stat.TRANS_CODE, ' ') IN ('01', 'O1') THEN
                CAR_TYPE_OF_LOSS := '23';
            ELSE
                CAR_TYPE_OF_LOSS := '24';
            END IF;
        END IF;


        -- COL-COV, LTD-COV
        IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('200', '201', '299', '205') THEN
            IF NVL(ma_stat.TYPE_LOSS, '  ') NOT IN ('12', '11', '10') THEN
                --COL-COV
                IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('200', '201', '299') THEN
                    IF NVL(ma_stat.DED_TYPE, ' ') = 'Y' THEN
                        CAR_TYPE_OF_LOSS := '12';
                    ELSE
                        CAR_TYPE_OF_LOSS := '10';
                    END IF;
                ELSE
                -- LTD-COV
                    IF ma_stat.DED_AMT = 0 THEN
                        CAR_TYPE_OF_LOSS := '12';
                    ELSE
                        CAR_TYPE_OF_LOSS := '10';
                    END IF;
                END IF;
            END IF;
        END IF;


        -- OTC-COV
        IF NVL(ma_stat.COVERAGE_CODE, '   ') IN ('210', '211', '289', '959', '987') THEN
            IF NVL(ma_stat.TYPE_LOSS, '  ') NOT IN ('01', '02', '03', '05', '06', '07', '08', '09') THEN
                CAR_TYPE_OF_LOSS := '09';
            END IF;
        END IF;



        IF NVL(ma_stat.TRANS_CODE, ' ') = '86' THEN
            CAR_TYPE_OF_LOSS := '45';
        END IF;


        IF NVL(ma_stat.COVERAGE_CODE, '   ') = '987' THEN
            CAR_TYPE_OF_LOSS := '09';
        END IF;



        --PHY-COV
        IF ( NVL(ma_stat.COVERAGE_CODE, '   ') >= '200' AND NVL(ma_stat.COVERAGE_CODE, '   ') <= '299' ) OR ( NVL(ma_stat.COVERAGE_CODE, '   ') IN ('959', '987') ) THEN
            IF ( (CAR_PHY_COVERAGE_CODE IN ('045', '042', '043', '046', '049')) OR ( SUBSTR(CAR_PHY_COVERAGE_CODE, 1, 2) = '07' ) ) AND (CAR_TYPE_OF_LOSS <> '10') THEN
                CAR_TYPE_OF_LOSS := '10';
            END IF;

            IF (CAR_PHY_COVERAGE_CODE = '040') AND (CAR_TYPE_OF_LOSS <> '12') THEN
                CAR_TYPE_OF_LOSS := '12';
            END IF;

            IF ( CAR_PHY_COVERAGE_CODE IN ('015', '016', '017', '012', '019') ) AND ( CAR_TYPE_OF_LOSS NOT IN ('11', '12') ) THEN
                CAR_TYPE_OF_LOSS := '11';
            END IF;
        END IF;



---------------------------------------------------
--- Line-Specific Areas                         ---
---------------------------------------------------
 -- v_LINE_SPEC_1                      VARCHAR2(25);   --36:60
 -- v_LINE_SPEC_2                      VARCHAR2(5);    --67:71
 -- v_LINE_SPEC_3                      VARCHAR2(5);    --82:86
---------------------------------------------------


        IF CAR_SUBLINE = '611' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_LIMITS_ID,               1, ' ')
                             || LPAD(CAR_LIAB_LIMITS,             2, ' ')
                             || ' '
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '     '
                             || LPAD(CAR_POLLUTION_LIAB,          1, ' ')
                             || LPAD(CAR_ZONE_RATING,             3, ' ')
                             || LPAD(CAR_AGE_CODE,                1, ' ')
                             || LPAD(CAR_AGGR_LIMITS_ID,          1, ' ')
                             || ' '
                             || LPAD(CAR_PARTIAL_TOTAL_LOSS_IND,  1, ' ')
                             || LPAD(CAR_PASSIVE_RESTRAINT,       1, ' ')
                             || '  '
                             || LPAD(CAR_RATING_ID,               1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 :=    LPAD(CAR_REPORTING_DATE,          3, ' ')
                             || '  ';
        END IF;


        IF CAR_SUBLINE = '615' THEN
            v_LINE_SPEC_1 :=    ' '
                             || LPAD(CAR_PIP_COVERAGE,            1, ' ')
                             || '  '
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '      '
                             || LPAD(CAR_ZONE_RATING,             3, ' ')
                             || LPAD(CAR_AGE_CODE,                1, ' ')
                             || '   '
                             || LPAD(CAR_PASSIVE_RESTRAINT,       1, ' ')
                             || '  '
                             || LPAD(CAR_RATING_ID,               1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';
            v_LINE_SPEC_3 := ' ';
        END IF;


        IF CAR_SUBLINE = '618' THEN
            v_LINE_SPEC_1 :=    ' '
                             || LPAD(CAR_PHY_COVERAGE_CODE,       3, ' ')
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '  '
                             || LPAD(CAR_SYMBOL,                  2, ' ')
                             || LPAD(CAR_INT_APPRAISAL_ID,        1, ' ')
                             || ' '
                             || LPAD(CAR_ZONE_RATING,             3, ' ')
                             || LPAD(CAR_AGE_CODE,                1, ' ')
                             || LPAD(CAR_ANTITHEFT,               1, ' ')
                             || ' '
                             || LPAD(CAR_PARTIAL_TOTAL_LOSS_IND,  1, ' ')
                             || LPAD(CAR_ORIGINAL_COST,           3, ' ')
                             || LPAD(CAR_RATING_ID,               1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 :=    '   '
                             || LPAD(CAR_CATASTROPHE_CODE,        2, ' ');
        END IF;


        IF CAR_SUBLINE = '621' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_MODEL_YEAR_CENTURY,      1, ' ')
                             || LPAD(CAR_LIAB_LIMITS,             2, ' ')
                             || ' '
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '    '
                             || LPAD(CAR_LIMITS_ID,               1, ' ')
                             || LPAD(CAR_ANNUAL_MILEAGE,          3, ' ')
                             || LPAD(CAR_MODEL_YEAR,              2, ' ')
                             || '  '
                             || LPAD(CAR_PARTIAL_TOTAL_LOSS_IND,  1, ' ')
                             || LPAD(CAR_PASSIVE_RESTRAINT,       1, ' ')
                             || LPAD(CAR_DISCOUNT_CODE,           1, ' ')
                             || LPAD(CAR_CONT_COV_DISC,           1, ' ')
                             || LPAD(CAR_LOW_FREQ_DISC,           1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';

            v_LINE_SPEC_3 :=    LPAD(CAR_REPORTING_DATE,          3, ' ')
                             || '  ';
        END IF;


        IF CAR_SUBLINE = '625' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_MODEL_YEAR_CENTURY,      1, ' ')
                             || LPAD(CAR_PIP_COVERAGE,            1, ' ')
                             || LPAD(CAR_PIP_DEDUCTIBLE,          2, ' ')
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '     '
                             || LPAD(CAR_ANNUAL_MILEAGE,          3, ' ')
                             || LPAD(CAR_MODEL_YEAR,              2, ' ')
                             || LPAD(CAR_TYPE_CLAIMANT,           1, ' ')
                             || '  '
                             || LPAD(CAR_PASSIVE_RESTRAINT,       1, ' ')
                             || LPAD(CAR_DISCOUNT_CODE,           1, ' ')
                             || LPAD(CAR_CONT_COV_DISC,           1, ' ')
                             || LPAD(CAR_LOW_FREQ_DISC,           1, ' ')
                             || ' ';

            v_LINE_SPEC_2 := ' ';
            v_LINE_SPEC_3 := ' ';
        END IF;


        IF CAR_SUBLINE = '628' THEN
            v_LINE_SPEC_1 :=    LPAD(CAR_MODEL_YEAR_CENTURY,      1, ' ')
                             || LPAD(CAR_PHY_COVERAGE_CODE,       3, ' ')
                             || LPAD(CAR_ACCIDENT_TOWN,           3, ' ')
                             || '  '
                             || LPAD(CAR_SYMBOL,                  2, ' ')
                             || ' '
                             || LPAD(CAR_ANNUAL_MILEAGE,          3, ' ')
                             || LPAD(CAR_MODEL_YEAR,              2, ' ')
                             || LPAD(CAR_ANTITHEFT,               1, ' ')
                             || ' '
                             || LPAD(CAR_PARTIAL_TOTAL_LOSS_IND,  1, ' ')
                             || LPAD(CAR_OEM_COVERAGE,            1, ' ')
                             || LPAD(CAR_DISCOUNT_CODE,           1, ' ')
                             || LPAD(CAR_VALUE_CODE,              3, ' ');

            v_LINE_SPEC_2 :=    LPAD(CAR_HIGH_THEFT,              1, ' ')
                             || ' '
                             || LPAD(CAR_OTC_EXTRA_RISK,          1, ' ')
                             || ' '
                             || LPAD(CAR_COLL_EXTRA_RISK,         1, ' ');

            v_LINE_SPEC_3 :=    '   '
                             || LPAD(CAR_CATASTROPHE_CODE,        2, ' ');
        END IF;




----------------------------------
--- End of Line-Specific Areas ---
----------------------------------


--- CAR Sort Key
 -- k_SORT_ORDER                       VARCHAR2(1);    --151
        k_SORT_ORDER := ' ';

        IF CAR_SUBLINE IN ('625', '615') THEN
            k_SORT_ORDER := '1';
        END IF;

        IF CAR_SUBLINE IN ('621', '611') THEN
            k_SORT_ORDER := '2';
        END IF;


        IF CAR_SUBLINE IN ('628', '618') THEN
            k_SORT_ORDER := '3';
        END IF;


        IF k_SORT_ORDER = ' ' THEN
            k_SORT_ORDER := '1';
            --CAR_SUBLINE := '625';
        END IF;



--- Other Fields ---

 -- v_RECORD_NUMBER                    NUMBER(6);
        v_RECORD_NUMBER := NVL(v_RECORD_NUMBER, 0) + 1;


 -- v_DEBUG_DATA                       VARCHAR2(40);
    -- This field is used for optionally sending debug data through to the output file.
    -- Uncomment filter on column name in Procedure "write_fixed_file_ISO_LOZ" before running submission.
        v_DEBUG_DATA := '.';
        v_DEBUG_DATA := v_DEBUG_DATA || f_ERROR_CODE || '.';
        v_DEBUG_DATA := v_DEBUG_DATA || f_TOT_PART_IND || '.';

--- v_OSLS_ROUNDING    --rounding error tracking    -- Added 10/24/2017, ASI/RCrawford
        CASE
            WHEN CAR_ASL = '194' THEN v_osls_rounding(1) := v_osls_rounding(1) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            WHEN CAR_ASL = '193' THEN v_osls_rounding(2) := v_osls_rounding(2) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            WHEN CAR_ASL = '212' THEN v_osls_rounding(3) := v_osls_rounding(3) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            WHEN CAR_ASL = '192' THEN v_osls_rounding(4) := v_osls_rounding(4) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            WHEN CAR_ASL = '191' THEN v_osls_rounding(5) := v_osls_rounding(5) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            WHEN CAR_ASL = '211' THEN v_osls_rounding(6) := v_osls_rounding(6) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
            ELSE                      v_osls_rounding(7) := v_osls_rounding(7) + ROUND(ma_stat.LOSS_AMOUNT) - ma_stat.LOSS_AMOUNT;
        END CASE;


---------------------------------------------------
--- Clean up specific records/fields for output ---
---------------------------------------------------

    -- These changes only apply to Private Passenger policies effective 2010 and subsequent.
    IF ma_stat.EFF_DATE >= TO_DATE('01012010', 'MMDDYYYY') AND CAR_ASL IN ('192', '191', '211') THEN

        -- Annual Mileage optional on PPA records, remove.
        v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 12) || '   ' || SUBSTR(v_LINE_SPEC_1, 16, 10);

        -- Passive Restraint optional on PPA records, remove.
        IF CAR_ASL IN ('192', '191') THEN
            v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 20) || ' ' || SUBSTR(v_LINE_SPEC_1, 22, 4);
        END IF;

        -- OEM Coverage, Anti-Theft codes optional on PPA records, remove.
        IF CAR_ASL IN ('211') THEN
            v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 17) || ' ' || SUBSTR(v_LINE_SPEC_1, 19, 2) || ' ' || SUBSTR(v_LINE_SPEC_1, 22, 4);
        END IF;

        -- Partial/Total Loss code optional on PPA records, remove.
        IF CAR_ASL IN ('192', '211') THEN
            v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 19) || ' ' || SUBSTR(v_LINE_SPEC_1, 21, 5);
        END IF;

    END IF;



---------------------------------
--- Claims effective pre-2003 ---
---------------------------------

        -- Claim Count (position 90) needed for claims with effective date prior to 2003.
        -- Class Group (position 54) needed for records with effective date prior to 2003.
        IF ma_stat.EFF_DATE < TO_DATE('01012003', 'MMDDYYYY') THEN
            v_CLAIM_COUNT := '0';

            -- Set position 90 to value in v_CLAIM_COUNT.
            CAR_FILLER_89 := ' ' || v_CLAIM_COUNT;

            -- Set position 54 to zero (placeholder).
            v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 18) || '0' || SUBSTR(v_LINE_SPEC_1, 20, 6);

        END IF;



-----------------------------------------------
--- Use IXPOLVIN table to force a match to  ---
---  premiums reporting on specific fields. ---
-----------------------------------------------


    -- Retrieve values from IXPOLVIN table.
    v_IXPV_DATA := Get_IXPOLVIN_Values( CAR_POLICY_ID, SUBSTR(CAR_POL_EFF_DATE, 2, 2), CAR_VIN, f_IX_RISK, f_IX_TOWN, f_IX_ZIP_CODE, f_IX_DISCOUNT );

    -- Append return value to debug data.
    v_DEBUG_DATA := v_DEBUG_DATA || v_IXPV_DATA;

    -- Update specified output values if necessary unless no matching premiums data found.
    IF v_IXPV_DATA <> 'NO MATCH' THEN
        v_IXPV_DATA := '';

        IF CAR_TYPE_OF_RISK <> '9' AND f_IX_RISK <> '9' THEN
            IF CAR_TYPE_OF_RISK <> f_IX_RISK THEN
                -- Update Type of Risk, note change in v_IXPV_DATA.
                v_IXPV_DATA := v_IXPV_DATA || 'R' || CAR_TYPE_OF_RISK || f_IX_RISK;
                CAR_TYPE_OF_RISK := f_IX_RISK;
            END IF;
        END IF;

        IF CAR_TOWN_CODE <> f_IX_TOWN THEN
            -- Update Town/Territory code, note change in v_IXPV_DATA.
            v_IXPV_DATA := v_IXPV_DATA || 'T' || CAR_TOWN_CODE || f_IX_TOWN;
            CAR_TOWN_CODE := f_IX_TOWN;
        END IF;

        IF CAR_ZIP_CODE <> f_IX_ZIP_CODE THEN
            -- Update ZIP code, note change in v_IXPV_DATA.
            v_IXPV_DATA := v_IXPV_DATA || 'Z' || CAR_ZIP_CODE || f_IX_ZIP_CODE;
            CAR_ZIP_CODE := f_IX_ZIP_CODE;
        END IF;

        -- Added 10/26/2017 to address lingering IXPV ZIP data with zeroes for ZIP+4 - if no valid ZIP+4 data set to blank.  --ASI/RCrawford
        IF NVL(SUBSTR(CAR_ZIP_CODE,6,4),'0000') = '0000' THEN
              CAR_ZIP_CODE := SUBSTR(CAR_ZIP_CODE,1,5) || '    ';
         END IF;

        IF SUBSTR(v_LINE_SPEC_1, 22, 1) <> f_IX_DISCOUNT THEN
            -- Update Discount code, note change in v_IXPV_DATA.
            v_IXPV_DATA := v_IXPV_DATA || 'D' || SUBSTR(v_LINE_SPEC_1, 22, 1) || f_IX_DISCOUNT;
            v_LINE_SPEC_1 := SUBSTR(v_LINE_SPEC_1, 1, 21) || LPAD(f_IX_DISCOUNT,1,' ') || SUBSTR(v_LINE_SPEC_1, 23, 3);
        END IF;

    END IF;



--- --- ---

        INSERT INTO RPT_CLAIMS_CAR_STAT (
            COMPANY_ID                  ,
            TRANS_TYPE                  ,
            ACT_DATE                    ,
            EFF_DATE                    ,
            ACCID_DATE                  ,
            FILLER_16                   ,
            STATE_CODE                  ,
            TOWN_CODE                   ,
            CAR_ID_CODE                 ,
            TYPE_OF_RISK                ,
            ASL                         ,
            SUBLINE                     ,
            CLASS_CODE                  ,
            LINE_SPEC_1                 ,
            PRODUCER_CODE               ,
            LINE_SPEC_2                 ,
            ZIP_CODE                    ,
            FILLER_81                   ,
            LINE_SPEC_3                 ,
            TYPE_OF_LOSS                ,
            FILLER_89                   ,
            LOSS_AMOUNT                 ,
            CLAIM_ID                    ,
            POLICY_ID                   ,
            VIN                         ,
            COMPANY_USE                 ,
            SORT_ORDER                  ,
            RECORD_NUMBER               ,
            DEBUG_DATA
        ) VALUES (
            CAR_COMPANY_ID                ,
            CAR_TRANS_TYPE                ,
            CAR_ACT_DATE                  ,
            CAR_POL_EFF_DATE              ,
            CAR_ACCID_DATE                ,
            CAR_FILLER_16                 ,
            CAR_STATE_CODE                ,
            CAR_TOWN_CODE                 ,
            CAR_CAR_ID_CODE               ,
            CAR_TYPE_OF_RISK              ,
            CAR_ASL                       ,
            CAR_SUBLINE                   ,
            CAR_CLASS_CODE                ,
            v_LINE_SPEC_1               ,
            CAR_PRODUCER_CODE             ,
            v_LINE_SPEC_2               ,
            CAR_ZIP_CODE                  ,
            CAR_FILLER_81                 ,
            v_LINE_SPEC_3               ,
            CAR_TYPE_OF_LOSS              ,
            CAR_FILLER_89                 ,
            CAR_LOSS_AMOUNT               ,
            CAR_CLAIM_ID                  ,
            CAR_POLICY_ID                 ,
            CAR_VIN                       ,
            CAR_COMPANY_USE               ,
            k_SORT_ORDER                ,
            v_RECORD_NUMBER             ,
            v_DEBUG_DATA
        );

        COMMIT;


    <<END_OF_RECORD>>
    NULL;

    END LOOP;

--- --- ---

    CLOSE all_ma_stat;
    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG || ma_stat.policy_number);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;
--- ----------------------------------------------------------------------------

PROCEDURE collect_prem_ma_pm (v_dir         IN     VARCHAR2,
                              v_begin_date  IN     DATE,
                              v_end_date    IN     DATE)
IS

/*
    Report generation procedure for prior term manual premium adjustments.
    Added 10/24/2017.  --ASI/RCrawford
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.COLLECT_PREM_MA_PM';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR ma_pm_stat_sums
    IS

        SELECT '194' AS ASL, COUNT(1) AS REC_COUNT, SUM(written_prem) AS PREM_SUM
        FROM RPT_POLICY_MA_STAT A
        WHERE a.dac_ind = '1' AND a.book_date >= (v_begin_date) AND a.book_date <= (v_end_date) AND a.eff_date < TRUNC(TO_DATE(TO_CHAR(v_year_run - 2), 'YYYY'), 'YEAR') AND a.coverage_code <> '988' AND NOT (a.written_prem = 0 AND a.coverage_code <> '220')
          AND a.group_line in ('07', '10', '15', '38')
          AND ((NVL(a.coverage_code, '   ') >= '100' AND NVL(a.coverage_code, '   ') <= '154') OR (NVL(a.coverage_code, '   ') = '959'))

        UNION ALL

        SELECT '193' AS ASL, COUNT(1) AS REC_COUNT, SUM(written_prem) AS PREM_SUM
        FROM RPT_POLICY_MA_STAT A
        WHERE a.dac_ind = '1' AND a.book_date >= (v_begin_date) AND a.book_date <= (v_end_date) AND a.eff_date < TRUNC(TO_DATE(TO_CHAR(v_year_run - 2), 'YYYY'), 'YEAR') AND a.coverage_code <> '988' AND NOT (a.written_prem = 0 AND a.coverage_code <> '220')
          AND a.group_line in ('07', '10', '15', '38')
          AND ((NVL(a.coverage_code, '   ') >= '160' AND NVL(a.coverage_code, '   ') <= '170'))

        UNION ALL

        SELECT '212' AS ASL, COUNT(1) AS REC_COUNT, SUM(written_prem) AS PREM_SUM
        FROM RPT_POLICY_MA_STAT A
        WHERE a.dac_ind = '1' AND a.book_date >= (v_begin_date) AND a.book_date <= (v_end_date) AND a.eff_date < TRUNC(TO_DATE(TO_CHAR(v_year_run - 2), 'YYYY'), 'YEAR') AND a.coverage_code <> '988' AND NOT (a.written_prem = 0 AND a.coverage_code <> '220')
          AND a.group_line in ('07', '10', '15', '38')
          AND ((NVL(a.coverage_code, '   ') >= '200' AND NVL(a.coverage_code, '   ') <= '299') OR (NVL(a.coverage_code, '   ') = '987'))
        UNION ALL

        SELECT '192' AS ASL, COUNT(1) AS REC_COUNT, SUM(written_prem) AS PREM_SUM
        FROM RPT_POLICY_MA_STAT A
        WHERE a.dac_ind = '1' AND a.book_date >= (v_begin_date) AND a.book_date <= (v_end_date) AND a.eff_date < TRUNC(TO_DATE(TO_CHAR(v_year_run - 2), 'YYYY'), 'YEAR') AND a.coverage_code <> '988' AND NOT (a.written_prem = 0 AND a.coverage_code <> '220')
          AND a.group_line in ('01', '05', '06')
          AND ((NVL(a.coverage_code, '   ') >= '100' AND NVL(a.coverage_code, '   ') <= '154') OR (NVL(a.coverage_code, '   ') = '959'))

        UNION ALL

        SELECT '191' AS ASL, COUNT(1) AS REC_COUNT, SUM(written_prem) AS PREM_SUM
        FROM RPT_POLICY_MA_STAT A
        WHERE a.dac_ind = '1' AND a.book_date >= (v_begin_date) AND a.book_date <= (v_end_date) AND a.eff_date < TRUNC(TO_DATE(TO_CHAR(v_year_run - 2), 'YYYY'), 'YEAR') AND a.coverage_code <> '988' AND NOT (a.written_prem = 0 AND a.coverage_code <> '220')
          AND a.group_line in ('01', '05', '06')
          AND ((NVL(a.coverage_code, '   ') >= '160' AND NVL(a.coverage_code, '   ') <= '170'))

        UNION ALL

        SELECT '211' AS ASL, COUNT(1) AS REC_COUNT, SUM(written_prem) AS PREM_SUM
        FROM RPT_POLICY_MA_STAT A
        WHERE a.dac_ind = '1' AND a.book_date >= (v_begin_date) AND a.book_date <= (v_end_date) AND a.eff_date < TRUNC(TO_DATE(TO_CHAR(v_year_run - 2), 'YYYY'), 'YEAR') AND a.coverage_code <> '988' AND NOT (a.written_prem = 0 AND a.coverage_code <> '220')
          AND a.group_line in ('01', '05', '06')
          AND ((NVL(a.coverage_code, '   ') >= '200' AND NVL(a.coverage_code, '   ') <= '299') OR (NVL(a.coverage_code, '   ') = '987'));


    pm_sum                                ma_pm_stat_sums%ROWTYPE;


    CURSOR all_ma_pm_stat
    IS
        SELECT *
        FROM RPT_POLICY_MA_STAT A
        WHERE
                A.DAC_IND = '1'

            AND a.book_date >= (v_begin_date)
            AND a.book_date <= (v_end_date)
            AND a.eff_date < TRUNC(TO_DATE(TO_CHAR(v_year_run - 2), 'YYYY'), 'YEAR')
            AND a.coverage_code <> '988'
            AND NOT (a.written_prem = 0 AND a.coverage_code <> '220')



        ORDER BY a.policy_number,
                a.actg_date,
                a.trans_code,
                a.au_old_new_stat,
                a.item_num,
                a.coverage_code;


    pm_stat                                all_ma_pm_stat%ROWTYPE;


--- --- ---

    fpm                     UTL_FILE.file_type;
    v_rpt_line              LONG;
    v_cr                    VARCHAR2 (2) := CHR (13);    -- 'OD' CR
    v_pb                    VARCHAR2 (2) := CHR (12);    -- page break















--- --- ---

BEGIN
    --DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'collect_prem_ma_pm';

    OPEN all_ma_pm_stat;
    OPEN ma_pm_stat_sums;













    -- Catch for NULL run date when running this procedure individually.
    IF v_run_date IS NULL THEN
        SELECT TO_CHAR(SYSDATE, 'YYYYMMDD')
            INTO v_run_date
            FROM DUAL;
    END IF;


-- Generate report.
    fpm := UTL_FILE.fopen (v_dir, 'mmvPrem_ptManAdj.txt', 'W', 32000);
    UTL_FILE.put_line (fpm, ' ' || v_cr);

    -- Header lines.
    v_rpt_line := LPAD(' ', 45, ' ') || 'MASS AUTO STATISTICAL REPORTING FOR ' || TO_CHAR(v_begin_date,'MM/YY') || RPAD(' ', 38, ' ') || TO_CHAR( TO_DATE(v_run_date,'YYYYMMDD'), 'MM/DD/YY' );
    UTL_FILE.put_line (fpm, v_rpt_line || v_cr);

    v_rpt_line := LPAD(' ', 46, ' ') || 'PRIOR TERM MANUAL PREMIUM ADJUSTMENTS';
    UTL_FILE.put_line (fpm, v_rpt_line || v_cr);

    UTL_FILE.put_line (fpm, ' ' || v_cr);
    v_rpt_line := LPAD(' ', 38, ' ') || 'REC COUNT   PREMIUM TOT';
    UTL_FILE.put_line (fpm, v_rpt_line || v_cr);
    UTL_FILE.put_line (fpm, ' ' || v_cr);


    -- Total lines.
    LOOP
        FETCH ma_pm_stat_sums INTO pm_sum;

        EXIT WHEN ma_pm_stat_sums%NOTFOUND;

        CASE
            WHEN pm_sum.asl = '194' THEN
                v_rpt_line := '  ' || RPAD('COMMERCIAL', 22, ' ') || RPAD('LIABILITY', 16, ' ') || TO_CHAR(pm_sum.REC_COUNT, 'B999,999') || '  ' || TO_CHAR(pm_sum.PREM_SUM, 'B$9,999,999.99MI');
            WHEN pm_sum.asl = '193' THEN
                v_rpt_line := '  ' || RPAD(' ', 22, ' ') || RPAD('P.I.P.', 16, ' ') || TO_CHAR(pm_sum.REC_COUNT, 'B999,999') || '  ' || TO_CHAR(pm_sum.PREM_SUM, 'B$9,999,999.99MI');
            WHEN pm_sum.asl = '212' THEN
                v_rpt_line := '  ' || RPAD(' ', 22, ' ') || RPAD('PHYSICAL', 16, ' ') || TO_CHAR(pm_sum.REC_COUNT, 'B999,999') || '  ' || TO_CHAR(pm_sum.PREM_SUM, 'B$9,999,999.99MI');
            WHEN pm_sum.asl = '192' THEN
                v_rpt_line := '  ' || RPAD('PRIVATE PASSENGER', 22, ' ') || RPAD('LIABILITY', 16, ' ') || TO_CHAR(pm_sum.REC_COUNT, 'B999,999') || '  ' || TO_CHAR(pm_sum.PREM_SUM, 'B$9,999,999.99MI');
            WHEN pm_sum.asl = '191' THEN
                v_rpt_line := '  ' || RPAD(' ', 22, ' ') || RPAD('P.I.P.', 16, ' ') || TO_CHAR(pm_sum.REC_COUNT, 'B999,999') || '  ' || TO_CHAR(pm_sum.PREM_SUM, 'B$9,999,999.99MI');
            WHEN pm_sum.asl = '211' THEN
                v_rpt_line := '  ' || RPAD(' ', 22, ' ') || RPAD('PHYSICAL', 16, ' ') || TO_CHAR(pm_sum.REC_COUNT, 'B999,999') || '  ' || TO_CHAR(pm_sum.PREM_SUM, 'B$9,999,999.99MI');
            ELSE
                v_rpt_line := 'ERROR';
        END CASE;

        UTL_FILE.put_line (fpm, v_rpt_line || v_cr);

















    END LOOP;


    UTL_FILE.put_line (fpm, ' ' || v_cr);
    UTL_FILE.put_line (fpm, ' ' || v_cr);
    UTL_FILE.put_line (fpm, ' ' || v_cr);


    -- Write individual record data after starting new page.
    -- Column header line.
    UTL_FILE.put_line (fpm, ' ' || v_pb);
    v_rpt_line := LPAD(' ', 7, ' ') || 'LINE POLICY      ITM  COV    TRANS      PREMIUM AMOUNT     EFF DATE    ACT DATE     VIN';
    UTL_FILE.put_line (fpm, v_rpt_line || v_cr);
    UTL_FILE.put_line (fpm, ' ' || v_cr);

    -- Individual record lines.
    LOOP
        FETCH all_ma_pm_stat INTO pm_stat;

        EXIT WHEN all_ma_pm_stat%NOTFOUND;

        v_rpt_line := LPAD(' ', 8, ' ')
                   || lpad(pm_stat.group_line, 2, ' ')                      || '  '
                   || rpad(pm_stat.policy_number, 10, ' ')                  || '  '
                   || lpad(pm_stat.item_num, 3, ' ')                        || '  '
                   || lpad(pm_stat.coverage_code, 3, ' ')                   || '    '
                   || lpad(pm_stat.trans_source, 2, ' ')                    || ' '
                   || lpad(pm_stat.trans_code, 2, ' ')                      || '  '
                   || to_char(pm_stat.written_prem,'B$99,999,999,999.99MI') || '   '
                   || to_char(pm_stat.eff_date, 'MM/DD/YYYY')               || '  '
                   || to_char(pm_stat.actg_date, 'MM/DD/YYYY')              || '    '
                   || rpad(pm_stat.au_ident_num, 17, ' ');

        UTL_FILE.put_line (fpm, v_rpt_line || v_cr);
    END LOOP;


    --End of records.
    CLOSE ma_pm_stat_sums;
    CLOSE all_ma_pm_stat;
    UTL_FILE.fclose(fpm);


--- --- ---

    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            --DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG || pm_stat.policy_number);

            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

--- ----------------------------------------------------------------------------

PROCEDURE collect_claim_ma_8x_totals (v_dir         IN     VARCHAR2,
                                      v_begin_date  IN     DATE,
                                      v_end_date    IN     DATE)
IS

/*
    Report generation procedure for loss expense subrogation totals.
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.COLLECT_CLAIM_MA_8X_TOTALS';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR all_ma_stat
    IS
        SELECT *
        FROM RPT_CLAIMS_MA_STAT A
        WHERE
                a.dac_ind = '1'
            AND ( a.group_line IN ('06', '07') OR ( a.group_line IN ('05', '15', '38') AND a.item_state = 'MA' ) )
            AND a.book_date >= (v_begin_date)
            AND a.book_date <= (v_end_date)
            AND a.AGENT_NUM <> '20999'
            AND a.loss_amount <> 0

            AND a.trans_code in ('86', '87')


        ORDER BY A.POLICY_NUMBER,
                 A.ACTG_DATE,
                 A.TRANS_CODE,
                 A.ITEM_NUM,
                 A.COVERAGE_CODE;

    ma_stat                                all_ma_stat%ROWTYPE;


--- --- ---

    f8x                     UTL_FILE.file_type;
    v_rpt_line              LONG;
    v_cr                    VARCHAR2 (2) := CHR (13);    -- 'OD' CR


    -- Record counters
    v_RECS_PP_86            NUMBER;
    v_RECS_COM_86           NUMBER;
    v_RECS_PP_87            NUMBER;
    v_RECS_COM_87           NUMBER;


    -- Loss totals
    v_TOTAL_PP_86           NUMBER;
    v_TOTAL_COM_86          NUMBER;
    v_TOTAL_PP_87           NUMBER;
    v_TOTAL_COM_87          NUMBER;


--- --- ---

BEGIN
    --DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'collect_claim_ma_8x_totals';

    OPEN all_ma_stat;


--- Initial values at start of processing.
    v_RECS_PP_86   := 0;
    v_RECS_COM_86  := 0;
    v_RECS_PP_87   := 0;
    v_RECS_COM_87  := 0;

    v_TOTAL_PP_86  := 0;
    v_TOTAL_COM_86 := 0;
    v_TOTAL_PP_87  := 0;
    v_TOTAL_COM_87 := 0;


    -- Catch for NULL run date when running this procedure individually.
    IF v_run_date IS NULL THEN
        SELECT TO_CHAR(SYSDATE, 'YYYYMMDD')
            INTO v_run_date
            FROM DUAL;
    END IF;


    LOOP
        FETCH all_ma_stat INTO ma_stat;

        EXIT WHEN all_ma_stat%NOTFOUND;


        -- Allocated Expense - Subrogation.
        IF ma_stat.TRANS_CODE = '86' THEN
            -- Private Passenger.
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                -- Update record counter.
                v_RECS_PP_86 := v_RECS_PP_86 + 1;
                -- Update loss total.
                v_TOTAL_PP_86 := v_TOTAL_PP_86 + ma_stat.LOSS_AMOUNT;
            END IF;

            -- Commercial.
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
                -- Update record counter.
                v_RECS_COM_86 := v_RECS_COM_86 + 1;
                -- Update loss total.
                v_TOTAL_COM_86 := v_TOTAL_COM_86 + ma_stat.LOSS_AMOUNT;
            END IF;

        END IF;


        -- Unallocated Expense - Subrogation.
        IF ma_stat.TRANS_CODE = '87' THEN
            -- Private Passenger.
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('01', '05', '06') THEN
                -- Update record counter.
                v_RECS_PP_87 := v_RECS_PP_87 + 1;
                -- Update loss total.
                v_TOTAL_PP_87 := v_TOTAL_PP_87 + ma_stat.LOSS_AMOUNT;
            END IF;

            -- Commercial.
            IF NVL(ma_stat.GROUP_LINE, ' ') IN ('07', '10', '15', '38') THEN
                -- Update record counter.
                v_RECS_COM_87 := v_RECS_COM_87 + 1;
                -- Update loss total.
                v_TOTAL_COM_87 := v_TOTAL_COM_87 + ma_stat.LOSS_AMOUNT;
            END IF;

        END IF;

    END LOOP;


    -- Generate report.
    f8x := UTL_FILE.fopen (v_dir, 'mmvLoss_expSubTotals.txt', 'W', 32000);
    UTL_FILE.put_line (f8x, ' ' || v_cr);


    -- Header lines.
    v_rpt_line := LPAD(' ', 41, ' ') || 'MASS AUTO LOSS STATISTICAL REPORTING FOR     ' || TO_CHAR(v_begin_date,'MM/YY') || RPAD(' ', 30, ' ') || TO_CHAR( TO_DATE(v_run_date,'YYYYMMDD'), 'MM/DD/YY' );
    UTL_FILE.put_line (f8x, v_rpt_line || v_cr);

    v_rpt_line := LPAD(' ', 55, ' ') || 'TRAN 86 AND 87 TOTALS';
    UTL_FILE.put_line (f8x, v_rpt_line || v_cr);


    -- Totals lines.
    v_rpt_line := LPAD(' ', 30, ' ') || 'TRANSACTION 86  P.P.    COUNT = ' || TO_CHAR(v_RECS_PP_86,'999,999MI') || '   TOTAL =   ' || TO_CHAR(v_TOTAL_PP_86,'$999,999.00MI');
    UTL_FILE.put_line (f8x, v_rpt_line || v_cr);

    v_rpt_line := LPAD(' ', 30, ' ') || 'TRANSACTION 86  COML    COUNT = ' || TO_CHAR(v_RECS_COM_86,'999,999MI') || '   TOTAL =   ' || TO_CHAR(v_TOTAL_COM_86,'$999,999.00MI');
    UTL_FILE.put_line (f8x, v_rpt_line || v_cr);

    v_rpt_line := LPAD(' ', 30, ' ') || 'TRANSACTION 87  P.P.    COUNT = ' || TO_CHAR(v_RECS_PP_87,'999,999MI') || '   TOTAL =   ' || TO_CHAR(v_TOTAL_PP_87,'$999,999.00MI');
    UTL_FILE.put_line (f8x, v_rpt_line || v_cr);

    v_rpt_line := LPAD(' ', 30, ' ') || 'TRANSACTION 87  COML    COUNT = ' || TO_CHAR(v_RECS_COM_87,'999,999MI') || '   TOTAL =   ' || TO_CHAR(v_TOTAL_COM_87,'$999,999.00MI');
    UTL_FILE.put_line (f8x, v_rpt_line || v_cr);


    -- At end, close cursor and report file.
    CLOSE all_ma_stat;
    UTL_FILE.fclose(f8x);


--- --- ---

    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            --DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG || ma_stat.policy_number);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

PROCEDURE summarize_car_prem_data
IS

/*
    Summarize CAR premiums records that do not fall under the 2010 format.
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.SUMMARIZE_CAR_PREM_DATA';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR all_car_stat
    IS
        SELECT *
        FROM RPT_POLICY_CAR_STAT A
        WHERE a.SORT_NEW_FLAG_10 <> '*'
        ORDER BY a.SORT_POLICY, a.SORT_ID_CODE, a.SORT_SOURCE, a.SORT_CHG_DATE, a.SORT_RUN_DATE, a.SORT_OLD_NEW, a.SORT_ITEM, a.SORT_SUBLINE, a.SORT_20XX, a.SORT_ZONE, a.SORT_COV, a.SORT_COMMIS, a.SORT_EXPOSURE, a.SORT_NEW_FLAG_10,
                 SUBSTR(a.LINE_SPEC_1, 2, 11),
                 a.PREM_AMOUNT_1, a.PREM_AMOUNT_2;

    car_stat                                all_car_stat%ROWTYPE;

--- --- ---


--- CAR Stat fields
    SUM_COMPANY_ID                      VARCHAR2(3);     --1:3
    SUM_TRANS_TYPE                      VARCHAR2(2);     --4:5
    SUM_ACT_DATE                        VARCHAR2(2);     --6:7
    SUM_POL_EFF_DATE                    VARCHAR2(3);     --8:10
    SUM_TRAN_EFF_DATE                   VARCHAR2(3);     --11:13
    SUM_POL_EXP_DATE                    VARCHAR2(3);     --14:16
    SUM_STATE_CODE                      VARCHAR2(2);     --17:18
    SUM_TOWN_CODE                       VARCHAR2(3);     --19:21
    SUM_CAR_ID_CODE                     VARCHAR2(1);     --22
    SUM_TYPE_OF_RISK                    VARCHAR2(1);     --23
    SUM_ASL                             VARCHAR2(3);     --24:26
    SUM_SUBLINE                         VARCHAR2(3);     --27:29
    SUM_CLASS_CODE                      VARCHAR2(6);     --30:35
    SUM_LINE_SPEC_1                     VARCHAR2(25);    --36:60
    SUM_PRODUCER_CODE                   VARCHAR2(6);     --61:66
    SUM_LINE_SPEC_2                     VARCHAR2(5);     --67:71
    SUM_ZIP_CODE                        VARCHAR2(9);     --72:80
    SUM_EXPOSURE                        NUMBER(7);       --81:87
    SUM_EXP_RATING_MOD                  VARCHAR2(3);     --88:90
    SUM_OTHER_RATING_MOD                VARCHAR2(3);     --91:93
    SUM_FILLER_94                       VARCHAR2(2);     --94:95
    SUM_PREM_AMOUNT_1                   NUMBER(8);       --96:103
    SUM_PREM_AMOUNT_2                   NUMBER(8);       --104:111
    SUM_FILLER_112                      VARCHAR2(3);     --112:114
    SUM_POLICY_ID                       VARCHAR2(16);    --115:130
    SUM_VIN                             VARCHAR2(17);    --131:147
    SUM_COMPANY_USE                     VARCHAR2(3);     --148:150

--- Summary KEY fields
    KEY_SORT_POLICY                     VARCHAR2(10 BYTE);
    KEY_SORT_ID_CODE                    VARCHAR2(1 BYTE);
    KEY_SORT_SOURCE                     VARCHAR2(2 BYTE);
    KEY_SORT_CHG_DATE                   VARCHAR2(7 BYTE);
    KEY_SORT_RUN_DATE                   VARCHAR2(7 BYTE);
    KEY_SORT_OLD_NEW                    VARCHAR2(1 BYTE);
    KEY_SORT_ITEM                       VARCHAR2(3 BYTE);
    KEY_SORT_SUBLINE                    VARCHAR2(3 BYTE);
    KEY_SORT_20XX                       VARCHAR2(8 BYTE);
    KEY_SORT_ZONE                       VARCHAR2(1 BYTE);
    KEY_SORT_COV                        NUMBER(2);
    KEY_SORT_COMMIS                     NUMBER(3,3);
    KEY_SORT_EXPOSURE                   NUMBER(7);
    KEY_SORT_NEW_FLAG_10                VARCHAR2(1 BYTE);



--- Summary count and total variables.
    CAR_IN_COUNT        NUMBER(6);
    SUM_OUT_COUNT       NUMBER(6);

    CAR_TOT_PREM_IN     NUMBER(11,2);
    SUM_TOT_PREM_OUT    NUMBER(11,2);


--- Procedural variables
    v_NEW_SUM_SW        VARCHAR2(1);
    v_OUTPUT_SUM_SW     VARCHAR2(1);
    v_DET_SDIP          VARCHAR2(2);
    v_SORT_SDIP         VARCHAR2(2);

    v_TEMP_BI_CODE      VARCHAR2(2);
    v_TEMP_PD_CODE      VARCHAR2(2);
    v_TEMP_MP_CODE      VARCHAR2(2);
    v_TEMP_U1_CODE      VARCHAR2(2);
    v_TEMP_U2_CODE      VARCHAR2(2);



--- --- ---

BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'summarize_car_prem_data_insert';

    OPEN all_car_stat;


    CAR_IN_COUNT := 0;
    SUM_OUT_COUNT := 0;

    CAR_TOT_PREM_IN := 0;
    SUM_TOT_PREM_OUT := 0;

    v_NEW_SUM_SW := 'Y';
    v_OUTPUT_SUM_SW := 'N';

    v_DET_SDIP := '  ';
    v_SORT_SDIP := '  ';




    LOOP
        -- Reset temporary variables.
        v_TEMP_BI_CODE := '  ';
        v_TEMP_PD_CODE := '  ';
        v_TEMP_MP_CODE := '  ';
        v_TEMP_U1_CODE := '  ';
        v_TEMP_U2_CODE := '  ';


        -- Try to read next record.
        FETCH all_car_stat INTO car_stat;

        -- Check if there is a record to process.
        IF all_car_stat%NOTFOUND THEN
            -- No more records to process. Output current summary record, no new record after.
            v_NEW_SUM_SW := 'N';
            v_OUTPUT_SUM_SW := 'Y';
        ELSE
            -- Add new record to count and total.
            CAR_IN_COUNT := CAR_IN_COUNT + 1;

            CAR_TOT_PREM_IN := CAR_TOT_PREM_IN + car_stat.PREM_AMOUNT_1;
            CAR_TOT_PREM_IN := CAR_TOT_PREM_IN + car_stat.PREM_AMOUNT_2;


            v_DET_SDIP := SUBSTR(car_stat.SORT_20XX, 1, 2);
            
           -- Added this section 11/15/2017, company-specific coverages should not be summarized.  --ASI/RCrawford
           -- Bypass summarization for these records; need to flag this for both incoming record and current summary record.
            IF ( car_stat.CLASS_CODE = '998000' AND car_stat.TYPE_OF_RISK = '9' )
             OR ( SUM_CLASS_CODE = '998000' and SUM_TYPE_OF_RISK = '9' )
            THEN

                v_NEW_SUM_SW := 'B';  -- Bypass next section
                v_OUTPUT_SUM_SW := 'Y';  -- Flag current record for output.

            END IF;
            -- End of 11/15/2017 change.


--200
            -- Check that a new summary record isn't required.
            -- Check that there is a record to process.
            IF v_NEW_SUM_SW = 'N' AND NOT all_car_stat%NOTFOUND THEN
                -- Check if detail record key matches summary record key.
                IF car_stat.SORT_POLICY    = KEY_SORT_POLICY
                 AND car_stat.SORT_ID_CODE  = KEY_SORT_ID_CODE
                 AND car_stat.SORT_SOURCE   = KEY_SORT_SOURCE
                 AND car_stat.SORT_CHG_DATE = KEY_SORT_CHG_DATE
                 AND car_stat.SORT_RUN_DATE = KEY_SORT_RUN_DATE
                 AND car_stat.SORT_OLD_NEW  = KEY_SORT_OLD_NEW
                 AND car_stat.SORT_ITEM     = KEY_SORT_ITEM
                 AND car_stat.SORT_SUBLINE  = KEY_SORT_SUBLINE
                 AND car_stat.SORT_20XX     = KEY_SORT_20XX
                 AND car_stat.SORT_ZONE     = KEY_SORT_ZONE
                 AND car_stat.SORT_COMMIS   = KEY_SORT_COMMIS
                 AND ( ( car_stat.SORT_EXPOSURE = KEY_SORT_EXPOSURE )
                    -- Force towing coverage to summarize.
                    OR ( car_stat.SORT_COV = 84 ) )
                THEN
                    -- Keys match, try to summarize.
                    v_SORT_SDIP := v_DET_SDIP;


                    -- Liability record.
                    IF car_stat.ASL IN ('192', '194') THEN

                        -- Copy value for BI Limit code from detail record to temporary variable, allows for following statement.
                        v_TEMP_BI_CODE := SUBSTR(car_stat.LINE_SPEC_1, 2, 2);

                        -- Replace blank BI Limit code from detail record for optional BI coverage with the code from the summary record.
                        IF car_stat.SORT_COV = 17 AND SUBSTR(car_stat.LINE_SPEC_1, 2, 2) = '  ' THEN
                            v_TEMP_BI_CODE := SUBSTR(SUM_LINE_SPEC_1, 2, 2);
                        END IF;

                        -- Check for BI Limit code for detail record.
                        IF v_TEMP_BI_CODE <> '  ' THEN
                            IF SUBSTR(SUM_LINE_SPEC_1, 2, 2) IN ('  ', '04', '01', '03') OR car_stat.SORT_COV = 17 THEN
                                SUM_LINE_SPEC_1 := SUBSTR(car_stat.LINE_SPEC_1, 1, 1)
                                                || v_TEMP_BI_CODE --SUBSTR(car_stat.LINE_SPEC_1, 2, 2)
                                                || SUBSTR(SUM_LINE_SPEC_1, 4, 22);

                                -- Add BI premium from detail record to summary record.
                                SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;
                            ELSE
                                -- Need to write the current summary record to table.
                                v_OUTPUT_SUM_SW := 'Y';
                            END IF;

                        ELSE

                            -- Check for PD Limit code on detail record.
                            IF SUBSTR(car_stat.LINE_SPEC_1, 4, 2) <> '  ' THEN
                                -- If PD Limit code is blank on summary record, update with the code from the detail record.
                                IF SUBSTR(SUM_LINE_SPEC_1, 4, 2) = '  ' THEN
                                    SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 3)
                                                    || SUBSTR(car_stat.LINE_SPEC_1, 4, 2)
                                                    || SUBSTR(SUM_LINE_SPEC_1, 6, 20);
                                END IF;

                                -- Check if PD Limit code on detail record matches the code on the summary record.
                                IF SUBSTR(car_stat.LINE_SPEC_1, 4, 2) = SUBSTR(SUM_LINE_SPEC_1, 4, 2) THEN
                                    -- Add PD premium from detail record to summary record.
                                    SUM_PREM_AMOUNT_2 := SUM_PREM_AMOUNT_2 + car_stat.PREM_AMOUNT_2;
                                ELSE
                                    -- Need to write the current summary record to table.
                                    v_OUTPUT_SUM_SW := 'Y';
                                END IF;

                            ELSE

                                -- Check for MP Limit code on detail record.
                                IF SUBSTR(car_stat.LINE_SPEC_1, 6, 2) <> '  ' THEN
                                    -- Check if MP Limit code is blank on summary record.
                                    IF SUBSTR(SUM_LINE_SPEC_1, 6, 2) = '  ' THEN
                                        -- Update summary record with MP Limit code from the detail record.
                                        SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 5)
                                                        || SUBSTR(car_stat.LINE_SPEC_1, 6, 2)
                                                        || SUBSTR(SUM_LINE_SPEC_1, 8, 18);

                                        -- Add MP premium from detail record to summary record.
                                        SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;
                                    ELSE
                                        -- Need to write the current summary record to table.
                                        v_OUTPUT_SUM_SW := 'Y';
                                    END IF;

                                ELSE

                                    -- Check for U1 Limit code on detail record.
                                    IF SUBSTR(car_stat.LINE_SPEC_1, 8, 2) <> '  ' THEN
                                        -- Check if U1 Limit code is blank on summary record.
                                        IF SUBSTR(SUM_LINE_SPEC_1, 8, 2) = '  ' THEN
                                            --Update summary record with the U1 Limit code from the detail record.
                                            SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 7)
                                                            || SUBSTR(car_stat.LINE_SPEC_1, 8, 2)
                                                            || SUBSTR(SUM_LINE_SPEC_1, 10, 16);

                                            -- Add U1 premium from detail record to summary record.
                                            SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;

                                            -- Check if U2 Limit code is blank on summary record.
                                            IF SUBSTR(SUM_LINE_SPEC_1, 10, 2) = '  ' THEN
                                                --Update summary record with the U2 Limit code from the detail record - this allows forcing a U2 code of '04' if present.
                                                SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 9)
                                                                || SUBSTR(car_stat.LINE_SPEC_1, 10, 2)
                                                                || SUBSTR(SUM_LINE_SPEC_1, 12, 14);
                                            END IF;

                                        ELSE
                                            -- Need to write the current summary record to table.
                                            v_OUTPUT_SUM_SW := 'Y';
                                        END IF;

                                    ELSE

                                        -- Check for U2 Limit code on detail record.
                                        IF SUBSTR(car_stat.LINE_SPEC_1, 10, 2) <> '  ' THEN
                                            -- Check if U2 Limit code is blank on summary record.
                                            -- Override a forced U2 Limit code of '04' if necessary.
                                            IF SUBSTR(SUM_LINE_SPEC_1, 10, 2) = '  ' OR SUBSTR(SUM_LINE_SPEC_1, 10, 2) = '04' THEN
                                                --Update summary record with the U2 Limit code from the detail record.
                                                SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 9)
                                                                || SUBSTR(car_stat.LINE_SPEC_1, 10, 2)
                                                                || SUBSTR(SUM_LINE_SPEC_1, 12, 14);

                                                -- Add U2 premium from detail record to summary record.
                                                SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;
                                            ELSE
                                                -- Need to write the current summary record to table.
                                                v_OUTPUT_SUM_SW := 'Y';
                                            END IF;

                                        ELSE

                                            -- Need to write the current summary record to table.
                                            v_OUTPUT_SUM_SW := 'Y';

                                        END IF;

                                    END IF;

                                END IF;

                            END IF;

                        END IF;

                    END IF;


                    -- Physical Damage record.
                    IF car_stat.ASL IN ('211', '212') THEN
                        -- Check if OTC code is blank on detail record.
                        IF SUBSTR(car_stat.LINE_SPEC_1, 2, 3) = '   ' THEN
                            -- Collision record.
                            -- Check that the Collision coverage on the detail record is not blank and matches the coverage on the summary record.
                            -- Check that v_DET_SDIP is not blank and matches the saved value in v_SORT_SDIP.
                            IF SUBSTR(car_stat.LINE_SPEC_1, 5, 3) <> '   '
                             AND SUBSTR(car_stat.LINE_SPEC_1, 5, 3) = SUBSTR(SUM_LINE_SPEC_1, 5, 3)
                             AND v_DET_SDIP <> '  '
                             AND v_DET_SDIP = v_SORT_SDIP
                            THEN
                                -- Add Collision premium from detail record to summary record.
                                SUM_PREM_AMOUNT_2 := SUM_PREM_AMOUNT_2 + car_stat.PREM_AMOUNT_2;
                            ELSE
                                -- Check that the Collision coverage on the detail record is not blank.
                                IF SUBSTR(car_stat.LINE_SPEC_1, 5, 3) <> '   ' THEN
                                    -- Check if the Collision coverage on the summary record is blank.
                                    IF SUBSTR(SUM_LINE_SPEC_1, 5, 3) = '   ' THEN
                                        -- Update the Collision coverage on the summary record with the coverage from the detail record.
                                        SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 4)
                                                        || SUBSTR(car_stat.LINE_SPEC_1, 5, 3)
                                                        || SUBSTR(SUM_LINE_SPEC_1, 8, 18);

                                        -- Add Collision premium from detail record to summary record.
                                        SUM_PREM_AMOUNT_2 := SUM_PREM_AMOUNT_2 + car_stat.PREM_AMOUNT_2;
                                    ELSE
                                        -- Need to write the current summary record to table.
                                        v_OUTPUT_SUM_SW := 'Y';
                                    END IF;
                                END IF;
                            END IF;

                        ELSE
                            -- OTC record.
                            -- Check if OTC code is blank on summary record.
                            IF SUBSTR(SUM_LINE_SPEC_1, 2, 3) = '   ' THEN
                                -- Update summary OTC & Anti-Theft codes from detail record.
                                SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 1)
                                                || SUBSTR(car_stat.LINE_SPEC_1, 2, 3)
                                                || SUBSTR(SUM_LINE_SPEC_1, 5, 13)
                                                || SUBSTR(car_stat.LINE_SPEC_1, 18, 1)
                                                || SUBSTR(SUM_LINE_SPEC_1, 19, 7);

                                -- Add OTC premium from detail record to summary record.
                                SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;
                            ELSE
                                -- Summarize towing coverage into summary records without included towing.
                                --IF SUBSTR(SUM_LINE_SPEC_1, 2, 3) IN ('035', '037', '039', '023', '135', '137', '139', '123', '031', '033', '131', '133', '004', '104')    -- prior logic from before 07/2016 Towing changes.
                                IF SUBSTR(SUM_LINE_SPEC_1, 2, 3) IN ('035', '037', '039', '023', '004', '135', '137', '139', '123', '104', --OTC, Excluded Towing
                                                                     '234', '236', '238', '222', '264', '334', '336', '338', '322', '364', --OTC, $50 Towing
                                                                     '434', '436', '438', '422', '464', '534', '536', '538', '522', '564', --OTC, $100 Towing
                                                                                                               '031', '033', '131', '133') --Unknown
                                 AND SUBSTR(car_stat.LINE_SPEC_1, 2, 3) IN ('081', '082', '080') --Towing coverage
                                THEN
                                    -- Add OTC premium from detail record to summary record.
                                    SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;

                                ELSE
                                    -- Need to write the current summary record to table.
                                    v_OUTPUT_SUM_SW := 'Y';
                                END IF;
                            END IF;
                        END IF;
                    -- End of Physical Damage section.
                    END IF;


                    -- No-Fault record.
                    IF car_stat.ASL NOT IN ('192', '194', '211', '212') THEN
                        -- Do not summarize.
                        -- Need to write the current summary record to table.
                        v_OUTPUT_SUM_SW := 'Y';
                    END IF;


                ELSE

                    -- Record keys do not match, need to write the current summary record to table.
                    v_OUTPUT_SUM_SW := 'Y';

                END IF;

            END IF;

        END IF;


--300
        -- Check that a new summary record isn't required.
        -- Check if the current summary record needs to be written to table.
        ---IF v_NEW_SUM_SW = 'N' AND v_OUTPUT_SUM_SW = 'Y' THEN
        IF v_NEW_SUM_SW IN ('N','B') AND v_OUTPUT_SUM_SW = 'Y' THEN        -- Changed 11/15/2017, include summarization bypass condition.  --ASI/RCrawford



            -- Check premium amounts to see if records have cancelled out.
            IF SUM_PREM_AMOUNT_1 = 0 AND SUM_PREM_AMOUNT_2 = 0 THEN
                -- Records have cancelled out.
                v_OUTPUT_SUM_SW := 'N';

                -- Check if there are more records to summarize.
                IF NOT all_car_stat%NOTFOUND THEN
                    -- New summary record required.
                    v_NEW_SUM_SW := 'Y';
                END IF;
            ELSE

                -- Liability summary record.
                IF SUM_ASL IN ('192', '194') THEN
--325
                    -- Replace blank BI Limit code with zeroes.
                    IF SUBSTR(SUM_LINE_SPEC_1, 2, 2) = '  ' THEN
                        SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 1)
                                        || '00'
                                        || SUBSTR(SUM_LINE_SPEC_1, 4, 22);
                    END IF;

                    -- Recover SDIP BI code with prior code, if possible.
                    IF SUBSTR(car_stat.LINE_SPEC_1, 2, 2) IN ('01', '04') AND SUBSTR(car_stat.CLASS_CODE, 5, 2) <> '00' THEN
                        IF car_stat.SORT_POLICY   = KEY_SORT_POLICY
                         AND car_stat.SORT_ID_CODE  = KEY_SORT_ID_CODE
                         AND car_stat.SORT_SOURCE   = KEY_SORT_SOURCE
                         AND car_stat.SORT_CHG_DATE = KEY_SORT_CHG_DATE
                         AND car_stat.SORT_RUN_DATE = KEY_SORT_RUN_DATE
                         AND car_stat.SORT_OLD_NEW  = KEY_SORT_OLD_NEW
                         AND car_stat.SORT_ITEM     = KEY_SORT_ITEM
                         AND car_stat.SORT_SUBLINE  = KEY_SORT_SUBLINE
                        THEN
                            v_TEMP_BI_CODE := SUBSTR(SUM_LINE_SPEC_1, 2, 2);
                        END IF;
                    END IF;

                    -- Commercial-only, recover limit code for CSL
                    IF SUM_ASL = '194' THEN
                        IF SUBSTR(SUM_LINE_SPEC_1, 2, 2) > '18' AND SUBSTR(SUM_LINE_SPEC_1, 2, 2) < '49' THEN
                            IF SUBSTR(SUM_LINE_SPEC_1, 1, 1) <> '2' THEN
                                SUM_LINE_SPEC_1 := '2'
                                                || SUBSTR(SUM_LINE_SPEC_1, 2, 24);
                            END IF;
                        END IF;
                    END IF;


                    -- Set any blank Limit codes to zeroes.
                    v_TEMP_PD_CODE := SUBSTR(SUM_LINE_SPEC_1, 4, 2);
                    IF v_TEMP_PD_CODE = '  ' THEN
                        v_TEMP_PD_CODE := '00';
                    END IF;

                    v_TEMP_MP_CODE := SUBSTR(SUM_LINE_SPEC_1, 6, 2);
                    IF v_TEMP_MP_CODE = '  ' THEN
                        v_TEMP_MP_CODE := '00';
                    END IF;

                    v_TEMP_U1_CODE := SUBSTR(SUM_LINE_SPEC_1, 8, 2);
                    IF v_TEMP_U1_CODE = '  ' THEN
                        v_TEMP_U1_CODE := '00';
                    END IF;

                    v_TEMP_U2_CODE := SUBSTR(SUM_LINE_SPEC_1, 10, 2);
                    IF v_TEMP_U2_CODE = '  ' THEN
                        v_TEMP_U2_CODE := '00';
                    END IF;

                    SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 3)
                                    || v_TEMP_PD_CODE
                                    || v_TEMP_MP_CODE
                                    || v_TEMP_U1_CODE
                                    || v_TEMP_U2_CODE
                                    || SUBSTR(SUM_LINE_SPEC_1, 12, 14);

                END IF;



                -- Physical Damage summary record.
                IF SUM_ASL IN ('211', '212') THEN

                    -- Check for blank OTC code.
                    IF SUBSTR(SUM_LINE_SPEC_1, 2, 3) = '   ' THEN
                        -- Check Collision code.
                        IF SUBSTR(SUM_LINE_SPEC_1, 5, 3) = '099' THEN
                            -- Blank specific fields on summary record.
                             -- Vehicle Year (removed 1995), Symbol, Pre-Insurance Inspection.
                            SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 7)
                                            || '     '
                                            || SUBSTR(SUM_LINE_SPEC_1, 13, 13);
                             -- Exposure
                            SUM_EXPOSURE := 0;
                        END IF;

                    ELSE

                        -- Check for blank or "All Other" Collision codes.
                        IF SUBSTR(SUM_LINE_SPEC_1, 5, 3) IN ('   ', '099') THEN
                            -- Check if OTC code is within specific miscellaneous coverages, '080' - '089'.
                            IF SUBSTR(SUM_LINE_SPEC_1, 2, 3) > '08 ' AND SUBSTR(SUM_LINE_SPEC_1, 2, 3) < '09 ' THEN
                                -- Blank specific fields on summary record.
                                 -- Vehicle Year (removed 1995), Symbol, Pre-Insurance Inspection, Anti-Theft.
                                SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 7)
                                                || '     '
                                                || SUBSTR(SUM_LINE_SPEC_1, 13, 5)
                                                || ' '
                                                || SUBSTR(SUM_LINE_SPEC_1, 19, 7);
                                 -- Exposure
                                SUM_EXPOSURE := 0;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;


--380
            -- Check if writing current summary record to table.
            IF v_OUTPUT_SUM_SW = 'Y' THEN
                -- Update output total and count.
                SUM_TOT_PREM_OUT := SUM_TOT_PREM_OUT + SUM_PREM_AMOUNT_1;
                SUM_TOT_PREM_OUT := SUM_TOT_PREM_OUT + SUM_PREM_AMOUNT_2;
                SUM_OUT_COUNT := SUM_OUT_COUNT + 1;

                IF v_SORT_SDIP <> '  ' THEN
                    SUM_CLASS_CODE := SUBSTR(SUM_CLASS_CODE, 1, 4) || LPAD(v_SORT_SDIP, 2, '0');
                END IF;

                IF SUM_ASL = '194' AND SUBSTR(SUM_LINE_SPEC_1, 1, 1) = '2' THEN
                    IF SUBSTR(SUM_LINE_SPEC_1, 2, 2) = SUBSTR(SUM_LINE_SPEC_1, 4, 2) THEN
                        SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 3) || '00' || SUBSTR(SUM_LINE_SPEC_1, 6, 20);
                    END IF;
                END IF;

                -- Write summary record to table.
                INSERT INTO RPT_POLICY_CAR_STAT_SUM1 (
                    COMPANY_ID              ,
                    TRANS_TYPE              ,
                    ACT_DATE                ,
                    POL_EFF_DATE            ,
                    TRAN_EFF_DATE           ,
                    POL_EXP_DATE            ,
                    STATE_CODE              ,
                    TOWN_CODE               ,
                    CAR_ID_CODE             ,
                    TYPE_OF_RISK            ,
                    ASL                     ,
                    SUBLINE                 ,
                    CLASS_CODE              ,
                    LINE_SPEC_1             ,
                    PRODUCER_CODE           ,
                    LINE_SPEC_2             ,
                    ZIP_CODE                ,
                    EXPOSURE                ,
                    EXP_RATING_MOD          ,
                    OTHER_RATING_MOD        ,
                    FILLER_94               ,
                    PREM_AMOUNT_1           ,
                    PREM_AMOUNT_2           ,
                    FILLER_112              ,
                    POLICY_ID               ,
                    VIN                     ,
                    COMPANY_USE             ,
                    RECORD_NUMBER           ,
                    OUTPUT_SWITCH
                ) VALUES (
                    SUM_COMPANY_ID          ,
                    SUM_TRANS_TYPE          ,
                    SUM_ACT_DATE            ,
                    SUM_POL_EFF_DATE        ,
                    SUM_TRAN_EFF_DATE       ,
                    SUM_POL_EXP_DATE        ,
                    SUM_STATE_CODE          ,
                    SUM_TOWN_CODE           ,
                    SUM_CAR_ID_CODE         ,
                    SUM_TYPE_OF_RISK        ,
                    SUM_ASL                 ,
                    SUM_SUBLINE             ,
                    SUM_CLASS_CODE          ,
                    SUM_LINE_SPEC_1         ,
                    SUM_PRODUCER_CODE       ,
                    SUM_LINE_SPEC_2         ,
                    SUM_ZIP_CODE            ,
                    SUM_EXPOSURE            ,
                    SUM_EXP_RATING_MOD      ,
                    SUM_OTHER_RATING_MOD    ,
                    SUM_FILLER_94           ,
                    SUM_PREM_AMOUNT_1       ,
                    SUM_PREM_AMOUNT_2       ,
                    SUM_FILLER_112          ,
                    SUM_POLICY_ID           ,
                    SUM_VIN                 ,
                    SUM_COMPANY_USE         ,
                    SUM_OUT_COUNT           ,
                    '1'
                );

                COMMIT;

                --
                v_OUTPUT_SUM_SW := 'N';

                -- Check if there are more records to summarize.
                IF NOT all_car_stat%NOTFOUND THEN
                    -- New summary record required.
                    v_NEW_SUM_SW := 'Y';
                END IF;

            END IF;

        END IF;

--390
        -- Check if a new summary record is required.
        IF v_NEW_SUM_SW = 'Y' THEN
            -- Set new summary flag to 'N' at start of new summary record.
            v_NEW_SUM_SW := 'N';

            -- Copy detail record to summary record.
            SUM_COMPANY_ID       := car_stat.COMPANY_ID;
            SUM_TRANS_TYPE       := car_stat.TRANS_TYPE;
            SUM_ACT_DATE         := car_stat.ACT_DATE;
            SUM_POL_EFF_DATE     := car_stat.POL_EFF_DATE;
            SUM_TRAN_EFF_DATE    := car_stat.TRAN_EFF_DATE;
            SUM_POL_EXP_DATE     := car_stat.POL_EXP_DATE;
            SUM_STATE_CODE       := car_stat.STATE_CODE;
            SUM_TOWN_CODE        := car_stat.TOWN_CODE;
            SUM_CAR_ID_CODE      := car_stat.CAR_ID_CODE;
            SUM_TYPE_OF_RISK     := car_stat.TYPE_OF_RISK;
            SUM_ASL              := car_stat.ASL;
            SUM_SUBLINE          := car_stat.SUBLINE;
            SUM_CLASS_CODE       := car_stat.CLASS_CODE;
            SUM_LINE_SPEC_1      := car_stat.LINE_SPEC_1;
            SUM_PRODUCER_CODE    := car_stat.PRODUCER_CODE;
            SUM_LINE_SPEC_2      := car_stat.LINE_SPEC_2;
            SUM_ZIP_CODE         := car_stat.ZIP_CODE;
            SUM_EXPOSURE         := car_stat.EXPOSURE;
            SUM_EXP_RATING_MOD   := car_stat.EXP_RATING_MOD;
            SUM_OTHER_RATING_MOD := car_stat.OTHER_RATING_MOD;
            SUM_FILLER_94        := car_stat.FILLER_94;
            SUM_PREM_AMOUNT_1    := car_stat.PREM_AMOUNT_1;
            SUM_PREM_AMOUNT_2    := car_stat.PREM_AMOUNT_2;
            SUM_FILLER_112       := car_stat.FILLER_112;
            SUM_POLICY_ID        := car_stat.POLICY_ID;
            SUM_VIN              := car_stat.VIN;
            SUM_COMPANY_USE      := car_stat.COMPANY_USE;

            -- Copy detail record key to summary key.
            KEY_SORT_POLICY      := car_stat.SORT_POLICY;
            KEY_SORT_ID_CODE     := car_stat.SORT_ID_CODE;
            KEY_SORT_SOURCE      := car_stat.SORT_SOURCE;
            KEY_SORT_CHG_DATE    := car_stat.SORT_CHG_DATE;
            KEY_SORT_RUN_DATE    := car_stat.SORT_RUN_DATE;
            KEY_SORT_OLD_NEW     := car_stat.SORT_OLD_NEW;
            KEY_SORT_ITEM        := car_stat.SORT_ITEM;
            KEY_SORT_SUBLINE     := car_stat.SORT_SUBLINE;
            KEY_SORT_20XX        := car_stat.SORT_20XX;
            KEY_SORT_ZONE        := car_stat.SORT_ZONE;
            KEY_SORT_COV         := car_stat.SORT_COV;
            KEY_SORT_COMMIS      := car_stat.SORT_COMMIS;
            KEY_SORT_EXPOSURE    := car_stat.SORT_EXPOSURE;
            KEY_SORT_NEW_FLAG_10 := car_stat.SORT_NEW_FLAG_10;

        END IF;



        EXIT WHEN all_car_stat%NOTFOUND;

    END LOOP;

    CLOSE all_car_stat;

    DBMS_OUTPUT.PUT_LINE ( '<< summarize_car_prem_data >> ' || 'Records in: ' || to_char(CAR_IN_COUNT) || '... Total in: ' || to_char(CAR_TOT_PREM_IN) || '...' );
    DBMS_OUTPUT.PUT_LINE ( '<< summarize_car_prem_data >> ' || 'Records out: ' || to_char(SUM_OUT_COUNT) || '... Total out: ' || to_char(SUM_TOT_PREM_OUT) || '...' );

--- --- ---

    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG || car_stat.SORT_POLICY);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

PROCEDURE summarize_car_prem_data_2010
IS

/*
    Summarize CAR premiums records that fall under the 2010 format.
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.SUMMARIZE_CAR_PREM_DATA_2010';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR all_car_stat
    IS
        SELECT *
        FROM RPT_POLICY_CAR_STAT A
        WHERE a.SORT_NEW_FLAG_10 = '*'
        ORDER BY a.SORT_POLICY, a.SORT_ID_CODE, a.SORT_SOURCE, a.SORT_CHG_DATE, a.SORT_RUN_DATE, a.SORT_OLD_NEW, a.SORT_ITEM, a.SORT_SUBLINE, a.SORT_20XX, a.SORT_ZONE, a.SORT_COV, a.SORT_COMMIS, a.SORT_EXPOSURE, a.SORT_NEW_FLAG_10,
                 SUBSTR(a.LINE_SPEC_1, 2, 11),
                 a.PREM_AMOUNT_1, a.PREM_AMOUNT_2;

    car_stat                                all_car_stat%ROWTYPE;

--- --- ---


--- CAR Stat fields
    SUM_COMPANY_ID                      VARCHAR2(3);     --1:3
    SUM_TRANS_TYPE                      VARCHAR2(2);     --4:5
    SUM_ACT_DATE                        VARCHAR2(2);     --6:7
    SUM_POL_EFF_DATE                    VARCHAR2(3);     --8:10
    SUM_TRAN_EFF_DATE                   VARCHAR2(3);     --11:13
    SUM_POL_EXP_DATE                    VARCHAR2(3);     --14:16
    SUM_STATE_CODE                      VARCHAR2(2);     --17:18
    SUM_TOWN_CODE                       VARCHAR2(3);     --19:21
    SUM_CAR_ID_CODE                     VARCHAR2(1);     --22
    SUM_TYPE_OF_RISK                    VARCHAR2(1);     --23
    SUM_ASL                             VARCHAR2(3);     --24:26
    SUM_SUBLINE                         VARCHAR2(3);     --27:29
    SUM_CLASS_CODE                      VARCHAR2(6);     --30:35
    SUM_LINE_SPEC_1                     VARCHAR2(25);    --36:60
    SUM_PRODUCER_CODE                   VARCHAR2(6);     --61:66
    SUM_LINE_SPEC_2                     VARCHAR2(5);     --67:71
    SUM_ZIP_CODE                        VARCHAR2(9);     --72:80
    SUM_EXPOSURE                        NUMBER(7);       --81:87
    SUM_EXP_RATING_MOD                  VARCHAR2(3);     --88:90
    SUM_OTHER_RATING_MOD                VARCHAR2(3);     --91:93
    SUM_FILLER_94                       VARCHAR2(2);     --94:95
    SUM_PREM_AMOUNT_1                   NUMBER(8);       --96:103
    SUM_PREM_AMOUNT_2                   NUMBER(8);       --104:111
    SUM_FILLER_112                      VARCHAR2(3);     --112:114
    SUM_POLICY_ID                       VARCHAR2(16);    --115:130
    SUM_VIN                             VARCHAR2(17);    --131:147
    SUM_COMPANY_USE                     VARCHAR2(3);     --148:150

--- Summary KEY fields
    KEY_SORT_POLICY                     VARCHAR2(10 BYTE);
    KEY_SORT_ID_CODE                    VARCHAR2(1 BYTE);
    KEY_SORT_SOURCE                     VARCHAR2(2 BYTE);
    KEY_SORT_CHG_DATE                   VARCHAR2(7 BYTE);
    KEY_SORT_RUN_DATE                   VARCHAR2(7 BYTE);
    KEY_SORT_OLD_NEW                    VARCHAR2(1 BYTE);
    KEY_SORT_ITEM                       VARCHAR2(3 BYTE);
    KEY_SORT_SUBLINE                    VARCHAR2(3 BYTE);
    KEY_SORT_20XX                       VARCHAR2(8 BYTE);
    KEY_SORT_ZONE                       VARCHAR2(1 BYTE);
    KEY_SORT_COV                        NUMBER(2);
    KEY_SORT_COMMIS                     NUMBER(3,3);
    KEY_SORT_EXPOSURE                   NUMBER(7);
    KEY_SORT_NEW_FLAG_10                VARCHAR2(1 BYTE);



--- Summary count and total variables.
    CAR_IN_COUNT        NUMBER(6);
    SUM_OUT_COUNT       NUMBER(6);

    CAR_TOT_PREM_IN     NUMBER(11,2);
    SUM_TOT_PREM_OUT    NUMBER(11,2);


--- Procedural variables
    v_NEW_SUM_SW        VARCHAR2(1);
    v_OUTPUT_SUM_SW     VARCHAR2(1);
    v_DET_SDIP          VARCHAR2(2);
    v_SORT_SDIP         VARCHAR2(2);
    v_DET_CLASS_CODE    VARCHAR2(6);

    v_TEMP_BI_CODE      VARCHAR2(2);
    v_TEMP_PD_CODE      VARCHAR2(2);
    v_TEMP_MP_CODE      VARCHAR2(2);
    v_TEMP_U1_CODE      VARCHAR2(2);
    v_TEMP_U2_CODE      VARCHAR2(2);



--- --- ---

BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'summarize_car_prem_data_2010_insert';

    OPEN all_car_stat;


    CAR_IN_COUNT := 0;
    SUM_OUT_COUNT := 0;

    CAR_TOT_PREM_IN := 0;
    SUM_TOT_PREM_OUT := 0;

    v_NEW_SUM_SW := 'Y';
    v_OUTPUT_SUM_SW := 'N';

    v_DET_CLASS_CODE := '      ';
    v_DET_SDIP := '  ';
    v_SORT_SDIP := '  ';




    LOOP
        -- Reset temporary variables.
        v_TEMP_BI_CODE := '  ';
        v_TEMP_PD_CODE := '  ';
        v_TEMP_MP_CODE := '  ';
        v_TEMP_U1_CODE := '  ';
        v_TEMP_U2_CODE := '  ';


        -- Try to read next record.
        FETCH all_car_stat INTO car_stat;

        -- Check if there is a record to process.
        IF all_car_stat%NOTFOUND THEN
            -- No more records to process. Output current summary record, no new record after.
            v_NEW_SUM_SW := 'N';
            v_OUTPUT_SUM_SW := 'Y';
        ELSE
            -- Add new record to count and total.
            CAR_IN_COUNT := CAR_IN_COUNT + 1;

            CAR_TOT_PREM_IN := CAR_TOT_PREM_IN + car_stat.PREM_AMOUNT_1;
            CAR_TOT_PREM_IN := CAR_TOT_PREM_IN + car_stat.PREM_AMOUNT_2;


            v_DET_CLASS_CODE := SUBSTR(car_stat.CLASS_CODE, 1, 4) || SUBSTR(car_stat.SORT_20XX, 5, 2);

            -- Added this section 11/15/2017, company-specific coverages should not be summarized.  --ASI/RCrawford
            -- Bypass summarization for these records; need to flag this for both incoming record and current summary record.
            IF ( car_stat.CLASS_CODE = '998000' AND car_stat.TYPE_OF_RISK = '9' )
             OR ( SUM_CLASS_CODE = '998000' and SUM_TYPE_OF_RISK = '9' )
            THEN

                v_NEW_SUM_SW := 'B';  -- Bypass next section
                v_OUTPUT_SUM_SW := 'Y';  -- Flag current record for output.

            END IF;
            -- End of 11/15/2017 change.




            -- Check that a new summary record isn't required.
            -- Check that there is a record to process.
            IF v_NEW_SUM_SW = 'N' AND NOT all_car_stat%NOTFOUND THEN
                -- Check if detail record key matches summary record key.
                IF car_stat.SORT_POLICY    = KEY_SORT_POLICY
                 AND car_stat.SORT_ID_CODE  = KEY_SORT_ID_CODE
                 AND car_stat.SORT_SOURCE   = KEY_SORT_SOURCE
                 AND car_stat.SORT_CHG_DATE = KEY_SORT_CHG_DATE
                 AND car_stat.SORT_RUN_DATE = KEY_SORT_RUN_DATE
                 AND car_stat.SORT_OLD_NEW  = KEY_SORT_OLD_NEW
                 AND car_stat.SORT_ITEM     = KEY_SORT_ITEM
                 AND car_stat.SORT_SUBLINE  = KEY_SORT_SUBLINE
                 AND SUBSTR(car_stat.SORT_20XX, 1, 4) = SUBSTR(KEY_SORT_20XX, 1, 4)
                 AND (    ( SUBSTR(car_stat.SORT_20XX, 5, 2) = SUBSTR(KEY_SORT_20XX, 5, 2)
                          AND car_stat.SORT_COMMIS   = KEY_SORT_COMMIS
                          AND car_stat.SORT_EXPOSURE = KEY_SORT_EXPOSURE )
                     OR ( car_stat.SORT_SOURCE = 'PM' )
                     OR ( SUBSTR(KEY_SORT_20XX, 7, 2) = '17'
                          AND SUBSTR(car_stat.LINE_SPEC_1, 2, 2) = '06' )
                     OR ( SUBSTR(car_stat.SORT_20XX, 7, 2) = '13'
                          AND SUBSTR(car_stat.LINE_SPEC_1, 5, 3) = '092' )
                        -- Force towing coverage to summarize.
                     OR ( car_stat.SORT_COV = 84 ) )
                THEN
                    -- Keys match, try to summarize.
--200
                    IF SUBSTR(KEY_SORT_20XX, 7, 2) = '17' AND SUBSTR(car_stat.LINE_SPEC_1, 2, 2) = '06' THEN
                        -- Copy OTC code from detail record to summary record.
                        SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 1)
                                        || SUBSTR(car_stat.LINE_SPEC_1, 2, 3)
                                        || SUBSTR(SUM_LINE_SPEC_1, 5, 21);
                    END IF;


                    -- Need to recover PM SDIP points, Only present on some records.
                    IF car_stat.SORT_SOURCE = 'PM'
                     AND SUBSTR(KEY_SORT_20XX, 5, 2) = '00'
                     AND SUBSTR(car_stat.SORT_20XX, 5, 2) <> '00'
                    THEN
                        -- Fix KEY class code.
                        KEY_SORT_20XX := SUBSTR(KEY_SORT_20XX, 1, 4)
                                      || SUBSTR(car_stat.SORT_20XX, 5, 2)
                                      || SUBSTR(KEY_SORT_20XX, 7, 2);
                        -- Fix class code on summary record.
                        SUM_CLASS_CODE := SUBSTR(SUM_CLASS_CODE, 1, 4) || SUBSTR(car_stat.SORT_20XX, 5, 2);
                    END IF;


--225
                    -- Liability record.
                    IF car_stat.ASL IN ('192', '194') THEN

                        -- Copy value for BI Limit code from detail record to temporary variable, allows for following statement.
                        v_TEMP_BI_CODE := SUBSTR(car_stat.LINE_SPEC_1, 2, 2);

                        -- Replace blank BI Limit code from detail record for optional BI coverage with the code from the summary record.
                        IF car_stat.SORT_COV = 17 AND SUBSTR(car_stat.LINE_SPEC_1, 2, 2) = '  ' THEN
                            v_TEMP_BI_CODE := SUBSTR(SUM_LINE_SPEC_1, 2, 2);
                        END IF;

                        -- Check for BI Limit code for detail record.
                        IF v_TEMP_BI_CODE <> '  ' THEN
                            IF SUBSTR(SUM_LINE_SPEC_1, 2, 2) IN ('  ', '04', '01', '03')
                             OR car_stat.SORT_COV = 17
                             OR SUBSTR(car_stat.SORT_20XX, 7, 2) IN ('01', '02', '03', '04')
                            THEN
                                -- On PM SDIP records the limit code is not reliable - keep prior code.
                                IF car_stat.SORT_SOURCE = 'PA'
                                 OR ( car_stat.SORT_SOURCE = 'PM' AND SUBSTR(car_stat.SORT_20XX, 7, 2) NOT IN ('02', '04') )
                                THEN
                                    SUM_LINE_SPEC_1 := SUBSTR(car_stat.LINE_SPEC_1, 1, 1)
                                                    || v_TEMP_BI_CODE --SUBSTR(car_stat.LINE_SPEC_1, 2, 2)
                                                    || SUBSTR(SUM_LINE_SPEC_1, 4, 22);
                                END IF;

                                -- Add BI premium from detail record to summary record.
                                SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;

                            ELSE
                                -- Need to write the current summary record to table.
                                v_OUTPUT_SUM_SW := 'Y';
                            END IF;

                        ELSE

                            -- Check for PD Limit code on detail record.
                            IF SUBSTR(car_stat.LINE_SPEC_1, 4, 2) <> '  ' THEN
                                -- If PD Limit code is blank on summary record, update with the code from the detail record.
                                IF SUBSTR(SUM_LINE_SPEC_1, 4, 2) = '  '
                                 OR SUBSTR(car_stat.LINE_SPEC_1, 4, 2) = SUBSTR(SUM_LINE_SPEC_1, 4, 2)
                                 OR SUBSTR(car_stat.SORT_20XX, 7, 2) IN ('05', '06')
                                THEN
                                    IF car_stat.SORT_SOURCE = 'PA'
                                     OR ( car_stat.SORT_SOURCE = 'PM' AND SUBSTR(car_stat.SORT_20XX, 7, 2) NOT IN ('06') )
                                    THEN
                                        SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 3)
                                                        || SUBSTR(car_stat.LINE_SPEC_1, 4, 2)
                                                        || SUBSTR(SUM_LINE_SPEC_1, 6, 20);
                                    END IF;

                                    -- Add PD premium from detail record to summary record.
                                    SUM_PREM_AMOUNT_2 := SUM_PREM_AMOUNT_2 + car_stat.PREM_AMOUNT_2;

                                ELSE
                                    -- Need to write the current summary record to table.
                                    v_OUTPUT_SUM_SW := 'Y';
                                END IF;

                            ELSE

                                -- Check for MP Limit code on detail record.
                                IF SUBSTR(car_stat.LINE_SPEC_1, 6, 2) <> '  ' THEN
                                    -- Check if MP Limit code is blank on summary record.
                                    IF SUBSTR(SUM_LINE_SPEC_1, 6, 2) = '  '
                                     OR SUBSTR(car_stat.SORT_20XX, 7, 2) IN ('07')
                                    THEN
                                        -- Update summary record with MP Limit code from the detail record.
                                        SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 5)
                                                        || SUBSTR(car_stat.LINE_SPEC_1, 6, 2)
                                                        || SUBSTR(SUM_LINE_SPEC_1, 8, 18);

                                        -- Add MP premium from detail record to summary record.
                                        SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;
                                    ELSE
                                        -- Need to write the current summary record to table.
                                        v_OUTPUT_SUM_SW := 'Y';
                                    END IF;

                                ELSE

                                    -- Check for U1 Limit code on detail record.
                                    IF SUBSTR(car_stat.LINE_SPEC_1, 8, 2) <> '  ' THEN
                                        -- Check if U1 Limit code is blank on summary record.
                                        IF SUBSTR(SUM_LINE_SPEC_1, 8, 2) = '  '
                                         OR SUBSTR(car_stat.SORT_20XX, 7, 2) IN ('08')
                                        THEN
                                            --Update summary record with the U1 Limit code from the detail record.
                                            SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 7)
                                                            || SUBSTR(car_stat.LINE_SPEC_1, 8, 2)
                                                            || SUBSTR(SUM_LINE_SPEC_1, 10, 16);

                                            -- Add U1 premium from detail record to summary record.
                                            SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;

                                            -- Check if U2 Limit code is blank on summary record.
                                            IF SUBSTR(SUM_LINE_SPEC_1, 10, 2) = '  '
                                             OR SUBSTR(car_stat.SORT_20XX, 7, 2) IN ('09')
                                            THEN
                                                --Update summary record with the U2 Limit code from the detail record - this allows forcing a U2 code of '04' if present.
                                                SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 9)
                                                                || SUBSTR(car_stat.LINE_SPEC_1, 10, 2)
                                                                || SUBSTR(SUM_LINE_SPEC_1, 12, 14);
                                            END IF;

                                        ELSE
                                            -- Need to write the current summary record to table.
                                            v_OUTPUT_SUM_SW := 'Y';
                                        END IF;

                                    ELSE

                                        -- Check for U2 Limit code on detail record.
                                        IF SUBSTR(car_stat.LINE_SPEC_1, 10, 2) <> '  ' THEN
                                            -- Check if U2 Limit code is blank on summary record.
                                            -- Override a forced U2 Limit code of '04' if necessary.
                                            IF SUBSTR(SUM_LINE_SPEC_1, 10, 2) = '  '
                                             OR SUBSTR(SUM_LINE_SPEC_1, 10, 2) = '04'
                                             OR SUBSTR(car_stat.SORT_20XX, 7, 2) IN ('09')
                                            THEN
                                                --Update summary record with the U2 Limit code from the detail record.
                                                SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 9)
                                                                || SUBSTR(car_stat.LINE_SPEC_1, 10, 2)
                                                                || SUBSTR(SUM_LINE_SPEC_1, 12, 14);

                                                -- Add U2 premium from detail record to summary record.
                                                SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;
                                            ELSE
                                                -- Need to write the current summary record to table.
                                                v_OUTPUT_SUM_SW := 'Y';
                                            END IF;

                                        ELSE

                                            -- Need to write the current summary record to table.
                                            v_OUTPUT_SUM_SW := 'Y';

                                        END IF;

                                    END IF;

                                END IF;

                            END IF;

                        END IF;

                    END IF;


--250
                    -- Physical Damage record.
                    IF car_stat.ASL IN ('211', '212') THEN

                        IF SUBSTR(car_stat.SORT_20XX, 7, 2) = '13' THEN
                            -- Collision SDIP.
                            -- Add Collision premium from detail record to summary record.
                            SUM_PREM_AMOUNT_2 := SUM_PREM_AMOUNT_2 + car_stat.PREM_AMOUNT_2;
                        ELSE
                            IF SUBSTR(car_stat.SORT_20XX, 7, 2) = '17' THEN
                                -- OTC/CMP SDIP.
                                -- Add OTC premium from detail record to summary record.
                                SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;
                            ELSE


                                -- Check if OTC code is blank on detail record.
                                IF SUBSTR(car_stat.LINE_SPEC_1, 2, 3) = '   ' THEN
                                    -- Collision record.
                                    -- Check that the Collision coverage on the detail record is not blank.
                                    IF SUBSTR(car_stat.LINE_SPEC_1, 5, 3) <> '   ' THEN
                                        -- Check if the Collision coverage on the summary record is blank.
                                        IF SUBSTR(SUM_LINE_SPEC_1, 5, 3) = '   ' THEN
                                            -- Update the Collision coverage on the summary record with the coverage from the detail record.
                                            SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 4)
                                                            || SUBSTR(car_stat.LINE_SPEC_1, 5, 3)
                                                            || SUBSTR(SUM_LINE_SPEC_1, 8, 18);

                                            -- Add Collision premium from detail record to summary record.
                                            SUM_PREM_AMOUNT_2 := SUM_PREM_AMOUNT_2 + car_stat.PREM_AMOUNT_2;
                                        ELSE
                                            -- Need to write the current summary record to table.
                                            v_OUTPUT_SUM_SW := 'Y';
                                        END IF;
                                    END IF;

                                ELSE
                                    -- OTC record.
                                    -- Check if OTC code is blank on summary record.
                                    IF SUBSTR(SUM_LINE_SPEC_1, 2, 3) = '   ' THEN
                                        -- Update summary OTC & Anti-Theft codes from detail record.
                                        SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 1)
                                                        || SUBSTR(car_stat.LINE_SPEC_1, 2, 3)
                                                        || SUBSTR(SUM_LINE_SPEC_1, 5, 13)
                                                        || SUBSTR(car_stat.LINE_SPEC_1, 18, 1)
                                                        || SUBSTR(SUM_LINE_SPEC_1, 19, 7);

                                        -- Add OTC premium from detail record to summary record.
                                        SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;
                                    ELSE
                                        -- Summarize towing coverage into summary records without included towing.
                                        --IF SUBSTR(SUM_LINE_SPEC_1, 2, 3) IN ('035', '037', '039', '023', '135', '137', '139', '123', '031', '033', '131', '133', '004', '104')    -- prior logic from before 07/2016 Towing changes.
                                        IF SUBSTR(SUM_LINE_SPEC_1, 2, 3) IN ('035', '037', '039', '023', '004', '135', '137', '139', '123', '104', --OTC, Excluded Towing
                                                                            '234', '236', '238', '222', '264', '334', '336', '338', '322', '364', --OTC, $50 Towing
                                                                            '434', '436', '438', '422', '464', '534', '536', '538', '522', '564', --OTC, $100 Towing
                                                                                                                    '031', '033', '131', '133') --Unknown
                                         AND SUBSTR(car_stat.LINE_SPEC_1, 2, 3) IN ('081', '082', '080') --Towing coverage
                                        THEN
                                            -- Add OTC premium from detail record to summary record.
                                            SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;

                                        ELSE
                                            -- Need to write the current summary record to table.
                                            v_OUTPUT_SUM_SW := 'Y';
                                        END IF;
                                    END IF;
                                END IF;

                            END IF;
                        END IF;
                    -- End of Physical Damage section.
                    END IF;


--275
                    -- No-Fault record.
                    IF car_stat.ASL IN ('191') THEN
                        IF SUBSTR(car_stat.SORT_20XX, 7, 2) IN ('10', '11') THEN
                            -- Add PIP premium from detail record to summary record.
                            SUM_PREM_AMOUNT_1 := SUM_PREM_AMOUNT_1 + car_stat.PREM_AMOUNT_1;
                        ELSE
                            -- Need to write the current summary record to table.
                            v_OUTPUT_SUM_SW := 'Y';
                        END IF;
                    END IF;



                    -- Else.
                    IF car_stat.ASL NOT IN ('192', '194', '211', '212', '191') THEN
                        -- Do not summarize.
                        -- Need to write the current summary record to table.
                        v_OUTPUT_SUM_SW := 'Y';
                    END IF;


                ELSE

                    -- Record keys do not match, need to write the current summary record to table.
                    v_OUTPUT_SUM_SW := 'Y';

                END IF;

            END IF;

        END IF;


--300
        -- Check that a new summary record isn't required.
        -- Check if the current summary record needs to be written to table.
        --  IF v_NEW_SUM_SW = 'N' AND v_OUTPUT_SUM_SW = 'Y' THEN
        IF v_NEW_SUM_SW IN ('N','B') AND v_OUTPUT_SUM_SW = 'Y' THEN        -- Changed 11/15/2017, include summarization bypass condition.  --ASI/RCrawford

            -- Check premium amounts to see if records have cancelled out.
            IF SUM_PREM_AMOUNT_1 = 0 AND SUM_PREM_AMOUNT_2 = 0 THEN
                -- Records have cancelled out.
                v_OUTPUT_SUM_SW := 'N';

                -- Check if there are more records to summarize.
                IF NOT all_car_stat%NOTFOUND THEN
                    -- New summary record required.
                    v_NEW_SUM_SW := 'Y';
                END IF;

            ELSE

                -- Liability summary record.
                IF SUM_ASL IN ('192', '194') THEN
--325
                    -- Set any blank Limit codes to zeroes.
                    v_TEMP_BI_CODE := SUBSTR(SUM_LINE_SPEC_1, 2, 2);
                    IF v_TEMP_BI_CODE = '  ' THEN
                        v_TEMP_BI_CODE := '00';
                    END IF;

                    v_TEMP_PD_CODE := SUBSTR(SUM_LINE_SPEC_1, 4, 2);
                    IF v_TEMP_PD_CODE = '  ' THEN
                        v_TEMP_PD_CODE := '00';
                    END IF;

                    v_TEMP_MP_CODE := SUBSTR(SUM_LINE_SPEC_1, 6, 2);
                    IF v_TEMP_MP_CODE = '  ' THEN
                        v_TEMP_MP_CODE := '00';
                    END IF;

                    v_TEMP_U1_CODE := SUBSTR(SUM_LINE_SPEC_1, 8, 2);
                    IF v_TEMP_U1_CODE = '  ' THEN
                        v_TEMP_U1_CODE := '00';
                    END IF;

                    v_TEMP_U2_CODE := SUBSTR(SUM_LINE_SPEC_1, 10, 2);
                    IF v_TEMP_U2_CODE = '  ' THEN
                        v_TEMP_U2_CODE := '00';
                    END IF;

                    SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 1)
                                    || v_TEMP_BI_CODE
                                    || v_TEMP_PD_CODE
                                    || v_TEMP_MP_CODE
                                    || v_TEMP_U1_CODE
                                    || v_TEMP_U2_CODE
                                    || SUBSTR(SUM_LINE_SPEC_1, 12, 14);

                END IF;



                -- Physical Damage summary record.
                IF SUM_ASL IN ('211', '212') THEN
--350
                    -- Check for miscellaneous OTC coverages.
                    IF SUBSTR(SUM_LINE_SPEC_1, 2, 2) IN ('08', '05') THEN
                        SUM_CLASS_CODE := SUBSTR(SUM_CLASS_CODE, 1, 4) || '00';
                    END IF;


                    -- Check for blank OTC code.
                    IF SUBSTR(SUM_LINE_SPEC_1, 2, 3) = '   ' THEN
                        -- Check Collision code.
                        IF SUBSTR(SUM_LINE_SPEC_1, 5, 3) = '099' THEN
                            -- Blank specific fields on summary record.
                             -- Vehicle Year (removed 1995), Symbol, Pre-Insurance Inspection.
                            SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 7)
                                            || '     '
                                            || SUBSTR(SUM_LINE_SPEC_1, 13, 13);
                             -- Exposure
                            SUM_EXPOSURE := 0;
                        END IF;

                    ELSE

                        -- Check for blank or "All Other" Collision codes.
                        IF SUBSTR(SUM_LINE_SPEC_1, 5, 3) IN ('   ', '099') THEN
                            -- Check if OTC code is within specific miscellaneous coverages, '080' - '089'.
                            IF SUBSTR(SUM_LINE_SPEC_1, 2, 3) > '08 ' AND SUBSTR(SUM_LINE_SPEC_1, 2, 3) < '09 ' THEN
                                -- Blank specific fields on summary record.
                                 -- Vehicle Year (removed 1995), Symbol, Pre-Insurance Inspection, Anti-Theft.
                                SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 7)
                                                || '     '
                                                || SUBSTR(SUM_LINE_SPEC_1, 13, 5)
                                                || ' '
                                                || SUBSTR(SUM_LINE_SPEC_1, 19, 7);
                                 -- Exposure
                                SUM_EXPOSURE := 0;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;


--380
            -- Check if writing current summary record to table.
            IF v_OUTPUT_SUM_SW = 'Y' THEN
                -- Update output total and count.
                SUM_TOT_PREM_OUT := SUM_TOT_PREM_OUT + SUM_PREM_AMOUNT_1;
                SUM_TOT_PREM_OUT := SUM_TOT_PREM_OUT + SUM_PREM_AMOUNT_2;
                SUM_OUT_COUNT := SUM_OUT_COUNT + 1;


                IF SUM_ASL = '194' AND SUBSTR(SUM_LINE_SPEC_1, 1, 1) = '2' THEN
                    IF SUBSTR(SUM_LINE_SPEC_1, 2, 2) = SUBSTR(SUM_LINE_SPEC_1, 4, 2) THEN
                        SUM_LINE_SPEC_1 := SUBSTR(SUM_LINE_SPEC_1, 1, 3) || '00' || SUBSTR(SUM_LINE_SPEC_1, 6, 20);
                    END IF;
                END IF;

                -- Write summary record to table.
                INSERT INTO RPT_POLICY_CAR_STAT_SUM1 (
                    COMPANY_ID              ,
                    TRANS_TYPE              ,
                    ACT_DATE                ,
                    POL_EFF_DATE            ,
                    TRAN_EFF_DATE           ,
                    POL_EXP_DATE            ,
                    STATE_CODE              ,
                    TOWN_CODE               ,
                    CAR_ID_CODE             ,
                    TYPE_OF_RISK            ,
                    ASL                     ,
                    SUBLINE                 ,
                    CLASS_CODE              ,
                    LINE_SPEC_1             ,
                    PRODUCER_CODE           ,
                    LINE_SPEC_2             ,
                    ZIP_CODE                ,
                    EXPOSURE                ,
                    EXP_RATING_MOD          ,
                    OTHER_RATING_MOD        ,
                    FILLER_94               ,
                    PREM_AMOUNT_1           ,
                    PREM_AMOUNT_2           ,
                    FILLER_112              ,
                    POLICY_ID               ,
                    VIN                     ,
                    COMPANY_USE             ,
                    RECORD_NUMBER           ,
                    OUTPUT_SWITCH
                ) VALUES (
                    SUM_COMPANY_ID          ,
                    SUM_TRANS_TYPE          ,
                    SUM_ACT_DATE            ,
                    SUM_POL_EFF_DATE        ,
                    SUM_TRAN_EFF_DATE       ,
                    SUM_POL_EXP_DATE        ,
                    SUM_STATE_CODE          ,
                    SUM_TOWN_CODE           ,
                    SUM_CAR_ID_CODE         ,
                    SUM_TYPE_OF_RISK        ,
                    SUM_ASL                 ,
                    SUM_SUBLINE             ,
                    SUM_CLASS_CODE          ,
                    SUM_LINE_SPEC_1         ,
                    SUM_PRODUCER_CODE       ,
                    SUM_LINE_SPEC_2         ,
                    SUM_ZIP_CODE            ,
                    SUM_EXPOSURE            ,
                    SUM_EXP_RATING_MOD      ,
                    SUM_OTHER_RATING_MOD    ,
                    SUM_FILLER_94           ,
                    SUM_PREM_AMOUNT_1       ,
                    SUM_PREM_AMOUNT_2       ,
                    SUM_FILLER_112          ,
                    SUM_POLICY_ID           ,
                    SUM_VIN                 ,
                    SUM_COMPANY_USE         ,
                    SUM_OUT_COUNT           ,
                    '1'
                );

                COMMIT;

                --
                v_OUTPUT_SUM_SW := 'N';

                -- Check if there are more records to summarize.
                IF NOT all_car_stat%NOTFOUND THEN
                    -- New summary record required.
                    v_NEW_SUM_SW := 'Y';
                END IF;

            END IF;

        END IF;

--390
        -- Check if a new summary record is required.
        IF v_NEW_SUM_SW = 'Y' THEN
            -- Set new summary flag to 'N' at start of new summary record.
            v_NEW_SUM_SW := 'N';

            -- Copy detail record to summary record.
            SUM_COMPANY_ID       := car_stat.COMPANY_ID;
            SUM_TRANS_TYPE       := car_stat.TRANS_TYPE;
            SUM_ACT_DATE         := car_stat.ACT_DATE;
            SUM_POL_EFF_DATE     := car_stat.POL_EFF_DATE;
            SUM_TRAN_EFF_DATE    := car_stat.TRAN_EFF_DATE;
            SUM_POL_EXP_DATE     := car_stat.POL_EXP_DATE;
            SUM_STATE_CODE       := car_stat.STATE_CODE;
            SUM_TOWN_CODE        := car_stat.TOWN_CODE;
            SUM_CAR_ID_CODE      := car_stat.CAR_ID_CODE;
            SUM_TYPE_OF_RISK     := car_stat.TYPE_OF_RISK;
            SUM_ASL              := car_stat.ASL;
            SUM_SUBLINE          := car_stat.SUBLINE;
            --SUM_CLASS_CODE       := car_stat.CLASS_CODE;
             SUM_CLASS_CODE       := v_DET_CLASS_CODE;
            SUM_LINE_SPEC_1      := car_stat.LINE_SPEC_1;
            SUM_PRODUCER_CODE    := car_stat.PRODUCER_CODE;
            SUM_LINE_SPEC_2      := car_stat.LINE_SPEC_2;
            SUM_ZIP_CODE         := car_stat.ZIP_CODE;
            SUM_EXPOSURE         := car_stat.EXPOSURE;
            SUM_EXP_RATING_MOD   := car_stat.EXP_RATING_MOD;
            SUM_OTHER_RATING_MOD := car_stat.OTHER_RATING_MOD;
            SUM_FILLER_94        := car_stat.FILLER_94;
            SUM_PREM_AMOUNT_1    := car_stat.PREM_AMOUNT_1;
            SUM_PREM_AMOUNT_2    := car_stat.PREM_AMOUNT_2;
            SUM_FILLER_112       := car_stat.FILLER_112;
            SUM_POLICY_ID        := car_stat.POLICY_ID;
            SUM_VIN              := car_stat.VIN;
            SUM_COMPANY_USE      := car_stat.COMPANY_USE;

            -- Copy detail record key to summary key.
            KEY_SORT_POLICY      := car_stat.SORT_POLICY;
            KEY_SORT_ID_CODE     := car_stat.SORT_ID_CODE;
            KEY_SORT_SOURCE      := car_stat.SORT_SOURCE;
            KEY_SORT_CHG_DATE    := car_stat.SORT_CHG_DATE;
            KEY_SORT_RUN_DATE    := car_stat.SORT_RUN_DATE;
            KEY_SORT_OLD_NEW     := car_stat.SORT_OLD_NEW;
            KEY_SORT_ITEM        := car_stat.SORT_ITEM;
            KEY_SORT_SUBLINE     := car_stat.SORT_SUBLINE;
            KEY_SORT_20XX        := car_stat.SORT_20XX;
            KEY_SORT_ZONE        := car_stat.SORT_ZONE;
            KEY_SORT_COV         := car_stat.SORT_COV;
            KEY_SORT_COMMIS      := car_stat.SORT_COMMIS;
            KEY_SORT_EXPOSURE    := car_stat.SORT_EXPOSURE;
            KEY_SORT_NEW_FLAG_10 := car_stat.SORT_NEW_FLAG_10;

        END IF;



        EXIT WHEN all_car_stat%NOTFOUND;

    END LOOP;

    CLOSE all_car_stat;

    DBMS_OUTPUT.PUT_LINE ( '<< summarize_car_prem_data_2010 >> ' || 'Records in: ' || to_char(CAR_IN_COUNT) || '... Total in: ' || to_char(CAR_TOT_PREM_IN) || '...' );
    DBMS_OUTPUT.PUT_LINE ( '<< summarize_car_prem_data_2010 >> ' || 'Records out: ' || to_char(SUM_OUT_COUNT) || '... Total out: ' || to_char(SUM_TOT_PREM_OUT) || '...' );

--- --- ---

    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG || car_stat.SORT_POLICY);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

PROCEDURE summarize_car_prem_summ
IS

/*
    Cancel out CAR premiums records that summarize to $0 premium.
    Generate summary data for updating the IXPOLVIN table.
*/


    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.SUMMARIZE_CAR_PREM_SUMM';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


----------------------------------------------------------------------------------------------------


    CURSOR all_sum1_stat_a
    IS
        SELECT *
        FROM RPT_POLICY_CAR_STAT_SUM1 a1
        WHERE a1.OUTPUT_SWITCH <> '0'
        ORDER BY a1.SUBLINE,
                 a1.TRANS_TYPE,
                 a1.POLICY_ID,
                 a1.COMPANY_USE,
                 a1.CLASS_CODE,
                 a1.LINE_SPEC_1,
                 a1.RECORD_NUMBER;

    sum1_stat_a         all_sum1_stat_a%ROWTYPE;


    CURSOR all_sum1_stat_b
    IS
        SELECT *
        FROM RPT_POLICY_CAR_STAT_SUM1 b1
        WHERE b1.OUTPUT_SWITCH <> '0'
        ORDER BY b1.SUBLINE,
                 b1.TRANS_TYPE,
                 b1.POLICY_ID,
                 b1.COMPANY_USE,
                 b1.CLASS_CODE,
                 b1.LINE_SPEC_1,
                 b1.RECORD_NUMBER;

    sum1_stat_b             all_sum1_stat_b%ROWTYPE;


----------------------------------------------------------------------------------------------------


--- Procedural Variables
    v_RUN_NUMBER            NUMBER(1);


----------------------------------------------------------------------------------------------------


BEGIN

    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'Summarize_CAR_Prem_Summ Loop';

    v_RUN_NUMBER := 1;


    LOOP

        EXIT WHEN v_RUN_NUMBER > 2;

        OPEN all_sum1_stat_a;
        OPEN all_sum1_stat_b;

        FETCH all_sum1_stat_b INTO sum1_stat_b;

        IF all_sum1_stat_b%NOTFOUND THEN
           --DBMS_OUTPUT.PUT_LINE ('ERROR: NO DATA IN INPUT TABLE ON RUN ' || TO_CHAR(v_RUN_NUMBER) || '.');
            rptviewer.rpt_util.write_error (V_PROCNAME, 'ERROR: NO DATA IN INPUT TABLE ON RUN ' || TO_CHAR(v_RUN_NUMBER) || '.');

        ELSE

            LOOP

                FETCH all_sum1_stat_a INTO sum1_stat_a;
                FETCH all_sum1_stat_b INTO sum1_stat_b;

                EXIT WHEN all_sum1_stat_b%NOTFOUND;



                IF   sum1_stat_a.COMPANY_ID       = sum1_stat_b.COMPANY_ID
                 AND sum1_stat_a.TRANS_TYPE       = sum1_stat_b.TRANS_TYPE
                 AND sum1_stat_a.ACT_DATE         = sum1_stat_b.ACT_DATE
                 AND sum1_stat_a.POL_EFF_DATE     = sum1_stat_b.POL_EFF_DATE
                 AND sum1_stat_a.TRAN_EFF_DATE    = sum1_stat_b.TRAN_EFF_DATE
                 AND sum1_stat_a.POL_EXP_DATE     = sum1_stat_b.POL_EXP_DATE
                 AND sum1_stat_a.STATE_CODE       = sum1_stat_b.STATE_CODE
                 AND sum1_stat_a.TOWN_CODE        = sum1_stat_b.TOWN_CODE
                 AND sum1_stat_a.CAR_ID_CODE      = sum1_stat_b.CAR_ID_CODE
                 AND sum1_stat_a.TYPE_OF_RISK     = sum1_stat_b.TYPE_OF_RISK
                 AND sum1_stat_a.ASL              = sum1_stat_b.ASL
                 AND sum1_stat_a.SUBLINE          = sum1_stat_b.SUBLINE
                 AND sum1_stat_a.CLASS_CODE       = sum1_stat_b.CLASS_CODE
                 AND sum1_stat_a.LINE_SPEC_1      = sum1_stat_b.LINE_SPEC_1
                 AND sum1_stat_a.PRODUCER_CODE    = sum1_stat_b.PRODUCER_CODE
                 AND sum1_stat_a.LINE_SPEC_2      = sum1_stat_b.LINE_SPEC_2
                 AND sum1_stat_a.ZIP_CODE         = sum1_stat_b.ZIP_CODE
                 AND sum1_stat_a.EXP_RATING_MOD   = sum1_stat_b.EXP_RATING_MOD
                 AND sum1_stat_a.OTHER_RATING_MOD = sum1_stat_b.OTHER_RATING_MOD
                 AND sum1_stat_a.FILLER_94        = sum1_stat_b.FILLER_94
                 AND sum1_stat_a.FILLER_112       = sum1_stat_b.FILLER_112
                 AND sum1_stat_a.POLICY_ID        = sum1_stat_b.POLICY_ID
                 AND sum1_stat_a.VIN              = sum1_stat_b.VIN
                 AND sum1_stat_a.COMPANY_USE      = sum1_stat_b.COMPANY_USE
                 AND sum1_stat_a.EXPOSURE      + sum1_stat_b.EXPOSURE      = 0
                 AND sum1_stat_a.PREM_AMOUNT_1 + sum1_stat_b.PREM_AMOUNT_1 = 0
                 AND sum1_stat_a.PREM_AMOUNT_2 + sum1_stat_b.PREM_AMOUNT_2 = 0
                THEN

                    UPDATE RPT_POLICY_CAR_STAT_SUM1
                        SET OUTPUT_SWITCH = '0'
                        WHERE RECORD_NUMBER = sum1_stat_a.RECORD_NUMBER
                        AND COMPANY_USE   = sum1_stat_a.COMPANY_USE;

                    UPDATE RPT_POLICY_CAR_STAT_SUM1
                        SET OUTPUT_SWITCH = '0'
                        WHERE RECORD_NUMBER = sum1_stat_b.RECORD_NUMBER
                        AND COMPANY_USE   = sum1_stat_b.COMPANY_USE;

                    FETCH all_sum1_stat_a INTO sum1_stat_a;
                    FETCH all_sum1_stat_b INTO sum1_stat_b;

                END IF;


                EXIT WHEN all_sum1_stat_b%NOTFOUND;


            END LOOP;

        END IF;


        CLOSE all_sum1_stat_a;
        CLOSE all_sum1_stat_b;

        v_RUN_NUMBER := v_RUN_NUMBER + 1;


    END LOOP;


----------------------------------------------------------------------------------------------------


    v_err_loc := 'Summarize_CAR_Prem_Summ Insert';


--- Insert into final summary table.

    INSERT INTO RPT_POLICY_CAR_STAT_SUMM
        SELECT COMPANY_ID       ,
               TRANS_TYPE       ,
               ACT_DATE         ,
               POL_EFF_DATE     ,
               TRAN_EFF_DATE    ,
               POL_EXP_DATE     ,
               STATE_CODE       ,
               TOWN_CODE        ,
               CAR_ID_CODE      ,
               TYPE_OF_RISK     ,
               ASL              ,
               SUBLINE          ,
               CLASS_CODE       ,
               LINE_SPEC_1      ,
               PRODUCER_CODE    ,
               LINE_SPEC_2      ,
               ZIP_CODE         ,
               EXPOSURE         ,
               EXP_RATING_MOD   ,
               OTHER_RATING_MOD ,
               FILLER_94        ,
               PREM_AMOUNT_1    ,
               PREM_AMOUNT_2    ,
               FILLER_112       ,
               POLICY_ID        ,
               VIN              ,
               COMPANY_USE
        FROM RPT_POLICY_CAR_STAT_SUM1
        WHERE OUTPUT_SWITCH <> '0';

    COMMIT;


--- Insert specific fields into IXPOLVIN input table.

    INSERT INTO RPT_POLICY_CAR_IXPV_SUMM
        SELECT TRIM(POLICY_ID)  ,
               VIN              ,
               TYPE_OF_RISK     ,
               TOWN_CODE        ,
               ZIP_CODE         ,
               SUBSTR(LINE_SPEC_1, 22, 1),
               TO_CHAR(v_year_run),
               --'20' || SUBSTR(POL_EFF_DATE, 2, 2),
               CAR_ID_CODE      ,
               RECORD_NUMBER
        FROM RPT_POLICY_CAR_STAT_SUM1
        WHERE OUTPUT_SWITCH <> '0';

    COMMIT;


----------------------------------------------------------------------------------------------------

--- Clean up specific records/fields on output table

    -- Zero out SDIP when non-numeric.
    UPDATE RPT_POLICY_CAR_STAT_SUMM
        SET CLASS_CODE = SUBSTR(CLASS_CODE, 1, 4) || '00'
        WHERE SUBSTR(CLASS_CODE,5,2) = '..';

    -- Zero out SDIP on Towing coverage.
    UPDATE RPT_POLICY_CAR_STAT_SUMM
        SET CLASS_CODE = SUBSTR(CLASS_CODE, 1, 4) || '00'
        WHERE ASL = '211'
          AND SUBSTR(LINE_SPEC_1, 2, 3) IN ('080', '082');

    -- Remove OTC extra risk code on records with no reported Comp/OTC coverage.
    UPDATE RPT_POLICY_CAR_STAT_SUMM
        SET LINE_SPEC_2 = SUBSTR(LINE_SPEC_2, 1, 2) || ' ' || SUBSTR(LINE_SPEC_2, 4, 2)
        WHERE ASL = '211'
          AND SUBSTR(LINE_SPEC_1, 3, 1) IN (' ', '8');

    -- Remove Collision extra risk code on records with no reported Collision coverage.
    UPDATE RPT_POLICY_CAR_STAT_SUMM
        SET LINE_SPEC_2 = SUBSTR(LINE_SPEC_2, 1, 4) || ' '
        WHERE ASL = '211'
          AND SUBSTR(LINE_SPEC_1, 5, 3) IN ('   ');

    -- Annual Mileage optional on PPA records, remove.
    UPDATE RPT_POLICY_CAR_STAT_SUMM
        SET LINE_SPEC_1 = SUBSTR(LINE_SPEC_1, 1, 12) || '   ' || SUBSTR(LINE_SPEC_1, 16, 10)
        WHERE ASL IN ('192', '191', '211');

    -- Passive Restraint optional on PPA records, remove.
    UPDATE RPT_POLICY_CAR_STAT_SUMM
        SET LINE_SPEC_1 = SUBSTR(LINE_SPEC_1, 1, 20) || ' ' || SUBSTR(LINE_SPEC_1, 22, 4)
        WHERE ASL IN ('192', '191');

    -- OEM Coverage, Anti-Theft codes optional on PPA records, remove.
    UPDATE RPT_POLICY_CAR_STAT_SUMM
        SET LINE_SPEC_1 = SUBSTR(LINE_SPEC_1, 1, 17) || ' ' || SUBSTR(LINE_SPEC_1, 19, 2) || ' ' || SUBSTR(LINE_SPEC_1, 22, 4)
        WHERE ASL IN ('211');


----------------------------------------------------------------------------------------------------


EXCEPTION
    WHEN OTHERS
    THEN
        v_err_fl := 1;
        v_err_mssg :=
            'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
        DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
        rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

PROCEDURE update_car_ixpolvin_summ
IS

/*
    Loop through summary data from premiums processing to update IXPOLVIN table.
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.SUMMARIZE_CAR_PREM_SUMM';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);

--- ----------------------------------------------------------------------------------------------------------------


    CURSOR ixpv_summ
    IS
        SELECT DISTINCT
            s.POLICY,
            s.VIN,
            s.RISK,
            s.TOWN,
            s.ZIP_CODE,
            s.DISCOUNT,
            s.ACT_YR,
            s.CAR_ID,
            MAX(s.RECORD_NUMBER) as MAX_RECORD_NUMBER
        FROM RPT_POLICY_CAR_IXPV_SUMM s
        WHERE s.RISK <> '9'
        GROUP BY s.POLICY,
                 s.VIN,
                 s.RISK,
                 s.TOWN,
                 s.ZIP_CODE,
                 s.DISCOUNT,
                 s.ACT_YR,
                 s.CAR_ID
        ORDER BY s.POLICY ASC,
                 s.VIN ASC,
                 MAX_RECORD_NUMBER ASC;


    summ_rec         ixpv_summ%ROWTYPE;


--- ----------------------------------------------------------------------------------------------------------------


--- Procedural Variables
    v_RETURN_STATUS             NUMBER(1);


--- ----------------------------------------------------------------------------------------------------------------


BEGIN

    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'Update_CAR_IXPOLVIN_Summ Loop';

    OPEN ixpv_summ;

    LOOP

        FETCH ixpv_summ INTO summ_rec;

        EXIT WHEN ixpv_summ%NOTFOUND;

        v_RETURN_STATUS := Update_IXPOLVIN( summ_rec.POLICY, summ_rec.VIN, summ_rec.RISK, summ_rec.TOWN, summ_rec.ZIP_CODE, summ_rec.DISCOUNT, summ_rec.ACT_YR, summ_rec.CAR_ID );

    END LOOP;

    CLOSE ixpv_summ;


--- ----------------------------------------------------------------------------------------------------------------


EXCEPTION
    WHEN OTHERS
    THEN
        v_err_fl := 1;
        v_err_mssg :=
            'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
        DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
        rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

   FUNCTION ISO_Signed_Number (v_num_in IN Number, v_Len in Number)  Return varchar2
IS
    v_temp      varchar2 (10);
    v_Unit_pos  varchar2 (1);

Begin

    If v_num_in < 0 then
        v_temp := trim(to_char(v_num_in * -1));
        v_Unit_pos := substr(v_temp, length(v_temp), 1);
        v_temp := substr(v_temp, 1, length(v_temp) - 1);
        case v_Unit_pos
            when '0' then v_temp := v_temp || '}';
            when '1' then v_temp := v_temp || 'J';
            when '2' then v_temp := v_temp || 'K';
            when '3' then v_temp := v_temp || 'L';
            when '4' then v_temp := v_temp || 'M';
            when '5' then v_temp := v_temp || 'N';
            when '6' then v_temp := v_temp || 'O';
            when '7' then v_temp := v_temp || 'P';
            when '8' then v_temp := v_temp || 'Q';
            when '9' then v_temp := v_temp || 'R';
        End Case;
        v_temp := lpad (trim(v_temp), v_len, '0');
    Else
        v_temp := lpad (trim(to_char(v_num_in)), v_len, '0');
    End If;

    Return v_temp;
End;

Function CAR_Date_Conv (v_date_in in Date, v_CAR_Format_in  in VarChar2) Return VarChar2
is
    v_Date_Out      Varchar2 (5);
    v_temp_month    Varchar2 (2);

Begin

    If v_CAR_Format_in = 'MY' then
   ---  VARCHAR2(2)  format one char Month - one char Year (MY);
        v_temp_month := lpad(to_char(extract( Month from v_date_in)), 2, '0');
        If to_number(v_temp_month) > 10 then
            Case to_number(v_temp_month)
                WHEN 11 then v_Date_out := '-';
                WHEN 12 then v_Date_out := '&';
            END CASE;
        Else
            v_Date_out := substr(v_temp_month, 2, 1);
        End If;
        --v_Date_out := v_Date_out || substr( to_char(v_year_run),Length(to_char(v_year_run)), 1);
        v_Date_out := v_Date_out || substr( to_char(extract( YEAR from v_date_in)),(Length(to_char(extract( YEAR from v_date_in)))), 1);
    End if;

    If v_CAR_Format_in = 'MYY' then
    --- VARCHAR2(3) - format one char Month - two char Year (MYY);
        v_temp_month := lpad(to_char(extract( Month from v_date_in)), 2, '0');
        If to_number(v_temp_month) > 10 then
            Case to_number(v_temp_month)
                WHEN 11 then v_Date_out := '-';
                WHEN 12 then v_Date_out := '&';
            END CASE;
        Else
            v_Date_out := substr(v_temp_month, 2, 1);
        End If;
        v_Date_out := v_Date_out || LPAD(substr( to_char(extract( YEAR from v_date_in)),(Length(to_char(extract( YEAR from v_date_in))) - 1), 2), 2, '0');
    End if;

    If v_CAR_Format_in = 'MDDYY' then
    --- VARCHAR2(5) - format one char Month - two char Day - two char Year (MDDYY);
        v_temp_month := lpad(to_char(extract( Month from v_date_in)), 2, '0');
        If to_number(v_temp_month) > 10 then
            Case to_number(v_temp_month)
---                WHEN < 11 then v_Date_out := substr(v_temp_month, 2, 1);
                WHEN 11 then v_Date_out := '-';
                WHEN 12 then v_Date_out := '&';
            END CASE;
        Else
            v_Date_out := substr(v_temp_month, 2, 1);
        End If;
        v_Date_out := v_Date_out || LPAD(substr( to_char(extract( DAY from v_date_in)),(Length(to_char(extract( DAY from v_date_in))) - 1), 2), 2, '0');
        v_Date_out := v_Date_out || LPAD(substr( to_char(extract( YEAR from v_date_in)),(Length(to_char(extract( YEAR from v_date_in))) - 1), 2), 2, '0');
    End if;

    RETURN v_Date_out;
End;

FUNCTION Get_CAR_Vehicle_Data (
                                v_POLICY_NUMBER     IN      VARCHAR2,
                                v_GROUP_LINE        IN      VARCHAR2,
                                v_ITEM_NUM          IN      VARCHAR2,
                                v_OLD_NEW           IN      VARCHAR2,
                                v_EFF_DATE          IN      DATE,
                                v_ACT_DATE          IN      DATE,
                                v_IDENT_NUM         IN      VARCHAR2,
                                -- Return fields
                                r_LIST_MARKET       OUT     NUMBER,
                                r_CENTURY           OUT     VARCHAR2,
                                r_MODEL_YEAR        OUT     VARCHAR2
                               )

--- ----------------------------------------------------------------------------------------------------------------

    RETURN VARCHAR2
    IS
        v_return_code       VARCHAR2(3);

/*
    Policy data is available in the "history_wang_policy" table.
    Driver data is available in the "history_wang_item" table.
    Use these tables to retrieve vehicle data when called.
*/

    CURSOR item_master
    IS
        SELECT    c.run_date,
                c.ident_num,
                c.list_market,
                c.veh_year_cc,
                c.veh_year

          FROM    staging.history_wang_policy p,
                staging.history_wang_item c

         WHERE
                c.mast_id           =   '4'
            AND c.rec_id            =   '4'
            AND c.pol_num           =   v_POLICY_NUMBER
            AND c.sds_line          =   v_GROUP_LINE
            AND c.item_seq          =   TO_NUMBER(v_ITEM_NUM)

            AND p.pol_num = c.pol_num
            AND p.run_date = c.run_date

            AND p.eff_date = v_EFF_DATE
            AND p.run_date <= v_ACT_DATE

        ORDER BY c.run_date desc;

        item_rec            item_master%ROWTYPE;


--- ----------------------------------------------------------------------------------------------------------------

        /*
        Author: D. O'Sullivan
        Date: 4/2/08
        Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
        Modifications
        -------------
        */

        -- debugging/exception variables
        v_procname          VARCHAR2 (20) := 'get_dbname';
        v_err_loc           VARCHAR2 (100);
        v_err_number        NUMBER;
        v_err_msg           VARCHAR2 (1500);
        v_start_date_time   DATE := SYSDATE;

--- ----------------------------------------------------------------------------------------------------------------


    BEGIN
        v_err_loc := 'Get_CAR_Vehicle_Data';
        v_return_code := '   ';
        r_LIST_MARKET := 0;
        r_CENTURY     := ' ';
        r_MODEL_YEAR  := ' ';



        OPEN item_master;

        FETCH item_master INTO item_rec;

        -- Offset records require data from previous segment
        IF v_OLD_NEW = '0' THEN
            FETCH item_master INTO item_rec;
        END IF;

        IF NOT item_master%NOTFOUND THEN
            IF TRIM(v_IDENT_NUM) <> TRIM(item_rec.ident_num) THEN
                v_return_code := 'VIN';
            END IF;

            r_LIST_MARKET := item_rec.list_market;
            r_CENTURY := SUBSTR(NVL(item_rec.veh_year_cc, ' '), 1, 1);
            r_MODEL_YEAR := LPAD(item_rec.veh_year_cc, 2, '2') || LPAD(item_rec.veh_year, 2, '2');

        ELSE
            v_return_code := 'RNF';
        END IF;


        RETURN v_return_code;


--- ----------------------------------------------------------------------------------------------------------------

EXCEPTION
   WHEN OTHERS
   THEN
      v_err_number := SQLCODE;
      v_err_msg := SQLERRM (SQLCODE);
      v_err_msg :=
            'FAILED: '
         || v_err_number
         || ' * '
         || v_err_loc
         || ' * '
         || v_err_msg;
      DBMS_OUTPUT.put_line (v_err_msg);
      RETURN v_err_msg;

--- ----------------------------------------------------------------------------------------------------------------

END Get_CAR_Vehicle_Data;

FUNCTION Get_CAR_OSLS_TotalPartialInd (
                                        v_POLICY_NUMBER     IN      VARCHAR2,
                                        v_CLAIM_NUMBER      IN      VARCHAR2,
                                        v_CLAIMANT_NUMBER   IN      VARCHAR2,
                                        v_ITEM_NUM          IN      VARCHAR2,
                                        v_COVERAGE_CODE     IN      VARCHAR2,
                                        v_DAC_IND           IN      VARCHAR2,
                                        v_END_DATE          IN      DATE
                                       )

--- ----------------------------------------------------------------------------------------------------------------

    RETURN VARCHAR2
    IS
        v_return_ind    VARCHAR2(1);

/*
    Retrieve the total/partial loss indicator from the most recent record for the claim/reserve.
    Possible values are null, '1', and '2'; use the highest value found.
    Return 2 if indicator is '2', return '1' otherwise.
*/

    CURSOR claim_master
    IS
        SELECT DISTINCT
            NVL(c.AU_TOT_PART_IND, '0') AS AU_TOT_PART_IND,
            c.policy_number,
            c.claim_number,
            c.claimant_number,
            c.item_num,
            c.coverage_code,
            c.dac_ind,
            c.actg_date,
            c.trans_code
        FROM RPT_CLAIMS_MA_STAT c
        WHERE c.POLICY_NUMBER   = v_POLICY_NUMBER
          AND c.CLAIM_NUMBER    = v_CLAIM_NUMBER
          AND c.CLAIMANT_NUMBER = v_CLAIMANT_NUMBER
          AND c.ITEM_NUM        = v_ITEM_NUM
          AND c.COVERAGE_CODE   = v_COVERAGE_CODE
          AND c.DAC_IND         = v_DAC_IND
          AND c.trans_code IN ('01', '11', '21', '41', '51', '61', '52', '53', '54', '55', '81', '91', '86', '87', '72', '82', '92', '83', '93')
          AND c.actg_date =
            ( SELECT MAX (c1.actg_date)
              FROM RPT_CLAIMS_MA_STAT c1
              WHERE c.policy_number    = c1.policy_number
                AND c.claim_number     = c1.claim_number
                AND c.claimant_number  = c1.claimant_number
                AND c.item_num         = c1.item_num
                AND c.coverage_code    = c1.coverage_code
                AND c.dac_ind          = c1.dac_ind
                AND c1.book_date  <=  v_END_DATE
                AND c1.trans_code IN ('01', '11', '21', '41', '51', '61', '52', '53', '54', '55', '81', '91', '86', '87', '72', '82', '92', '83', '93')
             )
        ORDER BY AU_TOT_PART_IND DESC;


        claim_rec           claim_master%ROWTYPE;


--- ----------------------------------------------------------------------------------------------------------------

        /*
        Author: D. O'Sullivan
        Date: 4/2/08
        Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
        Modifications
        -------------
        */

        -- debugging/exception variables
        v_procname          VARCHAR2 (20) := 'get_dbname';
        v_err_loc           VARCHAR2 (100);
        v_err_number        NUMBER;
        v_err_msg           VARCHAR2 (1500);
        v_start_date_time   DATE := SYSDATE;

--- ----------------------------------------------------------------------------------------------------------------


    BEGIN
        v_err_loc := 'Get_CAR_OSLS_TotalPartialInd';
        v_return_ind := ' ';

        OPEN claim_master;

        FETCH claim_master INTO claim_rec;

        IF NOT claim_master%NOTFOUND THEN
            IF claim_rec.AU_TOT_PART_IND = '2' THEN
                v_return_ind := '2';
            ELSE
                v_return_ind := '1';
            END IF;
        END IF;

        RETURN v_return_ind;


--- ----------------------------------------------------------------------------------------------------------------

EXCEPTION
   WHEN OTHERS
   THEN
      v_err_number := SQLCODE;
      v_err_msg := SQLERRM (SQLCODE);
      v_err_msg :=
            'FAILED: '
         || v_err_number
         || ' * '
         || v_err_loc
         || ' * '
         || v_err_msg;
      DBMS_OUTPUT.put_line (v_err_msg);
      RETURN v_err_msg;

--- ----------------------------------------------------------------------------------------------------------------

END Get_CAR_OSLS_TotalPartialInd;

FUNCTION Update_IXPOLVIN (
                           v_POLICY            IN      VARCHAR2,
                           v_VIN               IN      VARCHAR2,
                           v_RISK              IN      VARCHAR2,
                           v_TOWN              IN      VARCHAR2,
                           v_ZIP_CODE          IN      VARCHAR2,
                           v_DISCOUNT          IN      VARCHAR2,
                           v_YEAR              IN      VARCHAR2,
                           v_CAR_ID            IN      VARCHAR2
                          )

--- ----------------------------------------------------------------------------------------------------------------

    RETURN NUMBER
    IS
        v_status    NUMBER(1);

/*
    Update the IXPOLVIN tables with summary data from premiums processing.
    Insert if no current match for vehicle & run year, otherwise update relevant record.
*/

    CURSOR ixpv_master
    IS
        SELECT *
        FROM RPT_CAR_IXPOLVIN ix
        WHERE TRIM(IX_POLICY) = TRIM(v_POLICY)
          AND IX_YEAR = v_YEAR
          AND NVL(TRIM(IX_VIN),'~') = NVL(TRIM(v_VIN),'~');


    ixpv_rec            ixpv_master%ROWTYPE;


--- ----------------------------------------------------------------------------------------------------------------

    /*
    Author: D. O'Sullivan
    Date: 4/2/08
    Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
    Modifications
    -------------
    */

    -- debugging/exception variables
    v_procname          VARCHAR2 (20) := 'get_dbname';
    v_err_loc           VARCHAR2 (100);
    v_err_number        NUMBER;
    v_err_msg           VARCHAR2 (1500);
    v_start_date_time   DATE := SYSDATE;

--- ----------------------------------------------------------------------------------------------------------------


--- Procedural Variables
    --v_last_seq          NUMBER(3);
    v_exit_sw           VARCHAR2(1);


--- ----------------------------------------------------------------------------------------------------------------


    BEGIN
        v_err_loc := 'Update_IXPOLVIN';
        v_status := 0;

        OPEN ixpv_master;

        FETCH ixpv_master INTO ixpv_rec;

        IF ixpv_master%NOTFOUND THEN
                    v_status := 1;

            INSERT INTO RPT_CAR_IXPOLVIN
            VALUES (
                     v_POLICY,
                     v_YEAR,
                     v_VIN,
                     v_RISK,
                     v_TOWN,
                     v_ZIP_CODE,
                     v_DISCOUNT,
                     v_CAR_ID,
                     'O'
                    );

            COMMIT;

        ELSE

            UPDATE RPT_CAR_IXPOLVIN
                SET IX_RISK     = v_RISK     ,
                    IX_TOWN     = v_TOWN     ,
                    IX_ZIP_CODE = v_ZIP_CODE ,
                    IX_DISCOUNT = v_DISCOUNT ,
                    IX_CAR_ID   = v_CAR_ID   ,
                    IX_ORIGIN   = 'O'
             WHERE IX_POLICY = ixpv_rec.IX_POLICY
               AND IX_YEAR = ixpv_rec.IX_YEAR
               AND IX_VIN = ixpv_rec.IX_VIN;

            COMMIT;

        END IF;



        RETURN v_status;


--- ----------------------------------------------------------------------------------------------------------------

EXCEPTION
   WHEN OTHERS
   THEN
      v_err_number := SQLCODE;
      v_err_msg := SQLERRM (SQLCODE);
      v_err_msg :=
            'FAILED: '
         || v_err_number
         || ' * '
         || v_err_loc
         || ' * '
         || v_err_msg;
      DBMS_OUTPUT.put_line (v_err_msg);
      RETURN v_err_msg;

--- ----------------------------------------------------------------------------------------------------------------

END Update_IXPOLVIN;

FUNCTION Get_IXPOLVIN_Values (
                               v_POLICY         IN      VARCHAR2,
                               v_EFF_YR         IN      VARCHAR2,
                               v_VIN            IN      VARCHAR2,
                               r_IX_RISK        OUT     VARCHAR2,
                               r_IX_TOWN        OUT     VARCHAR2,
                               r_IX_ZIP_CODE    OUT     VARCHAR2,
                               r_IX_DISCOUNT    OUT     VARCHAR2
                              )

--- ----------------------------------------------------------------------------------------------------------------

    RETURN VARCHAR2
    IS
        v_match_result      VARCHAR2(8);

/*
    Check the IXPOLVIN table for summary data for the vehicle from prior premiums processing.
    Return specified values to overwrite values in claims processing if a match is found.
*/

    CURSOR ixpv_master
    IS
        SELECT
            ix.IX_POLICY,
            ix.IX_YEAR,
            --ix.IX_SEQ,
            ix.IX_VIN,
            ix.IX_RISK,
            ix.IX_TOWN,
            ix.IX_ZIP_CODE,
            ix.IX_DISCOUNT,
            ix.IX_ORIGIN
        FROM RPT_CAR_IXPOLVIN ix
        WHERE TRIM(ix.IX_POLICY)       = TRIM(v_POLICY)
          AND SUBSTR(ix.IX_YEAR, 3, 2) = v_EFF_YR
          AND TRIM(ix.IX_VIN)          = TRIM(v_VIN);
        --ORDER BY IX_SEQ DESC;


    ixpv_rec            ixpv_master%ROWTYPE;


--- ----------------------------------------------------------------------------------------------------------------

    /*
    Author: D. O'Sullivan
    Date: 4/2/08
    Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
    Modifications
    -------------
    */

    -- debugging/exception variables
    v_procname          VARCHAR2 (20) := 'get_dbname';
    v_err_loc           VARCHAR2 (100);
    v_err_number        NUMBER;
    v_err_msg           VARCHAR2 (1500);
    v_start_date_time   DATE := SYSDATE;

--- ----------------------------------------------------------------------------------------------------------------


    BEGIN
        v_err_loc := 'Get_IXPOLVIN_Values';
        v_match_result := ' ';


        OPEN ixpv_master;

        FETCH ixpv_master INTO ixpv_rec;

        IF ixpv_master%NOTFOUND THEN
            v_match_result := 'NO MATCH';

            r_IX_RISK     := '';
            r_IX_TOWN     := '';
            r_IX_ZIP_CODE := '';
            r_IX_DISCOUNT := '';

        ELSE
            v_match_result := ixpv_rec.IX_ORIGIN;

            r_IX_RISK     := ixpv_rec.IX_RISK;
            r_IX_TOWN     := ixpv_rec.IX_TOWN;
            r_IX_ZIP_CODE := ixpv_rec.IX_ZIP_CODE;
            r_IX_DISCOUNT := ixpv_rec.IX_DISCOUNT;

        END IF;


        RETURN v_match_result;


--- ----------------------------------------------------------------------------------------------------------------

EXCEPTION
   WHEN OTHERS
   THEN
      v_err_number := SQLCODE;
      v_err_msg := SQLERRM (SQLCODE);
      v_err_msg :=
            'FAILED: '
         || v_err_number
         || ' * '
         || v_err_loc
         || ' * '
         || v_err_msg;
      DBMS_OUTPUT.put_line (v_err_msg);
      RETURN v_err_msg;

--- ----------------------------------------------------------------------------------------------------------------

END Get_IXPOLVIN_Values;

FUNCTION Get_CAR_Producer (
                            v_AGENT_NUM     IN      VARCHAR2,
                            v_AGENT_SUB     IN      VARCHAR2
                          )

--- ----------------------------------------------------------------------------------------------------------------

    RETURN VARCHAR2
    IS
        v_producer      VARCHAR2(6);

/*
    Determine the Producer code to report based off AGENT_NUM and AGENT_SUB.
    Check the Producer code table for a specific correction if one exists,
     otherwise assemble the code from AGENT_NUM and AGENT_SUB.
*/

    CURSOR producer_master
    IS
        SELECT
            p.AGENT_NUM,
            p.AGENT_SUB,
            p.PRODUCER_CODE
        FROM RPT_CAR_PRODUCER p
        WHERE NVL(TRIM(p.AGENT_NUM),' ') = NVL(TRIM(v_AGENT_NUM),' ')
          AND NVL(TRIM(p.AGENT_SUB),' ') = NVL(TRIM(v_AGENT_SUB),' ');


    producer_rec        producer_master%ROWTYPE;


--- ----------------------------------------------------------------------------------------------------------------

    /*
    Author: D. O'Sullivan
    Date: 4/2/08
    Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
    Modifications
    -------------
    */

    -- debugging/exception variables
    v_procname          VARCHAR2 (20) := 'get_dbname';
    v_err_loc           VARCHAR2 (100);
    v_err_number        NUMBER;
    v_err_msg           VARCHAR2 (1500);
    v_start_date_time   DATE := SYSDATE;

--- ----------------------------------------------------------------------------------------------------------------


    BEGIN
        v_err_loc := 'Get_CAR_Producer';
        v_producer := ' ';


        OPEN producer_master;

        FETCH producer_master INTO producer_rec;

        IF producer_master%NOTFOUND THEN

            v_producer := v_AGENT_NUM;

            IF TRANSLATE(TRANSLATE(v_AGENT_SUB, '~', ' '), '0123456789', '~~~~~~~~~~') = '~~~' THEN
                v_producer := SUBSTR(v_AGENT_NUM, 3, 3) || v_AGENT_SUB;
            END IF;

        ELSE

            v_producer := producer_rec.PRODUCER_CODE;

        END IF;


        RETURN v_producer;


--- ----------------------------------------------------------------------------------------------------------------

EXCEPTION
   WHEN OTHERS
   THEN
      v_err_number := SQLCODE;
      v_err_msg := SQLERRM (SQLCODE);
      v_err_msg :=
            'FAILED: '
         || v_err_number
         || ' * '
         || v_err_loc
         || ' * '
         || v_err_msg;
      DBMS_OUTPUT.put_line (v_err_msg);
      RETURN v_err_msg;

--- ----------------------------------------------------------------------------------------------------------------

END Get_CAR_Producer;
PROCEDURE Import_IXPOLVIN
IS

/*
    Utility procedure to delete all data from the IXPOLVIN table and reimport from an NPS flatfile.
    NPS program to generate required flatfile is IXPVXPT.CBL.
    This procedure must be run directly, it is not called from elsewhere within this package.
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.Import_IXPOLVIN';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);

--- ----------------------------------------------------------------------------------------------------------------

BEGIN

    DELETE FROM RPT_CAR_IXPOLVIN;

    INSERT INTO RPT_CAR_IXPOLVIN
        SELECT B.IX_POLICY  ,
            B.IX_YEAR    ,
            --IX_SEQ     ,
            B.IX_VIN     ,
            B.IX_RISK    ,
            B.IX_TOWN    ,
            B.IX_ZIP_CODE,
            B.IX_DISCOUNT,
            B.IX_CAR_ID,
            'N' AS IX_ORIGIN
        FROM
            (
                SELECT A.*
                FROM EXT_RPT_CAR_IXPOLVIN A

                MINUS

                -- This query is editable, but generally slower
                SELECT A1.*
                FROM EXT_RPT_CAR_IXPOLVIN A1
                WHERE EXISTS (SELECT 'X' FROM EXT_RPT_CAR_IXPOLVIN A2
                WHERE A1.IX_POLICY = A2.IX_POLICY
                AND   A1.IX_YEAR = A2.IX_YEAR
                AND   NVL(A1.IX_VIN, '~') = NVL(A2.IX_VIN, '~')
                AND A1.ROWID > A2.ROWID)
            ) B;

    COMMIT;

--- ----------------------------------------------------------------------------------------------------------------

EXCEPTION
    WHEN OTHERS
    THEN
        v_err_fl := 1;
        v_err_mssg :=
            'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
        DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
        rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);

END;
PROCEDURE Insert_Producer ( v_AGENT_NUM        IN VARCHAR2,
                            v_AGENT_SUB        IN VARCHAR2,
                            v_PRODUCER_CODE    IN VARCHAR2 )
IS

/*
    Utility procedure to add a new Producer code correction to the Producer code table.
    Input is: v_AGENT_NUM (length 5), required
              v_AGENT_SUB (length 3), NULL if blank
              v_PRODUCER_CODE (length 6), required
    This procedure must be run directly, it is not called from elsewhere within this package.
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.INSERT_PRODUCER';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR producer_master
    IS
        SELECT *
        FROM RPT_CAR_PRODUCER p
        WHERE NVL(TRIM(p.AGENT_NUM),' ') = NVL(TRIM(v_AGENT_NUM),' ')
          AND NVL(TRIM(p.AGENT_SUB),' ') = NVL(TRIM(v_AGENT_SUB),' ');


    producer_rec        producer_master%ROWTYPE;


--- ----------------------------------------------------------------------------------------------------------------


BEGIN

    v_err_loc := 'Add_Producer';

    OPEN producer_master;

    FETCH producer_master INTO producer_rec;


    IF producer_master%NOTFOUND THEN

        INSERT INTO RPT_CAR_PRODUCER
        VALUES ( v_AGENT_NUM,
                 v_AGENT_SUB,
                 v_PRODUCER_CODE );

    ELSE

        UPDATE RPT_CAR_PRODUCER
        SET AGENT_NUM = v_AGENT_NUM,
            AGENT_SUB = v_AGENT_SUB,
            PRODUCER_CODE = v_PRODUCER_CODE
        WHERE NVL(TRIM(AGENT_NUM),' ') = NVL(TRIM(v_AGENT_NUM),' ')
          AND NVL(TRIM(AGENT_SUB),' ') = NVL(TRIM(v_AGENT_SUB),' ');

    END IF;


    DBMS_OUTPUT.put_line('UPDATED CODE FOR AGENT ' || v_AGENT_NUM || ' ' || v_AGENT_SUB || ' TO ' || v_PRODUCER_CODE || '.');

    COMMIT;


--- ----------------------------------------------------------------------------------------------------------------


EXCEPTION
    WHEN OTHERS
    THEN
        v_err_fl := 1;
        v_err_mssg :=
            'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
        DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
        rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);

END;

--- ----------------------------------------------------------------------------

PROCEDURE write_rounding_estimates (v_dir IN VARCHAR2, v_begin_date IN DATE)
IS

/*
    Report generation procedure for estimated rounding error in monthly stat reporting.
    Added 10/24/2017.  --ASI/RCrawford
*/

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.WRITE_ROUNDING_ESTIMATES';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    frnd                UTL_FILE.file_type;
    v_rpt_line          LONG;
    v_cr                VARCHAR2 (2) := CHR (13);    -- 'OD' CR

    osls_temp           NUMBER;

--- --- ---

BEGIN
    --DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'write_rounding_estimates';

-- Generate report.
    frnd := UTL_FILE.fopen (v_dir, 'mmvMnth_rndEst.txt', 'W', 32000);
    UTL_FILE.put_line (frnd, ' ' || v_cr);

    -- Header lines.
    v_rpt_line := LPAD(' ', 45, ' ') || 'MASS AUTO STATISTICAL REPORTING FOR ' || TO_CHAR(v_begin_date,'MM/YY') || RPAD(' ', 38, ' ') || TO_CHAR( TO_DATE(v_run_date,'YYYYMMDD'), 'MM/DD/YY' );
    UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

    v_rpt_line := LPAD(' ', 53, ' ') || 'ESTIMATED ROUNDING ERROR';
    UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

    -- Premiums estimates.
    IF v_run_type = 'A' OR v_run_type = 'P' THEN
        UTL_FILE.put_line (frnd, ' ' || v_cr);
        v_rpt_line := LPAD(' ', 2, ' ') || 'P R E M I U M S';
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);
        UTL_FILE.put_line (frnd, ' ' || v_cr);

        v_rpt_line := '  ' || RPAD('COMMERCIAL', 22, ' ')        || RPAD('LIABILITY', 16, ' ') || TO_CHAR(v_prem_rounding(1), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('P.I.P.', 16, ' ')    || TO_CHAR(v_prem_rounding(2), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('PHYSICAL', 16, ' ')  || TO_CHAR(v_prem_rounding(3), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        v_rpt_line := '  ' || RPAD('PRIVATE PASSENGER', 22, ' ') || RPAD('LIABILITY', 16, ' ') || TO_CHAR(v_prem_rounding(4), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('P.I.P.', 16, ' ')    || TO_CHAR(v_prem_rounding(5), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('PHYSICAL', 16, ' ')  || TO_CHAR(v_prem_rounding(6), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        IF v_prem_rounding(7) <> 0 THEN
            v_rpt_line := '  ' || LPAD('ASL ', 22, ' ')          || RPAD('ERRORS', 16, ' ')    || TO_CHAR(v_prem_rounding(7), 'B$999,999MI');
            UTL_FILE.put_line (frnd, v_rpt_line || v_cr);
        END IF;
    END IF;

    -- Claims estimates.
    IF v_run_type = 'A' OR v_run_type = 'C' THEN
        -- Paid losses.
        UTL_FILE.put_line (frnd, ' ' || v_cr);
        v_rpt_line := LPAD(' ', 2, ' ') || 'P A I D   L O S S E S';
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);
        UTL_FILE.put_line (frnd, ' ' || v_cr);

        v_rpt_line := '  ' || RPAD('COMMERCIAL', 22, ' ')        || RPAD('LIABILITY', 16, ' ') || TO_CHAR(v_paid_rounding(1), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('P.I.P.', 16, ' ')    || TO_CHAR(v_paid_rounding(2), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('PHYSICAL', 16, ' ')  || TO_CHAR(v_paid_rounding(3), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        v_rpt_line := '  ' || RPAD('PRIVATE PASSENGER', 22, ' ') || RPAD('LIABILITY', 16, ' ') || TO_CHAR(v_paid_rounding(4), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('P.I.P.', 16, ' ')    || TO_CHAR(v_paid_rounding(5), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('PHYSICAL', 16, ' ')  || TO_CHAR(v_paid_rounding(6), 'B$999,999MI');
        UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

        IF v_paid_rounding(7) <> 0 THEN
            v_rpt_line := '  ' || LPAD('ASL ', 22, ' ')          || RPAD('ERRORS', 16, ' ')    || TO_CHAR(v_paid_rounding(7), 'B$999,999MI');
            UTL_FILE.put_line (frnd, v_rpt_line || v_cr);
        END IF;


        -- Outstanding losses.
        IF v_month_run IN (3, 6, 9, 12) THEN
            UTL_FILE.put_line (frnd, ' ' || v_cr);
            v_rpt_line := LPAD(' ', 2, ' ') || 'O / S   L O S S E S';
            UTL_FILE.put_line (frnd, v_rpt_line || v_cr);
            UTL_FILE.put_line (frnd, ' ' || v_cr);

            v_rpt_line := '  ' || RPAD('COMMERCIAL', 22, ' ')        || RPAD('LIABILITY', 16, ' ') || TO_CHAR(v_osls_rounding(1), 'B$999,999MI');
            UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

            v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('P.I.P.', 16, ' ')    || TO_CHAR(v_osls_rounding(2), 'B$999,999MI');
            UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

            --v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('PHYSICAL', 16, ' ')  || TO_CHAR(v_osls_rounding(3), 'B$999,999MI');
            --UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

            v_rpt_line := '  ' || RPAD('PRIVATE PASSENGER', 22, ' ') || RPAD('LIABILITY', 16, ' ') || TO_CHAR(v_osls_rounding(4), 'B$999,999MI');
            UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

            v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('P.I.P.', 16, ' ')    || TO_CHAR(v_osls_rounding(5), 'B$999,999MI');
            UTL_FILE.put_line (frnd, v_rpt_line || v_cr);

            --v_rpt_line := '  ' || RPAD(' ', 22, ' ')                 || RPAD('PHYSICAL', 16, ' ')  || TO_CHAR(v_osls_rounding(6), 'B$999,999MI');
            --UTL_FILE.put_line (frnd, v_rpt_line || v_cr);


            -- No Physical Damage records for OSLS reporting, add to ASL errors.
            osls_temp := v_osls_rounding(3) + v_osls_rounding(6) + v_osls_rounding(7);

            IF osls_temp <> 0 THEN
                v_rpt_line := '  ' || LPAD('ASL ', 22, ' ')          || RPAD('ERRORS', 16, ' ')    || TO_CHAR(osls_temp, 'B$999,999MI');
                UTL_FILE.put_line (frnd, v_rpt_line || v_cr);
            END IF;
        END IF;
    END IF;


    -- End of report.
    UTL_FILE.fclose(frnd);


--- --- ---

    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
        --DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
        rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;

--- ----------------------------------------------------------------------------

PROCEDURE write_fixed_file_CAR_LOZ (p_type           IN     VARCHAR2,
                                    p_query          IN     VARCHAR2,--
                                    p_dir            IN     VARCHAR2,--
                                    p_filename       IN     VARCHAR2,--
                                    p_fopen_fl       IN     VARCHAR2,--
                                    p_max_linesize   IN     NUMBER,
                                    p_month          IN     NUMBER,
                                    p_year           IN     NUMBER,
                                    p_subline        IN     NUMBER,
                                    p_stat_type      IN     VARCHAR2,
                                    p_end_sw         IN     VARCHAR2,
                                    v_numRecs        OUT    NUMBER,
                                    v_total_amount   OUT    NUMBER)
IS
    f1                  UTL_FILE.file_type;
    f2                  UTL_FILE.file_type;

    v_cursor            INTEGER DEFAULT DBMS_SQL.open_cursor;
    v_colVal            VARCHAR2 (4000);
    v_rc                INTEGER;
    v_colCnt            NUMBER DEFAULT 0;

    v_out_rec           LONG;
    v_rpt_line           LONG;

    v_tab               VARCHAR2 (1) := CHR (9);
    v_crlf              VARCHAR2 (2) := CHR (13) || CHR (10);    -- 'ODOA' CR/LF
    v_cr                VARCHAR2 (2) := CHR (13);                -- 'OD' CR
    tbl_Column          DBMS_SQL.desc_tab;

    -- debugging/exception variables
    v_procname          VARCHAR2 (24) := 'write_fixed_file_CAR_loz';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    -- processing variables
    recs                NUMBER := 0;
    v_tot_amt_1         NUMBER := 0;
    v_tot_amt_2         NUMBER := 0;
    v_tot_amt_exp       NUMBER := 0;
    v_tot_amt_ceded     NUMBER := 0;
    v_type_rec          VARCHAR2(2);
    v_date_my           VARCHAR2(2);
    v_hold_car_id       VARCHAR2(1);
    v_hold_eff_yr       VARCHAR2(2);


    -- subline table
    SUBLINE_OUT          Code3_TBL := Code3_TBL( '611', '615', '618', '621', '625', '628', '611', '615', '621', '625' );

BEGIN
    v_hold_car_id := ' ';
    v_hold_eff_yr := '  ';


    f1 :=
        UTL_FILE.fopen (p_dir,
                        p_filename,
                        p_fopen_fl,
                        p_max_linesize);

    DBMS_SQL.parse (v_cursor, p_query, DBMS_SQL.native);
    DBMS_SQL.describe_columns (v_cursor, v_colCnt, tbl_Column);


    IF p_type = 'P' THEN
        v_type_rec := '65';

        f2 := UTL_FILE.fopen (p_dir,
                              'mmvPREM_control.txt',
                              p_fopen_fl,
                              p_max_linesize);
    ELSE
        v_type_rec := '70';

        f2 := UTL_FILE.fopen (p_dir,
                              'mmvLOSS_control.txt',
                              p_fopen_fl,
                              p_max_linesize);
    END IF;


    v_date_my := CAR_Date_Conv(v_begin_date, 'MY');


    FOR i IN 1 .. v_colCnt
    LOOP
        DBMS_SQL.define_column (v_cursor,
                                i,
                                v_colVal,
                                4000);

        IF (tbl_Column (i).col_type = 2)                        --number type
        THEN
            tbl_Column (i).col_max_len := tbl_Column (i).col_precision + 2;
        ELSIF (tbl_Column (i).col_type = 12)                     -- date type
        THEN
            -- length of date format
            tbl_Column (i).col_max_len := 20;
        ELSIF (tbl_Column (i).col_Type = 8)                      -- LONG type
        THEN
            tbl_Column (i).col_max_len := 2000;
        END IF;
    END LOOP;

    v_rc := DBMS_SQL.execute (v_cursor);


    -- Start of file records
    IF p_fopen_fl = 'W' then
        -- Start of CAR file.
        v_out_rec := RPAD( ('201NORF664 ' || v_run_date), 150, ' ' );
        v_out_rec := v_out_rec || v_cr;
        UTL_FILE.put_line (f1, v_out_rec);

        -- Start of report file.
        UTL_FILE.put_line (f2, ' ' || v_cr);

        v_rpt_line := LPAD(' ', 45, ' ') || 'MASS AUTO STATISTICAL REPORTING FOR ' || TO_CHAR(v_begin_date,'MM/YY') || RPAD(' ', 38, ' ') || TO_CHAR( TO_DATE(v_run_date,'YYYYMMDD'), 'MM/DD/YY' );
        UTL_FILE.put_line (f2, v_rpt_line || v_cr);

        v_rpt_line := LPAD(' ', 46, ' ') || 'CONTROL TOTALS     CAR VOLUME =  MA';

        IF p_type = 'P' THEN
            -- Premiums file headers.
            v_rpt_line := v_rpt_line || 'P' || TO_CHAR(v_begin_date,'YYMM');
            UTL_FILE.put_line (f2, v_rpt_line || v_cr);

            v_rpt_line := '  ' || 'P R E M I U M S                     REC COUNT  EXPOSURE TOT   PIP / BI / OTC    PD / COLLISION                    CEDED PREM TOT';
            UTL_FILE.put_line (f2, v_rpt_line || v_cr);

            UTL_FILE.put_line (f2, ' ' || v_cr);


            -- Zero premiums totals at start of file.
            v_pp_direct_tot   := 0;
            v_comm_direct_tot := 0;
            v_pp_ceded_tot    := 0;
            v_comm_ceded_tot  := 0;
            v_sum_totals      := 0;

        ELSE
            -- Claims file headers.
            v_rpt_line := v_rpt_line || 'L' || TO_CHAR(v_begin_date,'YYMM');
            UTL_FILE.put_line (f2, v_rpt_line || v_cr);

            v_rpt_line := '  ' || 'P A I D   L O S S E S               REC COUNT    LOSS TOTAL       CEDED LOSS';
            UTL_FILE.put_line (f2, v_rpt_line || v_cr);

            UTL_FILE.put_line (f2, ' ' || v_cr);

        END IF;

    END IF;


    -- Start of outstanding losses, if end of quarter.
    IF p_subline = 7 THEN
        -- Add section header to report.
        v_rpt_line := '  ' || 'O / S   L O S S E S';
        UTL_FILE.put_line (f2, v_rpt_line || v_cr);

        UTL_FILE.put_line (f2, ' ' || v_cr);
    END IF;



    -- Shipment ID record
    v_out_rec := RPAD( ('66401' || v_date_my || SUBLINE_OUT(p_subline) || p_stat_type || '1'), 150, ' ' );
    v_out_rec := v_out_rec || v_cr;
    UTL_FILE.put_line (f1, v_out_rec);


    LOOP  --- Loop for Each Record
        EXIT WHEN (DBMS_SQL.fetch_rows (v_cursor) <= 0);

        DBMS_SQL.COLUMN_VALUE (v_cursor, 1, v_colVal);

        v_out_rec := NULL;

        FOR i IN 1 .. v_colCnt
        LOOP  --- Loop for Each Field in the record
            DBMS_SQL.COLUMN_VALUE (v_cursor, i, v_colVal);

            --- Filter out columns required for processing that do not get reported.
            --- Convert specific columns to required format for reporting.
            IF tbl_Column (i).col_name <> 'RECORD_NUMBER'
             AND tbl_Column (i).col_name <> 'DEBUG_DATA'
             AND tbl_Column (i).col_name <> 'IXPV_DATA'
             AND tbl_Column (i).col_name <> 'SORT_ORDER'
             AND tbl_Column (i).col_name <> 'OUTPUT_SWITCH'
            THEN
                IF tbl_Column (i).col_name = 'CAR_ID_CODE' THEN
                    v_hold_car_id := v_colVal;
                    v_out_rec := v_out_rec || RPAD (NVL (v_colVal, ' '),  tbl_Column (i).col_max_len);
                ELSE
                    IF tbl_Column (i).col_name = 'POL_EFF_DATE'
                     OR tbl_Column (i).col_name = 'EFF_DATE'
                    THEN
                        v_hold_eff_yr := SUBSTR(v_colVal, 2, 2);
                        v_out_rec := v_out_rec || RPAD (NVL (v_colVal, ' '),  tbl_Column (i).col_max_len);
                    ELSE
                        IF tbl_Column (i).col_name = 'PREM_AMOUNT_1'
                         OR tbl_Column (i).col_name = 'LOSS_AMOUNT'
                        THEN
                            v_tot_amt_1 := v_tot_amt_1 + v_colVal;
                            v_out_rec := v_out_rec || ISO_Signed_Number(v_colVal, 8);

                            IF v_hold_car_id IN ('3', '4')
                             OR ( v_hold_car_id IN ('5', '6', '9') AND (v_hold_eff_yr > '88' OR v_hold_eff_yr < '25') )
                            THEN
                                v_tot_amt_ceded := v_tot_amt_ceded + v_colVal;
                            END IF;
                        ELSE
                            IF tbl_Column (i).col_name = 'PREM_AMOUNT_2' THEN
                                v_tot_amt_2 := v_tot_amt_2 + v_colVal;
                                v_out_rec := v_out_rec || ISO_Signed_Number(v_colVal, 8);

                                IF v_hold_car_id IN ('3', '4')
                                 OR ( v_hold_car_id IN ('5', '6', '9') AND (v_hold_eff_yr > '88' OR v_hold_eff_yr < '25') )
                                THEN
                                    v_tot_amt_ceded := v_tot_amt_ceded + v_colVal;
                                END IF;
                            ELSE
                                IF tbl_Column (i).col_name = 'EXPOSURE' THEN
                                    v_tot_amt_exp := v_tot_amt_exp + v_colVal;
                                    v_out_rec := v_out_rec || ISO_Signed_Number(v_colVal, 7);
                                ELSE
                                    v_out_rec := v_out_rec || RPAD (NVL (v_colVal, ' '),  tbl_Column (i).col_max_len);
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            End If;
        END LOOP;

        ---DBMS_OUTPUT.PUT_LINE ('v_out_rec ' || v_out_rec);

        v_out_rec := v_out_rec || v_cr;                         --'chr(13) OD
        UTL_FILE.put_line (f1, v_out_rec);
        recs := recs + 1;
    END LOOP;


    -- Build Prem/Loss control record
    v_out_rec := '664' || v_type_rec || v_date_my || SUBLINE_OUT(p_subline) || p_stat_type || LPAD( TRIM(TO_CHAR(recs)), 9, '0' );

    IF v_type_rec = '65' THEN
        -- Premiums control record
        v_out_rec := v_out_rec || ISO_Signed_Number(v_tot_amt_exp, 9) || ISO_Signed_Number(v_tot_amt_1, 9) || ISO_Signed_Number(v_tot_amt_2, 9) || '000000000' || ISO_Signed_Number(v_tot_amt_ceded, 9);
    ELSE
        -- Claims control record
        v_out_rec := v_out_rec || ISO_Signed_Number(v_tot_amt_1, 9) || ISO_Signed_Number(v_tot_amt_ceded, 9);
    END IF;

    -- Write control record to output file.
    v_out_rec := RPAD(v_out_rec, 150, ' ');
    v_out_rec := v_out_rec || v_cr;
    UTL_FILE.put_line (f1, v_out_rec);


    -- Build Prem/Loss report record.
    v_rpt_line := '  ';

    -- Set value of first column.
    IF p_subline IN (1,4,7,9) THEN
        IF p_subline IN (1,7) THEN
            v_rpt_line := v_rpt_line || RPAD('COMMERCIAL',22,' ');
        ELSE
            IF p_subline IN (4,9) THEN
                v_rpt_line := v_rpt_line || RPAD('PRIVATE PASSENGER',22,' ');
            END IF;
        END IF;
    ELSE
        v_rpt_line := v_rpt_line || RPAD(' ',22,' ');
    END IF;

    -- Set value of second column.
    IF p_subline IN (1,4,7,9) THEN
        v_rpt_line := v_rpt_line || RPAD('LIABILITY',10,' ');
    ELSE
        IF p_subline IN (2,5,8,10) THEN
            v_rpt_line := v_rpt_line || RPAD('P.I.P.',10,' ');
        ELSE
            IF p_subline IN (3,6) THEN
                v_rpt_line := v_rpt_line || RPAD('PHYSICAL',10,' ');
            END IF;
        END IF;
    END IF;

    -- Set values of remaining (totals) columns.
    IF p_type = 'P' THEN
        -- Values required for premiums report.
        v_rpt_line := v_rpt_line || '    ' || TO_CHAR(recs,'B9,999,999MI')
                                 || '    ' || TO_CHAR(v_tot_amt_exp,'B9,999,999MI')
                                 || '    ' || TO_CHAR(v_tot_amt_1,'B$999,999,999MI')
                                 || '    ' || TO_CHAR(v_tot_amt_2,'B$999,999,999MI')
                                 || RPAD(' ',17,' ')
                                 || '    ' || TO_CHAR(v_tot_amt_ceded,'B$999,999,999MI');

        -- Update overall premiums totals.
        IF p_subline IN (1,2,3) THEN
            v_comm_direct_tot := v_comm_direct_tot + v_tot_amt_1 + v_tot_amt_2 - v_tot_amt_ceded;
            v_comm_ceded_tot := v_comm_ceded_tot + v_tot_amt_ceded;
        END IF;

        IF p_subline IN (4,5,6) THEN
            v_pp_direct_tot := v_pp_direct_tot + v_tot_amt_1 + v_tot_amt_2 - v_tot_amt_ceded;
            v_pp_ceded_tot := v_pp_ceded_tot + v_tot_amt_ceded;
        END IF;

        -- Update premiums grand total.
        v_sum_totals := v_sum_totals + v_tot_amt_1 + v_tot_amt_2;

    ELSE
        -- Values required for claims report.
        v_rpt_line := v_rpt_line || '    ' || TO_CHAR(recs,'B9,999,999MI')
                                    || ' ' || TO_CHAR(v_tot_amt_1,'B$999,999,999MI')
                                 || '    ' || TO_CHAR(v_tot_amt_ceded,'B$999,999,999MI');
    END IF;

    -- Write record to report file.
    UTL_FILE.put_line (f2, v_rpt_line || v_cr);


    -- End of file records.
    IF p_end_sw = 'Y' THEN
        -- End of file record for output file.
        v_out_rec := RPAD('END OF CAR SUBMISSION',150,'Z');
        v_out_rec := v_out_rec || v_cr;
        UTL_FILE.put_line (f1, v_out_rec);


        -- End of file records for premiums report file.
        IF p_type = 'P' THEN
            UTL_FILE.put_line (f2, ' ' || v_cr);

            v_rpt_line := '  ' || 'D I R E C T   /   C E D E D   T O T A L S         P.P. DIRECT     COMM. DIRECT       P.P. CEDED      COMM. CEDED      GRAND TOTAL';
            UTL_FILE.put_line (f2, v_rpt_line || v_cr);

            -- Write overall premiums totals to report file.
            v_rpt_line := LPAD(' ',49,' ') || TO_CHAR(v_pp_direct_tot,'B$999,999,999MI')
                                 || '    ' || TO_CHAR(v_comm_direct_tot,'B$999,999,999MI')
                                 || '    ' || TO_CHAR(v_pp_ceded_tot,'B$999,999,999MI')
                                 || '    ' || TO_CHAR(v_comm_ceded_tot,'B$999,999,999MI')
                                 || '    ' || TO_CHAR(v_sum_totals,'B$999,999,999MI');
            UTL_FILE.put_line (f2, v_rpt_line || v_cr);
        END IF;

    END IF;


    -- End of procedure: close cursor, close files, update return variables.
    DBMS_SQL.close_cursor (v_cursor);
    UTL_FILE.fclose (f1);
    UTL_FILE.fclose (f2);
    v_numRecs := recs;
    v_total_amount := v_tot_amt_1;


    EXCEPTION
        WHEN OTHERS
        THEN
        v_err_fl := 1;
        v_err_MSSG :=
                'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

        DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
        rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
    END;

END nd_bureau_CAR;
/


CREATE OR REPLACE PACKAGE BODY RPTSTAT.ND_BUREAU_ISO_CSPI
AS
   /******************************************************************************
      NAME:       ND_Bureau_ISO
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        10/12/2015   D.PETERS         1. Created this package body.
      1.1           04/2016   R.Crawford       2. Adapted package body for CSPI.
      1.2        04/28/2017   R.Crawford       3. Updated package to meet new
                                                  reporting requirements effective
                                                  January 1, 2017.
      1.2.1      05/15/2017   R.Crawford       4. Changes to exposure reporting
                                                  to match current requirements
                                                  and correct issues with exposure
                                                  amounts >= 10 million.

      Known issues:

         -- New BOP format generates only a single input record for coverage 335
            instead of splitting the coverage properly between B&C records.
            Partial fix applied, but is not accurate; currently lacking a means
            to properly split the premium between building and contents liability.

         -- BCEG is a newly required field as of 1/1/2017, but no BCEG input data
            is currently available for use. ISO is allowing the use of code 99
            until we can implement the correct BCEG data.

         -- Wind Coverage / Deductible and Rating Modification fields (currently
            optional) have no logic/code/data present - this will be a problem if
            these fields become required in the future.

         -- Exposure values above 9,999,999 are currently truncated (or zeroed)
            in the input data, affecting exposure reporting on a small number
            of policies.

         -- Type of loss handling for outstanding loss reserves is currently
            incorrect; the value is currently taken from the most recent record
            for the claim, should be taken from the original '01' record (not
            guaranteed to be present) or failing that the most recent '11' record
            (not guaranteed to have the type of loss value populated). No possible
            fix at the moment; deferred issue.


   ******************************************************************************/

   v_filename                  VARCHAR2 (40);
   v_submittal_filename        VARCHAR2 (40);
   v_filename_farm             VARCHAR2 (40);
   v_submittal_filename_farm   VARCHAR2 (40);
   v_err_fl                    NUMBER := 0;
   V_BEGIN_DATE                DATE;
   V_END_DATE                  DATE;

   v_end_actg_qtr              VARCHAR2 (4);
   v_return_value              VARCHAR (10);
   v_return_parm1              VARCHAR (10);
   v_return_limit              VARCHAR (10);
   v_run_type                  VARCHAR2 (1);    --- A, P, C -- All, Premiums, or Claims
   v_line                      VARCHAR2 (1);    --- A, B    -- All, Businessowners (only one line is currently reported in this package)
   v_start_time                VARCHAR (20);
   v_end_time                  VARCHAR (20);
   v_record_count              NUMBER := 0;
   v_quarter_run               NUMBER;
   v_year_run                  NUMBER;
   v_Record_Number             NUMBER;

   PROCEDURE a_Main (v_quarter   IN NUMBER,
                     v_year      IN NUMBER,
                     v_type      IN VARCHAR2,
                     v_line      IN VARCHAR2)
   IS
      v_end_qtr           NUMBER := 0;
      v_begin_qtr         NUMBER := 0;
      v_end_qtr_alpha     VARCHAR2 (2);
      v_begin_qtr_alpha   VARCHAR2 (2);
      v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.MAIN';

      v_err_mssg          VARCHAR2 (1024);
      v_err_loc           VARCHAR2 (100);
   BEGIN
      -- select SYSDATE  into v_start_time   from dual;

      SELECT TO_CHAR (SYSDATE, 'DD-MM-YYYY HH:MI:SS')
        INTO v_start_time
        FROM DUAL;

      ---DBMS_OUTPUT.ENABLE(1000000);

      v_quarter_run := v_quarter;
      v_year_run := v_year;

      DBMS_OUTPUT.ENABLE (NULL);
      DBMS_OUTPUT.PUT_LINE (v_procname);
      v_err_loc := 'Main';

      v_run_type := v_type;


      --- 'A' = All
      --- 'P' = Premiums
      IF v_run_type = 'A' OR v_run_type = 'P'
      THEN
         premiums (v_quarter, v_year, v_line);
      END IF;


      --- 'A' = All
      --- 'C' = Claims
      IF v_run_type = 'A' OR v_run_type = 'C'
      THEN
         claims (v_quarter, v_year, v_line);
      END IF;


     IF v_err_fl = 0
      THEN
         DBMS_OUTPUT.PUT_LINE ('End Program');
      ELSE
         DBMS_OUTPUT.PUT_LINE ('End Program with Error');
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE Premiums (v_quarter   IN NUMBER,
                       v_year      IN NUMBER,
                       v_line      IN VARCHAR2)
   IS
      v_end_qtr           NUMBER := 0;
      v_begin_qtr         NUMBER := 0;
      v_end_qtr_alpha     VARCHAR2 (2);
      v_begin_qtr_alpha   VARCHAR2 (2);
      v_num_Recs          NUMBER;
      v_total_amount      NUMBER;
      v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.PREMIUMS';

      v_err_mssg          VARCHAR2 (200);
      v_err_loc           VARCHAR2 (100);
      v_WriteStatus       VARCHAR2 (1);

   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);

      v_err_loc := 'Premiums - Begin';

      v_end_qtr := v_quarter * 3;
      v_begin_qtr := v_end_qtr - 2;
      v_begin_qtr_alpha := LPAD (TO_CHAR (v_begin_qtr), 2, '0');
      v_end_qtr_alpha := LPAD (TO_CHAR (v_end_qtr), 2, '0');
      v_begin_date :=
         TO_DATE (v_begin_qtr_alpha || '01' || TO_CHAR (v_year), 'MMDDYYYY');

      IF v_end_qtr_alpha IN ('06', '09')
      THEN
         v_end_date :=
            TO_DATE (v_end_qtr_alpha || '30' || TO_CHAR (v_year), 'MMDDYYYY');
      ELSE
         v_end_date :=
            TO_DATE (v_end_qtr_alpha || '31' || TO_CHAR (v_year), 'MMDDYYYY');
      END IF;

      v_end_actg_qtr := v_end_qtr_alpha || SUBSTR (TO_CHAR (v_year), 3, 2);


      DBMS_OUTPUT.PUT_LINE (
         'Begin Date' || v_begin_date || ' ' || ' End Date' || v_end_date);


      v_err_loc := 'Premiums - Delete RPT_POLICY_ISO_BO_STAT';

      DELETE FROM RPT_POLICY_ISO_BO_STAT;
      DELETE FROM RPT_POLICY_ISO_BO_STAT_SUMM;
      COMMIT;

      v_WriteStatus := 'W';

      --- 'A' = All
      --- 'B' = Businessowners
      IF TRIM (v_line) = 'A' OR TRIM (v_line) = 'B'
      THEN
         IF (v_err_fl = 0)
         THEN
            v_Record_Number := 0;
            --- Process premiums data
            collect_prem_iso_bo_data_loop;

            --- Summarize Prem Data...
            Summarize_ISO_Prem_BO;

            --- Write premiums records
            write_fixed_file_ISO_LOZ ('P',
                                       '',
                                       '',
                                       'select * from rpt_policy_iso_bo_stat_summ order by RECORD_NUMBER',
                                       'HO_STAT_OUT',
                                       'cspiPREM.txt',
                                       v_WriteStatus,
                                       32000,
                                       v_quarter,
                                       v_year,
                                       '13',
                                       '1',
                                       v_num_Recs,
                                       v_total_amount);
             v_WriteStatus := 'A';

         END IF;
      END IF;


   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

   PROCEDURE Claims (v_quarter   IN NUMBER,
                     v_year      IN NUMBER,
                     v_line      IN VARCHAR2)
   IS
      v_end_qtr           NUMBER := 0;
      v_begin_qtr         NUMBER := 0;
      v_end_qtr_alpha     VARCHAR2 (2);
      v_begin_qtr_alpha   VARCHAR2 (2);
      v_num_Recs          NUMBER;
      v_total_amount      NUMBER;
      v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                             := 'ND_BUREAU.CLAIMS';

      v_err_mssg          VARCHAR2 (200);
      v_err_loc           VARCHAR2 (100);
      v_WriteStatusL      VARCHAR2 (1);
      v_WriteStatusO      VARCHAR2 (1);

   BEGIN
      DBMS_OUTPUT.PUT_LINE (v_procname);
      v_err_loc := 'Claims - Begin';

      v_end_qtr := v_quarter * 3;
      v_begin_qtr := v_end_qtr - 2;
      v_begin_qtr_alpha := LPAD (TO_CHAR (v_begin_qtr), 2, '0');
      v_end_qtr_alpha := LPAD (TO_CHAR (v_end_qtr), 2, '0');
      v_begin_date :=
         TO_DATE (v_begin_qtr_alpha || '01' || TO_CHAR (v_year), 'MMDDYYYY');

      if v_end_qtr_alpha in ('06','09')
      then
          v_end_date := TO_DATE (v_end_qtr_alpha || '30' || TO_CHAR (v_year), 'MMDDYYYY');
      else
          v_end_date := TO_DATE (v_end_qtr_alpha || '31' || TO_CHAR (v_year), 'MMDDYYYY');
      end if;

      v_end_actg_qtr := v_end_qtr_alpha || SUBSTR (TO_CHAR (v_year), 3, 2);

      v_err_loc := 'Claims - Delete RPT_CLAIMS_ISO_BOP_STAT';

      DELETE FROM RPT_CLAIMS_ISO_BO_STAT;
      DELETE FROM RPT_CLAIMS_ISO_BO_STAT_SUMM;
      COMMIT;

      v_WriteStatusL := 'W';
      v_WriteStatusO := 'W';

      --- 'A' = All
      --- 'B' = Businessowners
      IF trim(v_line) = 'A' OR trim(v_line) = 'B'
      THEN
         IF (v_err_fl = 0)
         THEN
            v_Record_Number := 0;
            --- Process claims data
            collect_claim_ISO_bo_paid;
            collect_clm_iso_bo_outstand;

            --- Remove duplicate records, update claim count
            Summarize_ISO_Osls_BO;

            --- Write paid loss records
            write_fixed_file_ISO_LOZ ('A',
                                       '',
                                       '',
                                       'Select * from RPT_CLAIMS_ISO_BO_STAT where Transaction_Type <> 7 order by RECORD_NUMBER',
                                       'HO_STAT_OUT',
                                       'cspiLOSS.txt',
                                       v_WriteStatusL,
                                       32000,
                                       v_quarter,
                                       v_year,
                                       '13',
                                       '2',
                                       v_num_Recs,
                                       v_total_amount);
            v_WriteStatusL := 'A';

            --- Write outstanding loss records
            write_fixed_file_ISO_LOZ ('A',
                                       '',
                                       '',
                                       'Select * from RPT_CLAIMS_ISO_BO_STAT_SUMM where Transaction_Type = 7 order by RECORD_NUMBER',
                                       'HO_STAT_OUT',
                                       'cspiOSLS.txt',
                                       v_WriteStatusO,
                                       32000,
                                       v_quarter,
                                       v_year,
                                       '13',
                                       '3',
                                       v_num_Recs,
                                       v_total_amount);
            v_WriteStatusO := 'A';
         END IF;
      END IF;


   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);
         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

PROCEDURE collect_prem_iso_bo_data_loop
IS

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.COLLECT_PREM_ISO_BO_DATA_LOOP';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR all_bo_stat
    IS
        SELECT *
        FROM RPT_POLICY_BO_STAT A
        WHERE
                a.group_line in ('75')
            AND a.book_date >= (v_begin_date)
            AND a.book_date <= (v_end_date)
            AND a.sdac_ind = '1'
            AND a.item_state_cd <> 'VT'
            AND a.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY')
            AND NOT (a.COVERAGE_CODE > '989' AND a.COVERAGE_CODE < '999')


        ORDER BY A.POLICY_NUMBER,
                 A.ACTG_DATE,
                 A.TRANS_CODE,
                 A.OLD_NEW_STAT,
                 A.ITEM_NUM,
                 A.COVERAGE_CODE;


    bo_stat                                all_bo_stat%ROWTYPE;

--- --- ---


--- BOP Stat Variables                                 ---Character Position
    v_COMPANY_ID                       VARCHAR2(4);     --1:4
    v_TRANSACTION_TYPE                 VARCHAR2(1);     --5
    v_ACT_DATE                         VARCHAR2(2);     --6:7
    v_INC_DATE                         VARCHAR2(3);     --8:10
    v_EFF_DATE                         VARCHAR2(3);     --11:13
    v_EXP_DATE                         VARCHAR2(3);     --14:16
    v_STATE                            VARCHAR2(2);     --17:18
    v_TERRITORY                        VARCHAR2(3);     --19:21
    v_TYPE_POLICY                      VARCHAR2(2);     --22:23
    v_ASL                              VARCHAR2(3);     --24:26
    v_SUBLINE                          VARCHAR2(3);     --27:29
    v_CLASS_CODE                       VARCHAR2(5);     --30:34
    v_COVERAGE                         VARCHAR2(2);     --35:36
    v_RATING_ID                        VARCHAR2(1);     --37
    v_CONSTRUCTION                     VARCHAR2(1);     --38
    v_PROTECTION                       VARCHAR2(2);     --39:40
    --v_FILLER_41                        VARCHAR2(5);     -- changed 4/28/17 --ASI/RJC
    v_DEDUCTIBLE                       VARCHAR2(5);     --41:45
    v_TERRORISM_COVERAGE               VARCHAR2(1);     --46
    v_WIND_COVERAGE                    VARCHAR2(1);     --47
    v_BCEG                             VARCHAR2(2);     --48:49
    v_RATING_BASIS                     VARCHAR2(1);     --50
    v_STATE_EXCEPTION                  VARCHAR2(1);     --51
    v_FILLER_52                        VARCHAR2(2);     --52:53
    v_LIABILITY_LIMITS                 VARCHAR2(5);     --54:58
    v_FILLER_59                        VARCHAR2(1);
    v_FILLER_ISO                       VARCHAR2(1);     --60
    v_LIABILITY_FORM                   VARCHAR2(1);     --61
    v_CLAIMS_ENTRY_DATE                VARCHAR2(3);     --62:64
    v_STATE_EXCEPTION_2                VARCHAR2(1);     --65
    v_FILLER_66                        VARCHAR2(5);
    v_LESSOR_OCC_RISK_IND              VARCHAR2(1);     --71
    v_FILLER_72                        VARCHAR2(4);
    v_STAT_PLAN_INDICATOR              VARCHAR2(1);     --76
    v_LIABILITY_EXP_IND                VARCHAR2(1);     --77
    v_FILLER_78                        VARCHAR2(3);
    v_EXPOSURE                         VARCHAR2(7);     --81:87
    --v_FILLER_88                        VARCHAR2(8);     -- changed 4/28/17 --ASI/RJC
    v_RATING_MOD                       VARCHAR2(3);     --88:90
    v_FILLER_91                        VARCHAR2(5);
    v_PREM_AMOUNT                      NUMBER(8);       --96:103
    v_FILLER_104                       VARCHAR2(1);
    v_ZIP_CODE                         VARCHAR2(9);     --105:113
    v_YEAR_OF_CONSTRUCTION             VARCHAR2(4);     --114:117
    v_PREMIUM_RECORD_ID                VARCHAR2(33);    --118:150


--- Individual record number for testing/debugging/summarization
    --v_RECORD_NUMBER                    NUMBER(6);  -- this is a global field, definition provided for documentation


--- Field for optionally sending debug data through to the output file - to use, comment out the filter on the column name in Procedure "write_fixed_file_ISO_LOZ"
    v_DEBUG_DATA                       VARCHAR2(40);


--- Function Output Fields



--- Procedural Variables
    v_CLASS_SW                         VARCHAR2(1);
    v_TEMP_C87_B81                     VARCHAR2(8);
    v_EXIT_SW                          VARCHAR2(1);
    v_HOLD_COVERAGE                    VARCHAR2(2);
    v_NUM_CONST_YEAR                   NUMBER(4);
    v_NUM_LIABILITY_LIMIT              NUMBER(5);
    --v_NUM_EXPOSURE                     NUMBER(7);  --changed 5/15/2017  --ASI/RJC
    v_NUM_EXPOSURE                     NUMBER(10);



--- --- ---

BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'collect_prem_iso_bo_data_loop_insert';

    OPEN all_bo_stat;

    LOOP
        FETCH all_bo_stat INTO bo_stat;

        EXIT WHEN all_bo_stat%NOTFOUND;



    -- Uncomment when using v_DEBUG_DATA to reset the field to null at the start of each record
        --v_DEBUG_DATA = '';



--- Data conversions and Temp input fields

        -- Convert BOP_CONST_YEAR to numeric value
        v_NUM_CONST_YEAR := TO_NUMBER( NVL(bo_stat.BOP_CONST_YEAR, '0') );


        -- Determine value for v_TEMP_C87_B81
        v_TEMP_C87_B81 := NVL(bo_stat.BOP_C87_B81, ' ');

        IF bo_stat.COVERAGE_CODE = '959' THEN
            IF v_TEMP_C87_B81 = ' ' THEN
                v_TEMP_C87_B81 := NVL(bo_stat.END_NUM, ' ');
            END IF;
        END IF;




--- v_COMPANY_ID                       VARCHAR2(4);
        CASE bo_stat.COMPANY
            WHEN '01' THEN v_COMPANY_ID := '5709';
            WHEN '02' THEN v_COMPANY_ID := '5816';
            WHEN '03' THEN v_COMPANY_ID := '6323';
            WHEN '04' THEN v_COMPANY_ID := '5670';
            ELSE v_COMPANY_ID := '5709';
        END CASE;



--- v_TRANSACTION_TYPE                 VARCHAR2(1);
        v_TRANSACTION_TYPE := '1';



--- v_ACT_DATE                         VARCHAR2(2);
        CASE v_quarter_run
            WHEN 1 THEN v_ACT_Date := '3';
            WHEN 2 THEN v_ACT_Date := '6';
            WHEN 3 THEN v_ACT_Date := '9';
            WHEN 4 THEN v_ACT_Date := '&';
        END CASE;
        v_ACT_Date := v_ACT_Date || SUBSTR( TO_CHAR(v_year_run),(LENGTH(TO_CHAR(v_year_run)) - 1) + 1 , 1);



--- v_INC_DATE                         VARCHAR2(3);
        v_INC_DATE := ISO_Date_Conv(bo_stat.EFF_DATE, 'MYY');



--- v_EFF_DATE                         VARCHAR2(3);
        IF bo_stat.CHANGE_DATE < bo_stat.EFF_DATE THEN
            v_EFF_DATE := ISO_Date_Conv(bo_stat.EFF_DATE, 'MYY');
        ELSE
            v_EFF_DATE := ISO_Date_Conv(bo_stat.CHANGE_DATE, 'MYY');
        END IF;



--- v_EXP_DATE                         VARCHAR2(3);

        -- If CHANGE_DATE < EFF_DATE, check against EFF_DATE, else check against CHANGE_DATE
        IF bo_stat.CHANGE_DATE < bo_stat.EFF_DATE THEN

            -- If EXP_DATE < EFF_DATE, use EFF_DATE
            IF bo_stat.EXP_DATE < bo_stat.EFF_DATE THEN
                v_EXP_DATE := ISO_Date_Conv(bo_stat.EFF_DATE, 'MYY');
            ELSE
                v_EXP_DATE := ISO_Date_Conv(bo_stat.EXP_DATE, 'MYY');
            END IF;

        ELSE
            -- If EXP_DATE < CHANGE_DATE, use CHANGE_DATE
            IF bo_stat.EXP_DATE < bo_stat.CHANGE_DATE THEN
                v_EXP_DATE := ISO_Date_Conv(bo_stat.CHANGE_DATE, 'MYY');
            ELSE
                v_EXP_DATE := ISO_Date_Conv(bo_stat.EXP_DATE, 'MYY');
            END IF;
        END IF;



--- v_STATE                            VARCHAR2(2);
        v_STATE := lu_State_Code(bo_stat.ITEM_STATE_CD);



--- v_TERRITORY                        VARCHAR2(3);
        v_TERRITORY := bo_stat.TERRITORY;

        v_TERRITORY := NVL(v_TERRITORY, '   ');

        IF v_TERRITORY <> '   ' THEN
            v_TERRITORY := LPAD(v_TERRITORY, 3, '0');
        END IF;

        IF v_TERRITORY = '000' THEN
            v_TERRITORY := '999';
        END IF;



--- v_ASL                              VARCHAR2(3);
        IF (bo_stat.COVERAGE_CODE < '400') OR (bo_stat.COVERAGE_CODE IN ('912', '914', '916', '825')) THEN
            v_ASL := '052';
        ELSE
            v_ASL := '051';
        END IF;



--- v_SUBLINE                          VARCHAR2(3);
        v_SUBLINE := '915';



--- v_CLASS_CODE                       VARCHAR2(5);
        v_CLASS_CODE := NVL(bo_stat.CLASS_CODE, ' ');

        -- In case of blank class code, such as on manual stat transactions, call FixBOPClass for class code.
        IF v_CLASS_CODE = ' ' THEN
            v_CLASS_CODE := FixBOPClass(bo_stat.BOP_BUILD_TYPE, bo_stat.BOP_OCCUPANCY, bo_stat.COVERAGE_CODE);
        END IF;


        -- Policies with EFF_DATE 6/1/2014 and after for MA or EFF_DATE 5/1/2015 and after for NJ have a new BOP format.
        -- These records should not have class code converted.
        IF NOT ( (bo_stat.EFF_DATE > TO_DATE('05312014','MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'MA') OR (bo_stat.EFF_DATE > TO_DATE('04302015','MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'NJ') ) THEN

            IF v_CLASS_CODE = '65120' THEN
                v_CLASS_CODE := '65121';
            END IF;

            IF v_CLASS_CODE = '65190' THEN
                v_CLASS_CODE := '65191';
            END IF;


            v_CLASS_SW := '1';
            CASE v_CLASS_CODE
                WHEN '09251' THEN v_CLASS_CODE := '09271';
                WHEN '52512' THEN v_CLASS_CODE := '52522';
                WHEN '54036' THEN v_CLASS_CODE := '54341';
                WHEN '54116' THEN v_CLASS_CODE := '54016';
                WHEN '54127' THEN v_CLASS_CODE := '54341';
                WHEN '54136' THEN v_CLASS_CODE := '54341';
                WHEN '57388' THEN v_CLASS_CODE := '57338';
                WHEN '59695' THEN v_CLASS_CODE := '59705';
                WHEN '59955' THEN v_CLASS_CODE := '59965';
                WHEN '59974' THEN v_CLASS_CODE := '59944';

                WHEN '60999' THEN v_CLASS_CODE := '69145';
                WHEN '65121' THEN v_CLASS_CODE := '65171';
                WHEN '65132' THEN v_CLASS_CODE := '65146';
                WHEN '65133' THEN v_CLASS_CODE := '65144';
                WHEN '65141' THEN v_CLASS_CODE := '65144';
                WHEN '65142' THEN v_CLASS_CODE := '65144';
                WHEN '65198' THEN v_CLASS_CODE := '65171';
                WHEN '71482' THEN v_CLASS_CODE := '71842';
                WHEN '71887' THEN v_CLASS_CODE := '59935';
                WHEN '74001' THEN v_CLASS_CODE := '74231';

                WHEN '74091' THEN v_CLASS_CODE := '74081';
                WHEN '74151' THEN v_CLASS_CODE := '74231';
                WHEN '74211' THEN v_CLASS_CODE := '74231';
                WHEN '74491' THEN v_CLASS_CODE := '74511';
                WHEN '74551' THEN v_CLASS_CODE := '74541';
                WHEN '74581' THEN v_CLASS_CODE := '74591';
                WHEN '74761' THEN v_CLASS_CODE := '74771';
                WHEN '74811' THEN v_CLASS_CODE := '74901';
                WHEN '74881' THEN v_CLASS_CODE := '74231';
                WHEN '75501' THEN v_CLASS_CODE := '75521';

                WHEN '75591' THEN v_CLASS_CODE := '75611';
                WHEN '75621' THEN v_CLASS_CODE := '75641';
                WHEN '75741' THEN v_CLASS_CODE := '75761';
                WHEN '75801' THEN v_CLASS_CODE := '75821';
                WHEN '76011' THEN v_CLASS_CODE := '76061';
                WHEN '76101' THEN v_CLASS_CODE := '76121';

                ELSE v_CLASS_SW := '0';
            END CASE;


            -- Specific to MA policies with effective date before 6/1/2014 and NJ policies with effective date before 5/1/2015.
            -- If the case statement above did not find a match, use FixBOPClass to fix the older BOP class.
            IF v_CLASS_SW = '0' THEN
                IF ( (bo_stat.EFF_DATE < TO_DATE('06012014','MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'MA') OR (bo_stat.EFF_DATE < TO_DATE('05012015','MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'NJ') ) THEN
                    v_CLASS_CODE := FixBOPClass(bo_stat.BOP_BUILD_TYPE, bo_stat.BOP_OCCUPANCY, bo_stat.COVERAGE_CODE);
                END IF;
            END IF;


            -- The following conversions are due to a change in ISO class codes effective 5/1/1989.
            IF bo_stat.EFF_DATE > TO_DATE('05011989','MMDDYYYY') THEN
                IF v_CLASS_CODE = '71931' THEN
                    v_CLASS_CODE := '71961';
                ELSE
                    IF v_CLASS_CODE = '71822' THEN
                        v_CLASS_CODE := '71842';
                    ELSE
                        IF v_CLASS_CODE = '71936' THEN
                            v_CLASS_CODE := '71976';
                        ELSE
                            IF v_CLASS_CODE = '71825' THEN
                                v_CLASS_CODE := '71865';
                            ELSE
                                IF v_CLASS_CODE = '71801' THEN
                                    v_CLASS_CODE := '71811';
                                ELSE
                                    IF v_CLASS_CODE = '71807' THEN
                                        v_CLASS_CODE := '71837';
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;

            -- ISO class codes for Office Buildings effective 9/1/2012.
            -- Lessors' Risk has a building type of 'S'; when the class code is '65171', adjust to '65231'.
            IF bo_stat.BOP_BUILD_TYPE = 'S' THEN
                IF v_CLASS_CODE = '65171' THEN
                    v_CLASS_CODE := '65231';
                END IF;
            END IF;

            -- Fix for Bed & Breakfast class code.
            IF bo_stat.BOP_BUILD_TYPE = 'D' THEN
                v_CLASS_CODE := '69161';
            END IF;

        END IF;


--- v_COVERAGE                         VARCHAR2(2);
        v_COVERAGE := NVL(bo_stat.BOP_COVERAGE, '  ');

        v_EXIT_SW := '0';

        IF bo_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') THEN
            IF (bo_stat.COVERAGE_CODE = '810' AND v_TEMP_C87_B81 = '810') THEN
                v_COVERAGE := '21';
            END IF;

            IF (bo_stat.COVERAGE_CODE = '811' AND v_TEMP_C87_B81 = '811') THEN
                v_COVERAGE := '22';
            END IF;

            IF (bo_stat.COVERAGE_CODE = '335' AND v_TEMP_C87_B81 = '810') THEN
                v_COVERAGE := '23';
            END IF;

            IF (bo_stat.COVERAGE_CODE = '335' AND v_TEMP_C87_B81 = '811') THEN
                v_COVERAGE := '24';
            END IF;
        END IF;

        IF (bo_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'NJ' )THEN
            IF (bo_stat.COVERAGE_CODE = '810' AND SUBSTR(bo_stat.BOP_COVERAGE, 2, 1) = '1') THEN
                v_COVERAGE := '21';
            END IF;

            IF (bo_stat.COVERAGE_CODE = '811' AND SUBSTR(bo_stat.BOP_COVERAGE, 2, 1) = '2') THEN
                v_COVERAGE := '22';
            END IF;

            IF (bo_stat.COVERAGE_CODE = '335' AND SUBSTR(bo_stat.BOP_COVERAGE, 2, 1) = '1') THEN
                v_COVERAGE := '23';
            END IF;

            IF (bo_stat.COVERAGE_CODE = '335' AND SUBSTR(bo_stat.BOP_COVERAGE, 2, 1) = '2') THEN
                v_COVERAGE := '24';
            END IF;
        END IF;

        IF SUBSTR(bo_stat.BOP_COVERAGE, 2, 1) = 'A' THEN
            v_COVERAGE := '19';
        END IF;

        IF bo_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') THEN
            IF bo_stat.COVERAGE_CODE IN ('810', '811', '335') THEN
                IF v_COVERAGE = '  ' THEN
                    v_COVERAGE := '19';
                END IF;

                --GO TO EXIT
                v_EXIT_SW := '1';
            END IF;
        END IF;

        IF v_EXIT_SW <> '1' THEN
            CASE bo_stat.COVERAGE_CODE
                WHEN '810' THEN v_COVERAGE := '01';
                WHEN '811' THEN v_COVERAGE := '02';
                --WHEN '813' THEN v_COVERAGE := '20';    --changed 05/2016
                WHEN '813' THEN v_COVERAGE := '19';
                WHEN '814' THEN v_COVERAGE := '04';
                WHEN '815' THEN v_COVERAGE := '05';
                WHEN '819' THEN v_COVERAGE := '10';
                WHEN '820' THEN v_COVERAGE := '11';
                WHEN '821' THEN v_COVERAGE := '17';
                WHEN '816' THEN v_COVERAGE := '06';
                --WHEN '817' THEN v_COVERAGE := '31';    --changed 05/2016
                WHEN '817' THEN v_COVERAGE := '07';
                WHEN '818' THEN v_COVERAGE := '16';
                WHEN '905' THEN v_COVERAGE := '08';
                ELSE            v_COVERAGE := v_COVERAGE;
            END CASE;

            IF v_TEMP_C87_B81 = 'BP 04 04' THEN
                IF bo_stat.BOP_COVERAGE IN ('13', '14') THEN
                    v_COVERAGE := bo_stat.BOP_COVERAGE;

                    --GO TO EXIT
                    v_EXIT_SW := '1';
                END IF;
            END IF;
        END IF;

        IF v_EXIT_SW <> '1' THEN
            IF bo_stat.COVERAGE_CODE IN ('959', '956') THEN
                v_COVERAGE := '19';
            END IF;

            IF (v_COVERAGE = ' A') OR (v_COVERAGE = '  ') THEN
                v_COVERAGE := '19';
            END IF;


            -- Codes for endorsement-based coverages.
            IF bo_stat.COVERAGE_CODE = '959' THEN
                IF v_COVERAGE = '19' THEN
                    IF v_TEMP_C87_B81 IN ('BP 07 01', 'BP 0706A') THEN
                        v_COVERAGE := '25';
                    END IF;

                    IF v_TEMP_C87_B81 IN ('BP 0701A', 'BP 0706B') THEN
                        v_COVERAGE := '26';    -- This should likely be 46, 47, or 25 depending on the nature of the per tool limit on the coverage.
                    END IF;

                    IF v_TEMP_C87_B81 IN ('BP 0701B', 'BP 0706C') THEN
                        v_COVERAGE := '27';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 0701C' THEN
                        v_COVERAGE := '28';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 0701D' THEN
                        v_COVERAGE := '29';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 0701E' THEN
                        v_COVERAGE := '30';
                    END IF;

                    IF v_TEMP_C87_B81 IN ('BP 04 28', 'BP 04 04') THEN
                        v_COVERAGE := '14';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 01 86' THEN
                        v_COVERAGE := '12';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 04 15' THEN
                        v_COVERAGE := '31';
                    END IF;
                END IF;
            END IF;
        END IF;

    --- EXIT

        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_COVERAGE := '18';
        END IF;



    --- 07/2016 fix for Coverage 335
        IF bo_stat.COVERAGE_CODE = '335' AND v_COVERAGE = '19' THEN
            v_COVERAGE := Get_BOP335_Coverage(bo_stat.POLICY_NUMBER, bo_stat.EFF_DATE, bo_stat.EXP_DATE, bo_stat.ACTG_DATE);
        END IF;



    --- Hold current Coverage value for processing other fields.
        v_HOLD_COVERAGE := v_COVERAGE;


        IF v_COVERAGE = '01' THEN
            IF bo_stat.COVERAGE_CODE > '399' THEN
                v_COVERAGE := '21';
            ELSE
                v_COVERAGE := '23';
            END IF;
        END IF;

        IF v_COVERAGE = '02' THEN
            IF bo_stat.COVERAGE_CODE > '399' THEN
                v_COVERAGE := '22';
            ELSE
                v_COVERAGE := '24';
            END IF;
        END IF;



--- v_TYPE_POLICY                      VARCHAR2(2);
        v_TYPE_POLICY := NVL(bo_stat.CSP_POL_TYPE, '  ');

        IF v_TYPE_POLICY IN ('  ', 'A ', 'F ') THEN
            v_TYPE_POLICY := '10';
        END IF;

        -- Per ISO specs, these classes are not valid with policy type '82' for contents coverage.
        -- Per ISO's suggestion, change policy type to '89'.
        IF v_TRANSACTION_TYPE <> '2' THEN
            IF v_CLASS_CODE IN ('65132', '65133', '65141', '65142', '69145') THEN
                IF v_HOLD_COVERAGE IN ('02', '22', '24') THEN
                    IF v_TYPE_POLICY = '82' THEN
                        v_TYPE_POLICY := '89';
                    END IF;
                END IF;
            END IF;
        END IF;

        IF v_TYPE_POLICY NOT IN ('81', '82', '86', '87', '89') THEN
            v_TYPE_POLICY := '81';
        END IF;



--- v_RATING_ID                        VARCHAR2(1);
        v_RATING_ID := NVL(bo_stat.BOP_CSP_RATE_ID, ' ');

        IF v_HOLD_COVERAGE <> '19' THEN
            v_RATING_ID := NVL(bo_stat.BOP_CSP_RATE_ID, ' ');

            IF v_RATING_ID <> '5' THEN
                v_RATING_ID := '4';
            END IF;
        END IF;

        IF v_RATING_ID = ' ' THEN
            IF v_HOLD_COVERAGE IN ('01', '02', '21', '22', '23', '24') THEN
                v_RATING_ID := '4';
            END IF;
        END IF;


        IF v_COVERAGE NOT IN ('21', '22') THEN
            v_RATING_ID := ' ';
        END IF;



--- v_CONSTRUCTION                     VARCHAR2(1);
        v_CONSTRUCTION := '1';

        IF bo_stat.BOP_CONSTRUCT = 'FR' THEN
            v_CONSTRUCTION := '1';
        END IF;

        IF bo_stat.BOP_CONSTRUCT = 'JM' THEN
            v_CONSTRUCTION := '2';
        END IF;

        IF bo_stat.BOP_CONSTRUCT = 'NC' THEN
            v_CONSTRUCTION := '3';
        END IF;

        IF bo_stat.BOP_CONSTRUCT = 'RE' THEN
            v_CONSTRUCTION := '6';
        END IF;



--- v_PROTECTION                       VARCHAR2(2);
        v_PROTECTION := '  ';

        IF v_HOLD_COVERAGE <> '19' THEN
            v_PROTECTION := NVL(bo_stat.BOP_PROT_CLASS_B83A, '  ');

            --IF v_PROTECTION NOT IN ('08', '09', '10', '11', '15') THEN
            --    v_PROTECTION := '08';
            --END IF;

            --- 07/2016 fix for protection class on Coverage 335
            IF NVL(bo_stat.COVERAGE_CODE, '   ') IN ('335') THEN
                IF v_PROTECTION = '  ' THEN
                    v_PROTECTION := Get_BOP335_Protection(bo_stat.POLICY_NUMBER, bo_stat.EFF_DATE, bo_stat.EXP_DATE, bo_stat.ACTG_DATE);
                END IF;
            END IF;

            --- 07/2016 fix for protection class on Coverages 810 & 811
            IF NVL(bo_stat.COVERAGE_CODE, '   ') IN ('810', '811') THEN
                IF v_PROTECTION = '  ' THEN
                    v_PROTECTION := Get_BOP_Protection(bo_stat.POLICY_NUMBER, bo_stat.ITEM_NUM, bo_stat.EFF_DATE, bo_stat.EXP_DATE, bo_stat.ACTG_DATE);
                END IF;
            END IF;


        END IF;

        IF v_PROTECTION = '  ' THEN
            IF v_HOLD_COVERAGE IN ('01', '02', '21', '22', '23', '24') THEN
                v_PROTECTION := '01';
            END IF;
        END IF;



--- v_FILLER_41                        VARCHAR2(5);  --removed 4/28/17 --ASI/RJC
        --v_FILLER_41 := ' ';


--- v_DEDUCTIBLE                       VARCHAR2(5);  --added 4/28/17 --ASI/RJC
        -- 2017 new requirements
        v_DEDUCTIBLE := ' ';

        IF bo_stat.BOOK_DATE >= TO_DATE('01012017','MMDDYYYY') THEN
            IF NVL(bo_stat.COVERAGE_CODE, '   ') IN ('335', '810', '811') THEN
                CASE
                    WHEN bo_stat.COVERAGE_CODE = '335' THEN    v_DEDUCTIBLE := '00000';
                    ELSE v_DEDUCTIBLE := LPAD(TO_CHAR(NVL(bo_stat.DED_AMT,0)),5,'0');
                END CASE;
            END IF;
        END IF;



--- v_TERRORISM_COVERAGE               VARCHAR2(1);
        v_TERRORISM_COVERAGE := '3';



--- v_WIND_COVERAGE                    VARCHAR2(1);
        v_WIND_COVERAGE := ' ';



--- v_BCEG                             VARCHAR2(2);
        v_BCEG := ' ';

        -- 2017 new requirements    --added 4/24/17 --ASI/RJC
        IF bo_stat.BOOK_DATE >= TO_DATE('01012017','MMDDYYYY') THEN
            IF (v_COVERAGE IN ('01', '02', '21', '22')) OR (v_COVERAGE >= '62' AND v_COVERAGE <= '73') THEN
                v_BCEG := '99';

/*                -- Including code for when the required data is available - replace [[community grade]] and [[building certified]] with the applicable fields once they have been added, adjust code as needed to match datatype.
                IF ([[community grade]] IS NOT NULL) AND ([[community grade]] <> 99) THEN
                    IF [[building certified]] THEN    --building individually certified as grade 1
                        CASE
                            WHEN [[community grade]] =  1 THEN v_BCEG := '11';
                            WHEN [[community grade]] =  2 THEN v_BCEG := '12';
                            WHEN [[community grade]] =  3 THEN v_BCEG := '13';
                            WHEN [[community grade]] =  4 THEN v_BCEG := '14';
                            WHEN [[community grade]] =  5 THEN v_BCEG := '15';
                            WHEN [[community grade]] =  6 THEN v_BCEG := '16';
                            WHEN [[community grade]] =  7 THEN v_BCEG := '17';
                            WHEN [[community grade]] =  8 THEN v_BCEG := '18';
                            WHEN [[community grade]] =  9 THEN v_BCEG := '19';
                            WHEN [[community grade]] = 10 THEN v_BCEG := '20';
                            ELSE v_BCEG := '99';
                        END CASE;
                    ELSE    --building not individually certified
                        CASE
                            WHEN [[community grade]] =  1 THEN v_BCEG := '01';
                            WHEN [[community grade]] =  2 THEN v_BCEG := '02';
                            WHEN [[community grade]] =  3 THEN v_BCEG := '03';
                            WHEN [[community grade]] =  4 THEN v_BCEG := '04';
                            WHEN [[community grade]] =  5 THEN v_BCEG := '05';
                            WHEN [[community grade]] =  6 THEN v_BCEG := '06';
                            WHEN [[community grade]] =  7 THEN v_BCEG := '07';
                            WHEN [[community grade]] =  8 THEN v_BCEG := '08';
                            WHEN [[community grade]] =  9 THEN v_BCEG := '09';
                            WHEN [[community grade]] = 10 THEN v_BCEG := '10';
                            ELSE v_BCEG := '99';
                        END CASE;
                    END IF;
                END IF;
*/
            END IF;
        END IF;



--- v_RATING_BASIS                     VARCHAR2(1);
        v_RATING_BASIS := ' ';

        IF v_HOLD_COVERAGE IN ('01', '21', '23') THEN
            v_RATING_BASIS := NVL(bo_stat.BOP_RATING_BASIS, ' ');

            IF v_RATING_BASIS = ' ' THEN
                v_RATING_BASIS := '1';
            END IF;
        END IF;

        IF v_HOLD_COVERAGE IN ('01', '21') THEN
            v_RATING_BASIS := NVL(bo_stat.BOP_RATING_BASIS, ' ');

            IF ( bo_stat.ITEM_STATE_CD = 'NY' ) OR ( v_RATING_BASIS NOT IN ('1', '2') ) THEN
                IF ( bo_stat.ITEM_STATE_CD <> 'NY' ) OR ( v_RATING_BASIS NOT IN ('1', '2', '7', '8') ) THEN
                    v_RATING_BASIS := '1';
                END IF;
            END IF;
        END IF;

        IF v_HOLD_COVERAGE IN ('23', '24') THEN
            v_RATING_BASIS := '7';
        END IF;

        IF v_HOLD_COVERAGE NOT IN ('01', '21') THEN
            v_RATING_BASIS := ' ';
        END IF;

        IF v_COVERAGE <> '21' THEN
            v_RATING_BASIS := ' ';
        END IF;



--- v_STATE_EXCEPTION                  VARCHAR2(1);
        v_STATE_EXCEPTION := ' ';



--- v_FILLER_52                        VARCHAR2(2);
        v_FILLER_52 := ' ';



--- v_LIABILITY_LIMITS                 VARCHAR2(5);
        v_LIABILITY_LIMITS := ' ';
        v_NUM_LIABILITY_LIMIT := 0;

        IF ( v_HOLD_COVERAGE IN ('01', '02', '21', '22', '23', '24') ) OR ( bo_stat.EFF_DATE >= TO_DATE('09012012', 'MMDDYYYY') ) THEN
            IF NVL(bo_stat.BOP_LIAB_LIM_HOLD, ' ') <> ' ' AND TO_NUMBER(bo_stat.BOP_LIAB_LIM_HOLD) <> 0 THEN
                v_NUM_LIABILITY_LIMIT := TO_NUMBER(bo_stat.BOP_LIAB_LIM_HOLD) / 1000;

                IF v_NUM_LIABILITY_LIMIT = 0 THEN
                    v_LIABILITY_LIMITS := '01000';
                ELSE
                    v_LIABILITY_LIMITS := v_NUM_LIABILITY_LIMIT;
                    v_LIABILITY_LIMITS := LPAD(v_LIABILITY_LIMITS, 5, '0');
                END IF;
            ELSE
                v_LIABILITY_LIMITS := '01000';
            END IF;
        END IF;

        IF v_HOLD_COVERAGE = '14' THEN
            v_LIABILITY_LIMITS := '01000';
        END IF;

        IF bo_stat.EFF_DATE >= TO_DATE('09012012', 'MMDDYYYY') THEN
            IF v_LIABILITY_LIMITS = ' ' THEN
                v_LIABILITY_LIMITS := '01000';
            END IF;
        END IF;

        IF v_COVERAGE NOT IN ('21', '22', '23', '24', '18', '14') THEN
            v_LIABILITY_LIMITS := ' ';
        END IF;



--- v_FILLER_59                        VARCHAR2(1);
        v_FILLER_59 := ' ';


--- v_FILLER_ISO                       VARCHAR2(1);
        v_FILLER_ISO := ' ';


--- v_LIABILITY_FORM                   VARCHAR2(1);    -- Lead Liability
        v_LIABILITY_FORM := '3';

        IF v_HOLD_COVERAGE IN ('01', '02', '23', '24') THEN
            IF bo_stat.ITEM_STATE_CD = 'MA' THEN
                IF bo_stat.BOP_CONST_YEAR < 1977 THEN
                    CASE bo_stat.LEAD_POISON_COV
                        WHEN '1' THEN v_LIABILITY_FORM := 'H';
                        WHEN '2' THEN v_LIABILITY_FORM := 'J';
                        WHEN '3' THEN v_LIABILITY_FORM := 'K';
                        WHEN '4' THEN v_LIABILITY_FORM := 'L';
                        WHEN '5' THEN v_LIABILITY_FORM := 'M';
                        WHEN '6' THEN v_LIABILITY_FORM := 'N';
                        WHEN '7' THEN v_LIABILITY_FORM := 'P';
                        ELSE          v_LIABILITY_FORM := 'P';
                    END CASE;
                END IF;
            END IF;
        END IF;

        IF bo_stat.ITEM_STATE_CD = 'RI' THEN
            IF bo_stat.BOP_CONST_YEAR < 1978 THEN
                v_LIABILITY_FORM := 'P';
            END IF;
        END IF;

        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_LIABILITY_FORM := '9';
        END IF;

        IF v_COVERAGE NOT IN ('23', '24', '18') THEN
            v_LIABILITY_FORM := ' ';
        ELSE
            IF v_STATE NOT IN ('20', '29', '38') THEN
                v_LIABILITY_FORM := '3';
            END IF;
        END IF;



--- v_CLAIMS_ENTRY_DATE                VARCHAR2(3);
        v_CLAIMS_ENTRY_DATE := ' ';


--- v_STATE_EXCEPTION_2                VARCHAR2(1);
        v_STATE_EXCEPTION_2 := ' ';


--- v_FILLER_66                        VARCHAR2(5);
        v_FILLER_66 := ' ';


--- v_LESSOR_OCC_RISK_IND              VARCHAR2(1);
        v_LESSOR_OCC_RISK_IND := ' ';

        IF bo_stat.EFF_DATE >= TO_DATE('09012012', 'MMDDYYYY') THEN
            IF NVL(bo_stat.BOP_OCCUPANCY, ' ') = 'O' THEN
                v_LESSOR_OCC_RISK_IND := '1';
            ELSE
                v_LESSOR_OCC_RISK_IND := '2';
            END IF;
        END IF;


--- v_FILLER_72                        VARCHAR2(4);
        v_FILLER_72 := ' ';


--- v_STAT_PLAN_INDICATOR              VARCHAR2(1);
        v_STAT_PLAN_INDICATOR := 'M';


--- v_LIABILITY_EXP_IND                VARCHAR2(1);
        v_LIABILITY_EXP_IND := ' ';

        IF v_HOLD_COVERAGE IN ('18', '49', '14') THEN
            v_LIABILITY_EXP_IND := '2';
        ELSE
            IF v_HOLD_COVERAGE IN ('23', '24', '13', '15', '33', '43', '50', '51', '52', '53', '54', '55', '56') THEN
                v_LIABILITY_EXP_IND := '7';
            ELSE
                v_LIABILITY_EXP_IND := ' ';
            END IF;
        END IF;

        IF v_COVERAGE NOT IN ('13', '14', '15', '23', '24', '43', '50', '51', '52', '53', '54', '55', '56', 'A2', '18') THEN
            v_LIABILITY_EXP_IND := ' ';
        END IF;

        IF v_COVERAGE IN ('23', '24', '13', '14', '15', '18') THEN
            IF v_LIABILITY_EXP_IND = ' ' THEN
                v_LIABILITY_EXP_IND := '7';
            END IF;
        END IF;


--- v_FILLER_78                        VARCHAR2(3);
        v_FILLER_78 := ' ';


--- v_EXPOSURE                         VARCHAR2(7);
        v_EXPOSURE := ' ';
        v_NUM_EXPOSURE := 0;

        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_NUM_EXPOSURE := bo_stat.BOP_NUM_UNITS;
        END IF;

        IF v_HOLD_COVERAGE = '14' THEN
            v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;

            IF bo_stat.WRITTEN_PREM < 0 THEN
                v_NUM_EXPOSURE := v_NUM_EXPOSURE * -1;
            END IF;
        END IF;

        IF (v_HOLD_COVERAGE IN ('01', '02')) OR  (v_HOLD_COVERAGE > '20' AND v_HOLD_COVERAGE < '31') OR (bo_stat.EFF_DATE >= TO_DATE('09012012', 'MMDDYYYY')) THEN
            IF v_HOLD_COVERAGE NOT IN ('14', '18', '49') THEN

                --v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;  --Changed 5/15/2017 to address omission of data for limits greater than or equal to 10 million.  --ASI/RJC
                IF NVL(bo_stat.EXCESS_LIMIT_SW, ' ') = 'Y' THEN
                    v_NUM_EXPOSURE := bo_stat.EXCESS_LIMIT;
                ELSE
                    v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;
                END IF;


                IF (bo_stat.BOP_LIMIT_AMT_PERSON_EXP <> 0 OR bo_stat.BOP_LIMIT_AMT_OCCUR_EXP <> 0) THEN
                    IF bo_stat.BOP_LIMIT_AMT_PERSON_EXP > 0 THEN
                        v_NUM_EXPOSURE := bo_stat.BOP_LIMIT_AMT_PERSON_EXP;
                    END IF;
                END IF;

                IF v_NUM_EXPOSURE = 0 THEN
                    v_NUM_EXPOSURE := 100000;
                END IF;

                v_NUM_EXPOSURE := TRUNC( (v_NUM_EXPOSURE + 50) / 100 );

                IF bo_stat.WRITTEN_PREM < 0 THEN
                    IF v_NUM_EXPOSURE > 0 THEN
                        v_NUM_EXPOSURE := v_NUM_EXPOSURE * -1;
                    END IF;
                END IF;

            END IF;
        END IF;

        v_EXPOSURE := ISO_Signed_Number(v_NUM_EXPOSURE, 7);

        --Changed 5/5/17 to match current CSP-I requirements.  --ASI/RJC
        --IF NOT ( ( v_HOLD_COVERAGE IN ('01', '02', '18', '21', '22', '23', '24', '14', '04', '05', '07') ) OR ( v_HOLD_COVERAGE > '24' AND v_HOLD_COVERAGE < '32' ) ) THEN
        IF v_COVERAGE IN ('12', '19', 'A1', 'B1') THEN
            v_EXPOSURE := ' ';
        END IF;



--- v_FILLER_88                        VARCHAR2(8);  --removed 4/28/17 --ASI/RJC
        --v_FILLER_88 := ' ';


--- v_RATING_MOD                       VARCHAR2(3);  --added 4/28/17 --ASI/RJC
        -- 2017 new requirements, optional field
        v_RATING_MOD := ' ';


--- v_FILLER_91                        VARCHAR2(5);  --added 4/28/17 --ASI/RJC
        v_FILLER_91 := ' ';



--- v_PREM_AMOUNT                      NUMBER(8);
        v_PREM_AMOUNT := ROUND(bo_stat.WRITTEN_PREM);

        IF bo_stat.WRITTEN_PREM < 1 AND bo_stat.WRITTEN_PREM > 0 THEN
            v_PREM_AMOUNT := 1;
        END IF;

        IF bo_stat.WRITTEN_PREM > -1 AND bo_stat.WRITTEN_PREM < 0 THEN
            v_PREM_AMOUNT := -1;
        END IF;



--- v_FILLER_104                       VARCHAR2(1);
        v_FILLER_104 := ' ';


--- v_ZIP_CODE                         VARCHAR2(9);
        v_ZIP_CODE := NVL(bo_stat.LOC_ZIP, ' ');


--- v_YEAR_OF_CONSTRUCTION             VARCHAR2(4);
        v_YEAR_OF_CONSTRUCTION := '  ';

        IF bo_stat.EFF_DATE > TO_DATE('04302015', 'MMDDYYYY') THEN
            IF v_HOLD_COVERAGE IN ('01', '02', '21', '22') THEN
                v_YEAR_OF_CONSTRUCTION := LPAD(TO_CHAR(MOD(v_NUM_CONST_YEAR, 100)), 2, '0');

                IF v_NUM_CONST_YEAR < 1901 THEN
                    v_YEAR_OF_CONSTRUCTION := '99';
                ELSE
                    IF v_NUM_CONST_YEAR > 1998 THEN
                        IF v_NUM_CONST_YEAR = 1999 THEN
                            v_YEAR_OF_CONSTRUCTION := 'NN';
                        ELSE
                            IF v_NUM_CONST_YEAR = 2000 THEN
                                v_YEAR_OF_CONSTRUCTION := 'TT';
                            ELSE
                                IF v_NUM_CONST_YEAR < 2010 THEN
                                    v_YEAR_OF_CONSTRUCTION := 'T';
                                ELSE
                                    IF v_NUM_CONST_YEAR < 2020 THEN
                                        v_YEAR_OF_CONSTRUCTION := 'A';
                                    ELSE
                                        IF v_NUM_CONST_YEAR < 2030 THEN
                                            v_YEAR_OF_CONSTRUCTION := 'B';
                                        ELSE
                                            IF v_NUM_CONST_YEAR < 2040 THEN
                                                v_YEAR_OF_CONSTRUCTION := 'C';
                                            ELSE
                                                IF v_NUM_CONST_YEAR < 2050 THEN
                                                    v_YEAR_OF_CONSTRUCTION := 'D';
                                                ELSE
                                                    IF v_NUM_CONST_YEAR < 2060 THEN
                                                        v_YEAR_OF_CONSTRUCTION := 'E';
                                                    ELSE
                                                        IF v_NUM_CONST_YEAR < 2070 THEN
                                                            v_YEAR_OF_CONSTRUCTION := 'F';
                                                        ELSE
                                                            IF v_NUM_CONST_YEAR < 2080 THEN
                                                                v_YEAR_OF_CONSTRUCTION := 'G';
                                                            ELSE
                                                                IF v_NUM_CONST_YEAR < 2090 THEN
                                                                    v_YEAR_OF_CONSTRUCTION := 'H';
                                                                ELSE
                                                                    v_YEAR_OF_CONSTRUCTION := 'I';
                                                                END IF;
                                                            END IF;
                                                        END IF;
                                                    END IF;
                                                END IF;
                                            END IF;
                                        END IF;
                                    END IF;
                                END IF;

                                v_YEAR_OF_CONSTRUCTION := v_YEAR_OF_CONSTRUCTION || TO_CHAR(MOD(v_NUM_CONST_YEAR, 10));
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



--- v_PREMIUM_RECORD_ID                VARCHAR2(33);
        -- MODULE & POLICY NUMBER
        v_PREMIUM_RECORD_ID := '13' || RPAD(bo_stat.POLICY_NUMBER, 10, ' ');

        -- ITEM NUMBER
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || LPAD(TO_CHAR(NVL(bo_stat.ITEM_NUM, 0)), 3, '0');

        -- COVERAGE/ENDORSEMENT
        IF NVL(v_TEMP_C87_B81, ' ') <> ' ' THEN
            v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || RPAD(v_TEMP_C87_B81, 8, ' ');
        ELSE
            v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || RPAD(bo_stat.COVERAGE_CODE, 8, ' ');
        END IF;

        -- YEAR CONSTR
        IF v_HOLD_COVERAGE IN ('01', '02', '18', '23', '24') THEN
            v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || RPAD(SUBSTR(NVL(bo_stat.BOP_CONST_YEAR, '00000'), 2, 4), 4, ' ');
        ELSE
            v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || '    ';
        END IF;

        -- RECD NUM
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || '  ';

        -- TAPE IND & REPT LVL
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || 'CF' || '  ';



--- v_RECORD_NUMBER                    NUMBER(6);
        v_RECORD_NUMBER := NVL(v_RECORD_NUMBER, 0) + 1;



--- "NOT BUILDING OR CONTENTS" LAYOUT
    -- Set the following fields to blank if the record is not Building or Contents coverage
    IF v_COVERAGE NOT IN ('21', '22', '23', '24', '18') THEN
        v_RATING_ID         := ' ';
        v_CONSTRUCTION      := ' ';
        v_PROTECTION        := ' ';
        v_WIND_COVERAGE     := ' ';
        v_BCEG              := ' ';
        v_RATING_BASIS      := ' ';
        v_STATE_EXCEPTION   := ' ';
        v_LIABILITY_FORM    := ' ';
        v_CLAIMS_ENTRY_DATE := ' ';
        v_STATE_EXCEPTION_2 := ' ';  --added 04/28/17  --ASI/JRC
    END IF;



--- v_DEBUG_DATA                       VARCHAR2(40);
    -- This field is used for optionally sending debug data through to the output file.
    -- Uncomment filter on column name in Procedure "write_fixed_file_ISO_LOZ" before running submission.
        v_DEBUG_DATA := '.';



--- --- ---

        INSERT INTO RPT_POLICY_ISO_BO_STAT (
            COMPANY_ID                   ,
            TRANSACTION_TYPE             ,
            ACT_DATE                     ,
            INC_DATE                     ,
            EFF_DATE                     ,
            EXP_DATE                     ,
            STATE                        ,
            TERRITORY                    ,
            TYPE_POLICY                  ,
            ASL                          ,
            SUBLINE                      ,
            CLASS_CODE                   ,
            COVERAGE                     ,
            RATING_ID                    ,
            CONSTRUCTION                 ,
            PROTECTION                   ,
            --FILLER_41                    ,
            DEDUCTIBLE                   ,
            TERRORISM_COVERAGE           ,
            WIND_COVERAGE                ,
            BCEG                         ,
            RATING_BASIS                 ,
            STATE_EXCEPTION              ,
            FILLER_52                    ,
            LIABILITY_LIMITS             ,
            FILLER_59                    ,
            FILLER_ISO                   ,
            LIABILITY_FORM               ,
            CLAIMS_ENTRY_DATE            ,
            STATE_EXCEPTION_2            ,
            FILLER_66                    ,
            LESSOR_OCC_RISK_IND          ,
            FILLER_72                    ,
            STAT_PLAN_INDICATOR          ,
            LIABILITY_EXP_IND            ,
            FILLER_78                    ,
            EXPOSURE                     ,
            --FILLER_88                    ,
            RATING_MOD                   ,
            FILLER_91                    ,
            PREM_AMOUNT                  ,
            FILLER_104                   ,
            ZIP_CODE                     ,
            YEAR_OF_CONSTRUCTION         ,
            PREMIUM_RECORD_ID            ,
            RECORD_NUMBER                ,
            DEBUG_DATA                   ,
            NUM_EXPOSURE                 ,
            OUTPUT_SW
        ) VALUES (
            v_COMPANY_ID                 ,
            v_TRANSACTION_TYPE           ,
            v_ACT_DATE                   ,
            v_INC_DATE                   ,
            v_EFF_DATE                   ,
            v_EXP_DATE                   ,
            v_STATE                      ,
            v_TERRITORY                  ,
            v_TYPE_POLICY                ,
            v_ASL                        ,
            v_SUBLINE                    ,
            v_CLASS_CODE                 ,
            v_COVERAGE                   ,
            v_RATING_ID                  ,
            v_CONSTRUCTION               ,
            v_PROTECTION                 ,
            --v_FILLER_41                  ,
            v_DEDUCTIBLE                 ,
            v_TERRORISM_COVERAGE         ,
            v_WIND_COVERAGE              ,
            v_BCEG                       ,
            v_RATING_BASIS               ,
            v_STATE_EXCEPTION            ,
            v_FILLER_52                  ,
            v_LIABILITY_LIMITS           ,
            v_FILLER_59                  ,
            v_FILLER_ISO                 ,
            v_LIABILITY_FORM             ,
            v_CLAIMS_ENTRY_DATE          ,
            v_STATE_EXCEPTION_2          ,
            v_FILLER_66                  ,
            v_LESSOR_OCC_RISK_IND        ,
            v_FILLER_72                  ,
            v_STAT_PLAN_INDICATOR        ,
            v_LIABILITY_EXP_IND          ,
            v_FILLER_78                  ,
            v_EXPOSURE                   ,
            --v_FILLER_88                  ,
            v_RATING_MOD                 ,
            v_FILLER_91                  ,
            v_PREM_AMOUNT                ,
            v_FILLER_104                 ,
            v_ZIP_CODE                   ,
            v_YEAR_OF_CONSTRUCTION       ,
            v_PREMIUM_RECORD_ID          ,
            v_RECORD_NUMBER              ,
            v_DEBUG_DATA                 ,
            v_NUM_EXPOSURE               ,
            ' '
        );

        COMMIT;

    END LOOP;

--- --- ---

    CLOSE all_bo_stat;
    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG || bo_stat.policy_number);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;
PROCEDURE collect_claim_iso_bo_paid
IS

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.COLLECT_CLAIM_ISO_BO_PAID';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR all_bo_stat
    IS
        SELECT *
        FROM RPT_CLAIMS_BO_STAT A
        WHERE
                a.group_line in ('75')
            AND a.book_date >= (v_begin_date)
            AND a.book_date <= (v_end_date)
            AND a.eff_date > TO_DATE ('12/31/' || TO_CHAR(v_year_run - 10), 'MM/DD/YYYY')
            AND a.loss_date > TO_DATE ('12/31/' || TO_CHAR(v_year_run - 10), 'MM/DD/YYYY')
            AND a.eff_date >= TO_DATE ('01012008', 'MMDDYYYY')
            AND a.sdac_ind = '1'
            AND a.item_state_cd <> 'VT'

            AND a.trans_code IN
                            ('41', '51', '61',
                             '42', '52', '62',
                             '44', '54', '64',
                             '53', '55',
                             '47', '57', '67',
                             '48', '58', '68',
                             '71', '81', '91',
                             '72', '82', '92',
                             '73', '83', '93',
                             '86', '87')
            AND NOT (a.trans_code = '53' and a.user_line not in ('75', '76'))

        ORDER BY A.CLAIM_NUMBER,
                 A.CLAIMANT_NUMBER,
                 A.ACTG_DATE,
                 A.COVERAGE_CODE;


    bo_stat                                all_bo_stat%ROWTYPE;

--- --- ---


--- BOP Stat Variables                                 ---Character Position
    v_COMPANY_ID                       VARCHAR2(4);     --1:4
    v_TRANSACTION_TYPE                 VARCHAR2(1);     --5
    v_ACT_DATE                         VARCHAR2(2);     --6:7
    v_INC_DATE                         VARCHAR2(3);     --8:10
    v_LOSS_DATE                        VARCHAR2(5);     --11:15
    v_STAT_PLAN_INDICATOR              VARCHAR2(1);     --16
    v_STATE                            VARCHAR2(2);     --17:18
    v_TERRITORY                        VARCHAR2(3);     --19:21
    v_TYPE_POLICY                      VARCHAR2(2);     --22:23
    v_ASL                              VARCHAR2(3);     --24:26
    v_SUBLINE                          VARCHAR2(3);     --27:29
    v_CLASS_CODE                       VARCHAR2(5);     --30:34
    v_COVERAGE                         VARCHAR2(2);     --35:36
    v_RATING_ID                        VARCHAR2(1);     --37
    v_CONSTRUCTION                     VARCHAR2(1);     --38
    v_PROTECTION                       VARCHAR2(2);     --39:40
    --v_FILLER_41                        VARCHAR2(5);     --41:45
    v_DEDUCTIBLE                       VARCHAR2(5);     --41:45
    v_TERRORISM_COVERAGE               VARCHAR2(1);     --46
    v_WIND_COVERAGE                    VARCHAR2(1);     --47
    v_BCEG                             VARCHAR2(2);     --48:49
    v_RATING_BASIS                     VARCHAR2(1);     --50
    v_STATE_EXCEPTION                  VARCHAR2(1);     --51
    v_FILLER_52                        VARCHAR2(2);     --52:53
    v_LIABILITY_LIMITS                 VARCHAR2(5);     --54:58
    v_FILLER_59                        VARCHAR2(1);     --59
    v_FILLER_ISO                       VARCHAR2(1);     --60
    v_LIABILITY_FORM                   VARCHAR2(1);     --61
    v_CLAIMS_ENTRY_DATE                VARCHAR2(3);     --62:64
    v_CLAIMS_NOTICE_DATE               VARCHAR2(3);     --65:67
    v_LIABILITY_EXP_IND                VARCHAR2(1);     --68
    v_FILLER_69                        VARCHAR2(1);     --69
    v_TYPE_OF_LOSS                     VARCHAR2(2);     --70:71
    v_CLAIM_COUNT                      VARCHAR2(1);     --72
    v_ZIP_CODE_FIRST_5                 VARCHAR2(5);     --73:77
    v_LESSOR_OCC_RISK_IND              VARCHAR2(1);     --78
    v_FILLER_79                        VARCHAR2(1);     --79
    v_STATE_EXCEPTION_2                VARCHAR2(1);     --80
    v_EXPOSURE                         VARCHAR2(7);     --81:87
    v_ZIP_CODE_LAST_4                  VARCHAR2(4);     --88:91
    v_YEAR_OF_CONSTRUCTION             VARCHAR2(4);     --92:95
    v_LOSS_AMOUNT                      NUMBER(8);       --96:103
    v_OCCURRENCE_ID                    VARCHAR2(12);    --104:115
    v_CLAIM_ID                         VARCHAR2(2);     --116:117
    v_PREMIUM_RECORD_ID                VARCHAR2(33);    --118:150


--- Individual record number for testing/debugging/summarization
    --v_RECORD_NUMBER                    NUMBER(6);  -- this is a global field, definition provided for documentation


--- Field for optionally sending debug data through to the output file - to use, comment out the filter on the column name in Procedure "write_fixed_file_ISO_LOZ"
    v_DEBUG_DATA                       VARCHAR2(40);


--- Full accounting date for summarization
    v_SUMM_ACTG_DATE                   VARCHAR2(8);



--- Function Output Fields



--- Procedural Variables
    v_CLASS_SW                         VARCHAR2(1);
    v_TEMP_C87_B81                     VARCHAR2(8);
    v_HOLD_COVERAGE                    VARCHAR2(2);
    v_NUM_CONST_YEAR                   NUMBER(4);
    v_LOSS_SW                          VARCHAR2(1);
    v_TEMP_LOSS                        VARCHAR2(2);
    v_HOLD_TYPE_POLICY                 VARCHAR2(2);
    --v_NUM_EXPOSURE                     NUMBER(7);  --changed 5/15/2017  --ASI/RJC
    v_NUM_EXPOSURE                     NUMBER(10);


--- --- ---

BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'collect_clm_iso_bo_paid_insert';

    OPEN all_bo_stat;

    LOOP
        FETCH all_bo_stat INTO bo_stat;

        EXIT WHEN all_bo_stat%NOTFOUND;



    -- Uncomment when using v_DEBUG_DATA to reset the field to null at the start of each record
        --v_DEBUG_DATA = '';



--- Data conversions and Temp input fields

        -- Convert BOP_CONST_YEAR to numeric value
        v_NUM_CONST_YEAR := TO_NUMBER( NVL(bo_stat.BOP_CONST_YEAR, '0') );


        -- Determine value for v_TEMP_C87_B81
        v_TEMP_C87_B81 := NVL(bo_stat.BOP_C87_B81, ' ');

        IF bo_stat.COVERAGE_CODE = '959' THEN
            IF v_TEMP_C87_B81 = ' ' THEN
                v_TEMP_C87_B81 := NVL(bo_stat.END_NUM, ' ');
            END IF;
        END IF;




--- v_COMPANY_ID                       VARCHAR2(4);
        CASE bo_stat.COMPANY
            WHEN '01' THEN v_COMPANY_ID := '5709';
            WHEN '02' THEN v_COMPANY_ID := '5816';
            WHEN '03' THEN v_COMPANY_ID := '6323';
            WHEN '04' THEN v_COMPANY_ID := '5670';
            ELSE v_COMPANY_ID := '5709';
        END CASE;



--- v_TRANSACTION_TYPE                 VARCHAR2(1);
        IF bo_stat.TRANS_CODE IN ('41', '51', '61', '31') THEN
            v_TRANSACTION_TYPE := '6';
        END IF;

        IF bo_stat.TRANS_CODE = '00' THEN
            v_TRANSACTION_TYPE := '7';
        END IF;

        IF bo_stat.TRANS_CODE IN ('42', '43', '44', '45', '47', '52', '53', '54', '55', '57', '62', '63', '64', '65', '67') THEN
            v_TRANSACTION_TYPE := '8';
        END IF;

        IF bo_stat.TRANS_CODE IN ('71', '72', '73', '81', '82', '86', '87', '83', '91', '92', '93') THEN
            v_TRANSACTION_TYPE := '6';
        END IF;



--- v_ACT_DATE                         VARCHAR2(2);
        CASE v_quarter_run
            WHEN 1 THEN v_ACT_Date := '3';
            WHEN 2 THEN v_ACT_Date := '6';
            WHEN 3 THEN v_ACT_Date := '9';
            WHEN 4 THEN v_ACT_Date := '&';
        END CASE;
        v_ACT_Date := v_ACT_Date || SUBSTR( TO_CHAR(v_year_run),(LENGTH(TO_CHAR(v_year_run)) - 1) + 1 , 1);



--- v_INC_DATE                         VARCHAR2(3);
        v_INC_DATE := ISO_Date_Conv(bo_stat.EFF_DATE, 'MYY');



--- v_LOSS_DATE                        VARCHAR2(5);
        v_LOSS_DATE := ISO_Date_Conv(bo_stat.LOSS_DATE, 'MYY') || LPAD( TO_CHAR( EXTRACT( DAY FROM bo_stat.LOSS_DATE)), 2, '0');



--- v_STAT_PLAN_INDICATOR              VARCHAR2(1);
        v_STAT_PLAN_INDICATOR := 'M';



--- v_STATE                            VARCHAR2(2);
        v_STATE := lu_State_Code(bo_stat.ITEM_STATE_CD);



--- v_TERRITORY                        VARCHAR2(3);
        v_TERRITORY := bo_stat.TERRITORY;

        v_TERRITORY := NVL(v_TERRITORY, '   ');

        IF v_TERRITORY <> '   ' THEN
            v_TERRITORY := LPAD(v_TERRITORY, 3, '0');
        END IF;

        IF bo_stat.CSP_SUBLINE IN ('313', '316') THEN
            v_TERRITORY := '999';
        END IF;

        IF v_TERRITORY = '000' THEN
            v_TERRITORY := '999';
        END IF;



--- v_ASL                              VARCHAR2(3);
        IF (bo_stat.COVERAGE_CODE < '400') OR (bo_stat.COVERAGE_CODE IN ('912', '914', '916', '825')) THEN
            v_ASL := '052';
        ELSE
            v_ASL := '051';
        END IF;



--- v_SUBLINE                          VARCHAR2(3);
        v_SUBLINE := '915';



--- v_CLASS_CODE                       VARCHAR2(5);
        v_CLASS_CODE := NVL(bo_stat.CLASS_CODE, ' ');


        -- Policies with EFF_DATE 6/1/2014 and after for MA or EFF_DATE 5/1/2015 and after for NJ have a new BOP format.
        -- Claims with loss date before 4/1/2010 have an older BOP format.
        -- These records should not have class code converted.
        IF NOT ( (bo_stat.EFF_DATE > TO_DATE('05312014', 'MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'MA') OR (bo_stat.EFF_DATE > TO_DATE('04302015', 'MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'NJ') OR (bo_stat.LOSS_DATE < TO_DATE('04012010', 'MMDDYYYY') ) ) THEN

            IF bo_stat.CLASS_CODE = '71931' THEN
                v_CLASS_CODE := '71961';
            ELSE
                IF bo_stat.CLASS_CODE = '71822' THEN
                    v_CLASS_CODE := '71842';
                ELSE
                    IF bo_stat.CLASS_CODE = '71936' THEN
                        v_CLASS_CODE := '71976';
                    ELSE
                        IF bo_stat.CLASS_CODE = '71825' THEN
                            v_CLASS_CODE := '71865';
                        ELSE
                            IF bo_stat.CLASS_CODE = '71801' THEN
                                v_CLASS_CODE := '71811';
                            ELSE
                                IF bo_stat.CLASS_CODE = '71807' THEN
                                    v_CLASS_CODE := '71837';
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;


            v_CLASS_SW := '1';
            CASE v_CLASS_CODE
                WHEN '09251' THEN v_CLASS_CODE := '09271';
                WHEN '52512' THEN v_CLASS_CODE := '52522';
                WHEN '54036' THEN v_CLASS_CODE := '54341';
                WHEN '54116' THEN v_CLASS_CODE := '54016';
                WHEN '54127' THEN v_CLASS_CODE := '54341';
                WHEN '54136' THEN v_CLASS_CODE := '54341';
                WHEN '57388' THEN v_CLASS_CODE := '57338';
                WHEN '59695' THEN v_CLASS_CODE := '59705';
                WHEN '59955' THEN v_CLASS_CODE := '59965';
                WHEN '59974' THEN v_CLASS_CODE := '59944';

                WHEN '60999' THEN v_CLASS_CODE := '69145';
                WHEN '65121' THEN v_CLASS_CODE := '65171';
                WHEN '65132' THEN v_CLASS_CODE := '65146';
                WHEN '65133' THEN v_CLASS_CODE := '65144';
                WHEN '65141' THEN v_CLASS_CODE := '65144';
                WHEN '65142' THEN v_CLASS_CODE := '65144';
                WHEN '65198' THEN v_CLASS_CODE := '65171';
                WHEN '71482' THEN v_CLASS_CODE := '71842';
                WHEN '71887' THEN v_CLASS_CODE := '59935';
                WHEN '74001' THEN v_CLASS_CODE := '74231';

                WHEN '74091' THEN v_CLASS_CODE := '74081';
                WHEN '74151' THEN v_CLASS_CODE := '74231';
                WHEN '74211' THEN v_CLASS_CODE := '74231';
                WHEN '74491' THEN v_CLASS_CODE := '74511';
                WHEN '74551' THEN v_CLASS_CODE := '74541';
                WHEN '74581' THEN v_CLASS_CODE := '74591';
                WHEN '74761' THEN v_CLASS_CODE := '74771';
                WHEN '74811' THEN v_CLASS_CODE := '74901';
                WHEN '74881' THEN v_CLASS_CODE := '74231';
                WHEN '75501' THEN v_CLASS_CODE := '75521';

                WHEN '75591' THEN v_CLASS_CODE := '75611';
                WHEN '75621' THEN v_CLASS_CODE := '75641';
                WHEN '75741' THEN v_CLASS_CODE := '75761';
                WHEN '75801' THEN v_CLASS_CODE := '75821';
                WHEN '76011' THEN v_CLASS_CODE := '76061';
                WHEN '76101' THEN v_CLASS_CODE := '76121';

                ELSE v_CLASS_SW := '0';
            END CASE;


            -- Specific to MA policies with effective date before 6/1/2014 and NJ policies with effective date before 5/1/2015.
            -- If the case statement above did not find a match, use FixBOPClass to fix the older BOP class.
            IF v_CLASS_SW = '0' THEN
                IF (bo_stat.EFF_DATE < TO_DATE('06012014', 'MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'MA') OR (bo_stat.EFF_DATE < TO_DATE('05012015', 'MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'NJ') THEN
                    v_CLASS_CODE := FixBOPClass(bo_stat.BOP_BUILD_TYPE, bo_stat.BOP_OCCUPANCY, bo_stat.COVERAGE_CODE);
                END IF;
            END IF;


            -- ISO class codes for Office Buildings effective 9/1/2012.
            -- Lessors' Risk has a building type of 'S'; when the class code is '65171', adjust to '65231'.
            IF bo_stat.BOP_BUILD_TYPE = 'S' THEN
                IF v_CLASS_CODE = '65171' THEN
                    v_CLASS_CODE := '65231';
                END IF;
            END IF;

        END IF;



--- v_COVERAGE                         VARCHAR2(2);
        v_COVERAGE := NVL(bo_stat.BOP_COVERAGE, '  ');

        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_COVERAGE := '18';
        END IF;

        IF bo_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') THEN

            IF bo_stat.COVERAGE_CODE = '810' THEN
                v_COVERAGE := '01';
            END IF;

            IF bo_stat.COVERAGE_CODE IN ('811', '951') THEN
                v_COVERAGE := '02';
            END IF;

            IF bo_stat.COVERAGE_CODE = '813' THEN
                --v_COVERAGE := '20';    --changed 05/2016
                v_COVERAGE := '19';
            END IF;

            IF bo_stat.COVERAGE_CODE = '814' THEN
                v_COVERAGE := '04';
            END IF;

            IF bo_stat.COVERAGE_CODE = '815' THEN
                v_COVERAGE := '05';
            END IF;

            IF bo_stat.COVERAGE_CODE = '819' THEN
                v_COVERAGE := '10';
            END IF;

            IF bo_stat.COVERAGE_CODE = '820' THEN
                v_COVERAGE := '11';
            END IF;

            IF bo_stat.COVERAGE_CODE = '821' THEN
                v_COVERAGE := '17';
            END IF;

            IF bo_stat.COVERAGE_CODE = '816' THEN
                v_COVERAGE := '06';
            END IF;

            IF bo_stat.COVERAGE_CODE = '817' THEN
                --v_COVERAGE := '31';    --changed 05/2016
                v_COVERAGE := '07';
            END IF;

            IF bo_stat.COVERAGE_CODE = '818' THEN
                v_COVERAGE := '16';
            END IF;

            IF bo_stat.COVERAGE_CODE = '905' THEN
                v_COVERAGE := '08';
            END IF;

            IF bo_stat.COVERAGE_CODE IN ('959', '956') THEN
                v_COVERAGE := '19';
            END IF;

            IF bo_stat.COVERAGE_CODE = '335' THEN
                IF SUBSTR(bo_stat.BOP_COVERAGE, 2, 1) = '1' THEN
                    v_COVERAGE := '23';
                ELSE
                    IF SUBSTR(bo_stat.BOP_COVERAGE, 2, 1) = '2' THEN
                        v_COVERAGE := '24';
                    END IF;
                END IF;
            END IF;

            IF v_COVERAGE IN ('  ', ' A') THEN
                v_COVERAGE := '19';
            END IF;


            -- Codes for endorsement-based coverages.
            IF bo_stat.COVERAGE_CODE = '959' THEN
                IF v_COVERAGE = '19' THEN
                    IF v_TEMP_C87_B81 IN ('BP 07 01', 'BP 0706A') THEN
                        v_COVERAGE := '25';
                    END IF;

                    IF v_TEMP_C87_B81 IN ('BP 0701A', 'BP 0706B') THEN
                        v_COVERAGE := '26';    -- This should likely be 46, 47, or 25 depending on the nature of the per tool limit on the coverage.
                    END IF;

                    IF v_TEMP_C87_B81 IN ('BP 0701B', 'BP 0706C') THEN
                        v_COVERAGE := '27';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 0701C' THEN
                        v_COVERAGE := '28';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 0701D' THEN
                        v_COVERAGE := '29';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 0701E' THEN
                        v_COVERAGE := '30';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 04 28' THEN
                        v_COVERAGE := '14';
                    END IF;
                END IF;
            END IF;

        END IF;


        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_COVERAGE := '18';
        END IF;



    --- 07/2016 fix for Coverage 335
        IF bo_stat.COVERAGE_CODE = '335' AND v_COVERAGE = '19' THEN
            v_COVERAGE := Get_BOP335_Coverage(bo_stat.POLICY_NUMBER, bo_stat.EFF_DATE, bo_stat.EXP_DATE, bo_stat.LOSS_DATE);
        END IF;



    --- Hold current Coverage value for processing other fields.
        v_HOLD_COVERAGE := v_COVERAGE;


        IF v_COVERAGE = '01' THEN
            IF bo_stat.COVERAGE_CODE > '399' THEN
                v_COVERAGE := '21';
            ELSE
                v_COVERAGE := '23';
            END IF;
        END IF;

        IF v_COVERAGE = '02' THEN
            IF bo_stat.COVERAGE_CODE > '399' THEN
                v_COVERAGE := '22';
            ELSE
                v_COVERAGE := '24';
            END IF;
        END IF;



--- v_TYPE_POLICY                      VARCHAR2(2);
        v_TYPE_POLICY := NVL(bo_stat.CSP_POL_TYPE, '  ');

        IF v_TYPE_POLICY IN ('  ', 'A ', 'F ') THEN
            v_TYPE_POLICY := '10';
        END IF;

        IF v_TYPE_POLICY > '30' AND v_TYPE_POLICY < '3Z' THEN
            v_TYPE_POLICY := '30';
        END IF;

        IF v_TYPE_POLICY > '11' AND v_TYPE_POLICY < '1Z' THEN
            v_TYPE_POLICY := '10';
        END IF;


        -- Per ISO specs, these classes are not valid with policy type '82' for contents coverage.
        -- Per ISO's suggestion, change policy type to '89'.
        IF bo_stat.CLASS_CODE IN ('65132', '65133', '65141', '65142', '69145') THEN
            IF v_HOLD_COVERAGE IN ('02', '22', '24') THEN
                IF v_TYPE_POLICY = '82' THEN
                    v_TYPE_POLICY := '89';
                END IF;
            END IF;
        END IF;


    --- Hold current value of Type of Policy for processing Type of Loss.
        v_HOLD_TYPE_POLICY := v_TYPE_POLICY;


        IF TRIM(v_HOLD_COVERAGE) = '8' THEN
            IF v_TYPE_POLICY = '82' THEN
                v_TYPE_POLICY := '81';
            END IF;
        END IF;



--- v_TYPE_OF_LOSS                     VARCHAR2(2);
        v_TYPE_OF_LOSS := '  ';


        v_TEMP_LOSS := NVL(bo_stat.TYPE_LOSS, '  ');
        -- If (D60)Type Loss field is blank, use (F61)Cause Loss field instead
        IF v_TEMP_LOSS = '  ' THEN
            v_TEMP_LOSS := NVL(bo_stat.CAUSE_LOSS_F, '  ');
        END IF;


        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_TYPE_OF_LOSS := '47';
        ELSE
            -- Skip to end of statement when v_LOSS_SW = '1';
            v_LOSS_SW := '0';

            IF v_LOSS_SW <> '1' THEN
                IF v_TEMP_LOSS IN ('12', '22') THEN
                    v_TEMP_LOSS := '80';
                    v_LOSS_SW := '1';
                END IF;
            END IF;

            IF v_LOSS_SW <> '1' THEN
                IF v_TEMP_LOSS = '32' THEN
                    v_TEMP_LOSS := '84';
                    v_LOSS_SW := '1';
                END IF;
            END IF;

            -- Property Coverages
            IF v_LOSS_SW <> '1' THEN
                IF bo_stat.COVERAGE_CODE IN ('810', '811', '951') AND v_TEMP_LOSS IN ('20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39') THEN
                    v_LOSS_SW := '1';
                END IF;
            END IF;

            -- Liability Coverages
            IF v_LOSS_SW <> '1' THEN
                IF bo_stat.COVERAGE_CODE IN ('130', '335', '500', '812', '825', '905', '915', '953', '962', '956', '959', '970', '994') THEN
                    IF v_TEMP_LOSS IN ('41', '42', '43', '44', '45', '46', '49') THEN
                        v_LOSS_SW := '1';
                    ELSE
                        v_TEMP_LOSS := '59';

                        --- 07/2016 fix for Coverage 335
                        IF bo_stat.COVERAGE_CODE = '335' THEN
                            v_TEMP_LOSS := '49';
                        END IF;

                        v_LOSS_SW := '1';
                    END IF;
                END IF;
            END IF;

            IF v_LOSS_SW <> '1' THEN
                IF NOT ( bo_stat.COVERAGE_CODE IN ('810', '811', '951') ) AND v_TEMP_LOSS IN ('41', '42', '43', '44', '45', '46', '49') THEN
                    v_LOSS_SW := '1';
                END IF;
            END IF;

            IF v_LOSS_SW <> '1' THEN
                IF bo_stat.COVERAGE_CODE = '810' THEN
                    IF SUBSTR(v_TEMP_LOSS, 1, 1) = '1' THEN
                        v_TEMP_LOSS := '2' || SUBSTR(v_TEMP_LOSS, 2, 1);
                        v_LOSS_SW := '1';
                    END IF;
                END IF;
            END IF;

            IF v_LOSS_SW <> '1' THEN
                IF v_TEMP_LOSS IN ('09', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '51', '52', '59', '61', '62', '63', '64', '65', '66', '67', '68', '69', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '93', '94', '95', '96', '97', '98') THEN
                    v_LOSS_SW := '1';
                END IF;
            END IF;

            IF v_LOSS_SW <> '1' THEN
                IF bo_stat.COVERAGE_CODE IN ('810', '811') THEN
                    v_TEMP_LOSS := '29';
                ELSE
                    v_TEMP_LOSS := '59';
                END IF;
            END IF;


            v_TYPE_OF_LOSS := v_TEMP_LOSS;
        END IF;


        IF ( v_HOLD_COVERAGE IN ('21', '22') ) AND v_TYPE_OF_LOSS = '59' THEN
            v_TEMP_LOSS := '29';
            v_TYPE_OF_LOSS := '29';
        END IF;


        IF bo_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') THEN
            IF v_TEMP_LOSS = '  ' OR v_HOLD_COVERAGE = '19' THEN
                IF v_HOLD_COVERAGE NOT IN ('01', '02', '21', '22') THEN
                    v_TYPE_OF_LOSS := '59';
                ELSE
                    v_TYPE_OF_LOSS := '29';
                END IF;
            END IF;
        END IF;

        IF v_TEMP_LOSS = '22' THEN
            v_TYPE_OF_LOSS := '81';
        END IF;


        -- Hold current Type of Loss value for processing other fields.
        v_TEMP_LOSS := v_TYPE_OF_LOSS;


        IF v_HOLD_TYPE_POLICY = '81' THEN
            IF v_TYPE_OF_LOSS = '28' THEN
                v_TYPE_OF_LOSS := '58';
            END IF;
        END IF;


        IF bo_stat.ITEM_STATE_CD = 'NJ' THEN
            IF bo_stat.COVERAGE_CODE IN ('101', '110') THEN
                v_TYPE_OF_LOSS := '26';
            ELSE
                IF bo_stat.COVERAGE_CODE IN ('102', '120') THEN
                    v_TYPE_OF_LOSS := '26';
                END IF;
            END IF;
        END IF;




--- v_RATING_ID                        VARCHAR2(1);
        v_RATING_ID := ' ';

        IF v_HOLD_COVERAGE <> '19' THEN
            v_RATING_ID := NVL(bo_stat.CSP_RATE_ID, ' ');
            v_RATING_ID := NVL(bo_stat.BOP_CSP_RATE_ID, ' ');  -- paid losses only

            IF v_RATING_ID <> '5' THEN
                v_RATING_ID := '4';
            END IF;
        END IF;

        IF v_RATING_ID = ' ' THEN
            IF v_HOLD_COVERAGE IN ('01', '02', '21', '22', '23', '24') THEN
                v_RATING_ID := '4';
            END IF;
        END IF;

        IF TRIM(v_HOLD_COVERAGE) IN ('3', '4', '5', '6', '7', '8', '9') THEN
            v_RATING_ID := ' ';
        END IF;

        IF v_TYPE_OF_LOSS IN ('41', '42', '43', '44', '45', '49') THEN
            v_RATING_ID := ' ';
        END IF;

        IF v_COVERAGE NOT IN ('21', '22', '01', '02') THEN
            v_RATING_ID := ' ';
        END IF;

        IF v_COVERAGE NOT IN ('21', '22', '23', '24', '18', '01', '02') THEN
            IF ( SUBSTR(v_TYPE_OF_LOSS, 1, 1) IN ('2', '3', '6', '7', '8') ) OR ( v_TYPE_OF_LOSS IN ('51', '52', '93', '94', '97') ) THEN
                v_RATING_ID := ' ';
            END IF;
        END IF;



--- v_CONSTRUCTION                     VARCHAR2(1);
        v_CONSTRUCTION := '1';

        IF bo_stat.BOP_CONSTRUCT = 'FR' THEN
            v_CONSTRUCTION := '1';
        END IF;

        IF bo_stat.BOP_CONSTRUCT = 'JM' THEN
            v_CONSTRUCTION := '2';
        END IF;

        IF bo_stat.BOP_CONSTRUCT = 'NC' THEN
            v_CONSTRUCTION := '3';
        END IF;

        IF bo_stat.BOP_CONSTRUCT = 'RE' THEN
            v_CONSTRUCTION := '6';
        END IF;



--- v_PROTECTION                       VARCHAR2(2);
        v_PROTECTION := '  ';

        IF v_HOLD_COVERAGE <> '19' THEN
            v_PROTECTION := NVL(bo_stat.BOP_PROT_CLASS_B83A, '  ');


            --- 07/2016 fix for protection class on Coverage 335
            IF NVL(bo_stat.COVERAGE_CODE, '   ') IN ('335') THEN
                IF v_PROTECTION = '  ' THEN
                    v_PROTECTION := Get_BOP335_Protection(bo_stat.POLICY_NUMBER, bo_stat.EFF_DATE, bo_stat.EXP_DATE, bo_stat.LOSS_DATE);
                END IF;
            END IF;

            --- 07/2016 fix for protection class on Coverages 810 & 811
            IF NVL(bo_stat.COVERAGE_CODE, '   ') IN ('810', '811') THEN
                IF v_PROTECTION = '  ' THEN
                    v_PROTECTION := Get_BOP_Protection(bo_stat.POLICY_NUMBER, bo_stat.ITEM_NUM, bo_stat.EFF_DATE, bo_stat.EXP_DATE, bo_stat.ACTG_DATE);
                END IF;
            END IF;

        END IF;

        IF v_PROTECTION = '  ' THEN
            IF v_HOLD_COVERAGE IN ('01', '02', '21', '22', '23', '24') THEN
                v_PROTECTION := '01';
            END IF;
        END IF;



--- v_FILLER_41                        VARCHAR2(5);
        --v_FILLER_41 := ' ';


--- v_DEDUCTIBLE                       VARCHAR2(5);  --added 4/28/17 --ASI/RJC
        -- 2017 new requirements
        v_DEDUCTIBLE := ' ';

        IF bo_stat.EFF_DATE >= TO_DATE('01012017','MMDDYYYY') THEN
            IF NVL(bo_stat.COVERAGE_CODE, '   ') IN ('335', '810', '811') THEN
                CASE
                    WHEN bo_stat.COVERAGE_CODE = '335' THEN    v_DEDUCTIBLE := '00000';
                    ELSE v_DEDUCTIBLE := LPAD(TO_CHAR(NVL(bo_stat.DED_AMT,0)),5,'0');
                END CASE;
            END IF;
        END IF;



--- v_TERRORISM_COVERAGE               VARCHAR2(1);
        v_TERRORISM_COVERAGE := '3';



--- v_WIND_COVERAGE                    VARCHAR2(1);
        v_WIND_COVERAGE := ' ';



--- v_BCEG                             VARCHAR2(2);
        v_BCEG := ' ';

        -- 2017 new requirements    --added 4/24/17 --ASI/RJC
        IF bo_stat.EFF_DATE >= TO_DATE('01012017','MMDDYYYY') THEN
            IF (v_COVERAGE IN ('01', '02', '21', '22')) OR (v_COVERAGE >= '62' AND v_COVERAGE <= '73') THEN
                v_BCEG := '99';

/*                -- Including code for when the required data is available - replace [[community grade]] and [[building certified]] with the applicable fields once they have been added, adjust code as needed to match datatype.
                IF ([[community grade]] IS NOT NULL) AND ([[community grade]] <> 99) THEN
                    IF [[building certified]] THEN    --building individually certified as grade 1
                        CASE
                            WHEN [[community grade]] =  1 THEN v_BCEG := '11';
                            WHEN [[community grade]] =  2 THEN v_BCEG := '12';
                            WHEN [[community grade]] =  3 THEN v_BCEG := '13';
                            WHEN [[community grade]] =  4 THEN v_BCEG := '14';
                            WHEN [[community grade]] =  5 THEN v_BCEG := '15';
                            WHEN [[community grade]] =  6 THEN v_BCEG := '16';
                            WHEN [[community grade]] =  7 THEN v_BCEG := '17';
                            WHEN [[community grade]] =  8 THEN v_BCEG := '18';
                            WHEN [[community grade]] =  9 THEN v_BCEG := '19';
                            WHEN [[community grade]] = 10 THEN v_BCEG := '20';
                            ELSE v_BCEG := '99';
                        END CASE;
                    ELSE    --building not individually certified
                        CASE
                            WHEN [[community grade]] =  1 THEN v_BCEG := '01';
                            WHEN [[community grade]] =  2 THEN v_BCEG := '02';
                            WHEN [[community grade]] =  3 THEN v_BCEG := '03';
                            WHEN [[community grade]] =  4 THEN v_BCEG := '04';
                            WHEN [[community grade]] =  5 THEN v_BCEG := '05';
                            WHEN [[community grade]] =  6 THEN v_BCEG := '06';
                            WHEN [[community grade]] =  7 THEN v_BCEG := '07';
                            WHEN [[community grade]] =  8 THEN v_BCEG := '08';
                            WHEN [[community grade]] =  9 THEN v_BCEG := '09';
                            WHEN [[community grade]] = 10 THEN v_BCEG := '10';
                            ELSE v_BCEG := '99';
                        END CASE;
                    END IF;
                END IF;
*/
            END IF;
        END IF;



--- v_RATING_BASIS                     VARCHAR2(1);
        v_RATING_BASIS := ' ';

        IF v_HOLD_COVERAGE IN ('01', '21', '23') THEN
            v_RATING_BASIS := NVL(bo_stat.BOP_RATING_BASIS, ' ');

            IF v_RATING_BASIS = ' ' THEN
                v_RATING_BASIS := '1';
            END IF;
        END IF;

        IF v_HOLD_COVERAGE IN ('01', '21') THEN
            v_RATING_BASIS := NVL(bo_stat.BOP_RATING_BASIS, ' ');

            IF NOT ( bo_stat.ITEM_STATE_CD <> 'NY' AND v_RATING_BASIS IN ('1', '2') ) THEN
                IF NOT ( bo_stat.ITEM_STATE_CD = 'NY' AND v_RATING_BASIS IN ('1', '2', '7', '8') ) THEN
                    v_RATING_BASIS := '1';
                END IF;
            END IF;
        END IF;

        IF v_HOLD_COVERAGE IN ('23', '24', '18') THEN
            v_RATING_BASIS := '7';
        END IF;

        IF v_TYPE_OF_LOSS IN ('41', '42', '43', '44', '45', '49') THEN
            v_RATING_BASIS := ' ';
        END IF;


        IF v_COVERAGE NOT IN ('01', '21') THEN
            v_RATING_BASIS := ' ';
        END IF;

        IF v_COVERAGE NOT IN ('21', '22', '23', '24', '18', '01', '02') THEN
            IF ( SUBSTR(v_TYPE_OF_LOSS, 1, 1) IN ('2', '3', '6', '7', '8') ) OR ( v_TYPE_OF_LOSS IN ('51', '52', '93', '94', '97') ) THEN
                v_RATING_BASIS := ' ';
            END IF;
        END IF;



--- v_STATE_EXCEPTION                  VARCHAR2(1);
        v_STATE_EXCEPTION := ' ';



--- v_FILLER_52                        VARCHAR2(2);
        v_FILLER_52 := ' ';



--- v_LIABILITY_LIMITS                 VARCHAR2(5);
        v_LIABILITY_LIMITS := ' ';

        IF ( v_HOLD_COVERAGE IN ('01', '02', '21', '22', '23', '24') OR bo_stat.EFF_DATE >= TO_DATE('09012012', 'MMDDYYYY') ) THEN
            IF NVL(bo_stat.BOP_LIAB_LIM_HOLD, ' ') <> ' ' AND TO_NUMBER(bo_stat.BOP_LIAB_LIM_HOLD) <> 0 THEN
                v_LIABILITY_LIMITS := TO_NUMBER(bo_stat.BOP_LIAB_LIM_HOLD) / 1000;
                v_LIABILITY_LIMITS := LPAD(v_LIABILITY_LIMITS, 5, '0');
            ELSE
                CASE NVL(bo_stat.BOP_CSP_LIMIT_CODE, ' ')
                    WHEN '6' THEN v_LIABILITY_LIMITS := '00300';
                    WHEN '5' THEN v_LIABILITY_LIMITS := '00500';
                    WHEN '8' THEN v_LIABILITY_LIMITS := '01000';
                    WHEN 'B' THEN v_LIABILITY_LIMITS := '02000';
                    WHEN 'C' THEN v_LIABILITY_LIMITS := '03000';
                    WHEN 'D' THEN v_LIABILITY_LIMITS := '04000';
                    WHEN 'E' THEN v_LIABILITY_LIMITS := '05000';
                    WHEN 'F' THEN v_LIABILITY_LIMITS := '06000';
                    WHEN 'G' THEN v_LIABILITY_LIMITS := '07000';
                    WHEN 'H' THEN v_LIABILITY_LIMITS := '08000';
                    WHEN 'I' THEN v_LIABILITY_LIMITS := '09000';
                    ELSE          v_LIABILITY_LIMITS := '01000';
                END CASE;
            END IF;
        END IF;


        IF v_COVERAGE NOT IN ('21', '22', '23', '24', '18', '01', '02', '14') THEN
            v_LIABILITY_LIMITS := ' ';
        END IF;



--- v_FILLER_59                        VARCHAR2(1);
        v_FILLER_59 := ' ';



--- v_FILLER_ISO                       VARCHAR2(1);
        v_FILLER_ISO := ' ';



--- v_LIABILITY_FORM                   VARCHAR2(1);    -- Lead Liability
        v_LIABILITY_FORM := ' ';

        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_LIABILITY_FORM := '9';
        END IF;

        v_LIABILITY_FORM := '3';

        IF v_HOLD_COVERAGE IN ('01', '02', '23', '24') THEN
            IF bo_stat.ITEM_STATE_CD = 'MA' THEN
                IF v_NUM_CONST_YEAR < 1977 THEN
                    CASE bo_stat.LEAD_POISON_COV
                        WHEN '1' THEN v_LIABILITY_FORM := 'H';
                        WHEN '2' THEN v_LIABILITY_FORM := 'J';
                        WHEN '3' THEN v_LIABILITY_FORM := 'K';
                        WHEN '4' THEN v_LIABILITY_FORM := 'L';
                        WHEN '5' THEN v_LIABILITY_FORM := 'M';
                        WHEN '6' THEN v_LIABILITY_FORM := 'N';
                        WHEN '7' THEN v_LIABILITY_FORM := 'P';
                        ELSE          v_LIABILITY_FORM := 'P';
                    END CASE;
                END IF;
            END IF;
        END IF;

        IF bo_stat.ITEM_STATE_CD = 'RI' THEN
            IF v_NUM_CONST_YEAR < 1978 THEN
                v_LIABILITY_FORM := 'P';
            END IF;
        END IF;

        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_LIABILITY_FORM := '9';
        END IF;

        --- 07/2016 fix for Coverage 335
        IF NVL(bo_stat.COVERAGE_CODE, ' ') <> '335' THEN
            IF NVL(bo_stat.BOP_COVERAGE, '  ') NOT IN ('01', '02', '23', '24') THEN
                v_LIABILITY_FORM := ' ';
            END IF;
        END IF;


        IF v_COVERAGE NOT IN ('23', '24', '18', '01', '02') THEN
            v_LIABILITY_FORM := ' ';
        ELSE
            IF v_STATE NOT IN ('20', '29', '38') THEN
                v_LIABILITY_FORM := '3';
            END IF;
        END IF;



--- v_CLAIMS_ENTRY_DATE                VARCHAR2(3);
        v_CLAIMS_ENTRY_DATE := ' ';



--- v_CLAIMS_NOTICE_DATE               VARCHAR2(3);
        v_CLAIMS_NOTICE_DATE := ISO_Date_Conv(bo_stat.REPORTED_DATE, 'MYY');



--- v_LIABILITY_EXP_IND                VARCHAR2(1);
        v_LIABILITY_EXP_IND := ' ';

        IF v_HOLD_COVERAGE IN ('18', '14') THEN
            v_LIABILITY_EXP_IND := '2';
        ELSE
            IF v_HOLD_COVERAGE IN ('23', '24', '13', '15', '33', '43', '50') THEN
                v_LIABILITY_EXP_IND := '7';
            ELSE
                v_LIABILITY_EXP_IND := ' ';
            END IF;
        END IF;


        IF v_COVERAGE NOT IN ('13', '14', '15', '23', '24', '43', '50', '51', '52', '53', '54', '55', '56', 'A2', '18', '01', '02') THEN
            v_LIABILITY_EXP_IND := ' ';
        END IF;

        IF v_COVERAGE IN ('23', '24', '13', '14', '15', '18', '01', '02') THEN
            IF v_LIABILITY_EXP_IND = ' ' THEN
                v_LIABILITY_EXP_IND := '7';
            END IF;
        END IF;



--- v_FILLER_69                        VARCHAR2(1);
        v_FILLER_69 := ' ';


--- v_ZIP_CODE_FIRST_5                 VARCHAR2(9);
        v_ZIP_CODE_FIRST_5 := NVL(bo_stat.LOC_ZIP, ' ');


--- v_LESSOR_OCC_RISK_IND              VARCHAR2(1);
        v_LESSOR_OCC_RISK_IND := ' ';

        IF bo_stat.EFF_DATE >= TO_DATE('09012012', 'MMDDYYYY') THEN
            IF NVL(bo_stat.BOP_OCCUPANCY, ' ') = 'O' THEN
                v_LESSOR_OCC_RISK_IND := '1';
            ELSE
                v_LESSOR_OCC_RISK_IND := '2';
            END IF;
        END IF;



--- v_FILLER_79                        VARCHAR2(1);
        v_FILLER_79 := ' ';


--- v_STATE_EXCEPTION_2                VARCHAR2(1);
        v_STATE_EXCEPTION_2 := ' ';


--- v_EXPOSURE                         VARCHAR2(7);
        v_EXPOSURE := ' ';

        -- 2017 new requirements    --added 4/28/17 --ASI/RJC
        IF bo_stat.EFF_DATE >= TO_DATE('01012017','MMDDYYYY') THEN
            v_NUM_EXPOSURE := 0;

            IF bo_stat.COVERAGE_CODE = '962' THEN
                v_NUM_EXPOSURE := bo_stat.BOP_NUM_UNITS;
            END IF;

            IF v_HOLD_COVERAGE = '14' THEN
                v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;

                --IF bo_stat.WRITTEN_PREM < 0 THEN
                --    v_NUM_EXPOSURE := v_NUM_EXPOSURE * -1;
                --END IF;
            END IF;

            IF (v_HOLD_COVERAGE IN ('01', '02')) OR  (v_HOLD_COVERAGE > '20' AND v_HOLD_COVERAGE < '31') OR (bo_stat.EFF_DATE >= TO_DATE('09012012', 'MMDDYYYY')) THEN
                IF v_HOLD_COVERAGE NOT IN ('14', '18', '49') THEN

                    --v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;  --Changed 5/15/2017 to address truncation of data for limits greater than or equal to 10 million.  --ASI/RJC
                    IF NVL(bo_stat.EXCESS_LIMIT_SW, ' ') = 'Y' THEN
                        --v_NUM_EXPOSURE := bo_stat.EXCESS_LIMIT;
                        v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;  --temporary, keep until EXCESS_LIMIT properly populated.
                    ELSE
                        v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;
                    END IF;


                    IF (bo_stat.BOP_LIMIT_AMT_PERSON_EXP <> 0 OR bo_stat.BOP_LIMIT_AMT_OCCUR_EXP <> 0) THEN
                        IF bo_stat.BOP_LIMIT_AMT_PERSON_EXP > 0 THEN
                            v_NUM_EXPOSURE := bo_stat.BOP_LIMIT_AMT_PERSON_EXP;
                        END IF;
                    END IF;

                    IF v_NUM_EXPOSURE = 0 THEN
                        v_NUM_EXPOSURE := 100000;
                    END IF;

                    v_NUM_EXPOSURE := TRUNC( (v_NUM_EXPOSURE + 50) / 100 );

                    --IF bo_stat.WRITTEN_PREM < 0 THEN
                    --    IF v_NUM_EXPOSURE > 0 THEN
                    --        v_NUM_EXPOSURE := v_NUM_EXPOSURE * -1;
                    --    END IF;
                    --END IF;

                END IF;
            END IF;

            v_EXPOSURE := ISO_Signed_Number(v_NUM_EXPOSURE, 7);

            --Changed 5/5/17 to match current CSP-I requirements.  --ASI/RJC
            --IF NOT ( ( v_HOLD_COVERAGE IN ('01', '02', '18', '21', '22', '23', '24', '14', '04', '05', '07') ) OR ( v_HOLD_COVERAGE > '24' AND v_HOLD_COVERAGE < '32' ) ) THEN
            IF v_COVERAGE IN ('12', '19', 'A1', 'B1') THEN
                v_EXPOSURE := ' ';
            END IF;
        END IF;



--- v_ZIP_CODE_LAST_4                  VARCHAR2(9);
        v_ZIP_CODE_LAST_4 := ' ';


--- v_YEAR_OF_CONSTRUCTION             VARCHAR2(4);
        v_YEAR_OF_CONSTRUCTION := '  ';

        IF bo_stat.EFF_DATE > TO_DATE('04302015', 'MMDDYYYY') THEN
            IF v_HOLD_COVERAGE IN ('01', '02', '21', '22') THEN
                v_YEAR_OF_CONSTRUCTION := LPAD(TO_CHAR(MOD(v_NUM_CONST_YEAR, 100)), 2, '0');

                IF v_NUM_CONST_YEAR < 1901 THEN
                    v_YEAR_OF_CONSTRUCTION := '99';
                ELSE
                    IF v_NUM_CONST_YEAR > 1998 THEN
                        IF v_NUM_CONST_YEAR = 1999 THEN
                            v_YEAR_OF_CONSTRUCTION := 'NN';
                        ELSE
                            IF v_NUM_CONST_YEAR = 2000 THEN
                                v_YEAR_OF_CONSTRUCTION := 'TT';
                            ELSE
                                IF v_NUM_CONST_YEAR < 2010 THEN
                                    v_YEAR_OF_CONSTRUCTION := 'T';
                                ELSE
                                    IF v_NUM_CONST_YEAR < 2020 THEN
                                        v_YEAR_OF_CONSTRUCTION := 'A';
                                    ELSE
                                        IF v_NUM_CONST_YEAR < 2030 THEN
                                            v_YEAR_OF_CONSTRUCTION := 'B';
                                        ELSE
                                            IF v_NUM_CONST_YEAR < 2040 THEN
                                                v_YEAR_OF_CONSTRUCTION := 'C';
                                            ELSE
                                                IF v_NUM_CONST_YEAR < 2050 THEN
                                                    v_YEAR_OF_CONSTRUCTION := 'D';
                                                ELSE
                                                    IF v_NUM_CONST_YEAR < 2060 THEN
                                                        v_YEAR_OF_CONSTRUCTION := 'E';
                                                    ELSE
                                                        IF v_NUM_CONST_YEAR < 2070 THEN
                                                            v_YEAR_OF_CONSTRUCTION := 'F';
                                                        ELSE
                                                            IF v_NUM_CONST_YEAR < 2080 THEN
                                                                v_YEAR_OF_CONSTRUCTION := 'G';
                                                            ELSE
                                                                IF v_NUM_CONST_YEAR < 2090 THEN
                                                                    v_YEAR_OF_CONSTRUCTION := 'H';
                                                                ELSE
                                                                    v_YEAR_OF_CONSTRUCTION := 'I';
                                                                END IF;
                                                            END IF;
                                                        END IF;
                                                    END IF;
                                                END IF;
                                            END IF;
                                        END IF;
                                    END IF;
                                END IF;

                                v_YEAR_OF_CONSTRUCTION := v_YEAR_OF_CONSTRUCTION || TO_CHAR(MOD(v_NUM_CONST_YEAR, 10));
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



--- v_LOSS_AMOUNT                      NUMBER(8);
        v_LOSS_AMOUNT := ROUND(bo_stat.LOSS_AMOUNT);

        IF bo_stat.LOSS_AMOUNT < 1 AND bo_stat.LOSS_AMOUNT > 0 THEN
            v_LOSS_AMOUNT := 1;
        END IF;

        IF bo_stat.LOSS_AMOUNT  > -1 AND bo_stat.LOSS_AMOUNT  < 0 THEN
            v_LOSS_AMOUNT := -1;
        END IF;

        IF bo_stat.TRANS_CODE IN ('71', '81', '91', '72', '82', '92', '86', '73', '83', '93', '87') THEN
            v_LOSS_AMOUNT := v_LOSS_AMOUNT * -1;
        END IF;



--- v_CLAIM_COUNT                      VARCHAR2(1);
        v_CLAIM_COUNT := NVL(bo_stat.CLM_CNT_OCCUR_NEW, '0');

        IF v_LOSS_AMOUNT < 0 THEN
            IF TO_NUMBER(v_CLAIM_COUNT) > 0 THEN
                v_CLAIM_COUNT := '0';
            END IF;
        END IF;



--- v_OCCURRENCE_ID                    VARCHAR2(12);
        v_OCCURRENCE_ID := '13' || RPAD(TRIM(bo_stat.CLAIM_NUMBER), 8, ' ') || LPAD(TO_CHAR(bo_stat.CLAIMANT_NUMBER), 2, '0');



--- v_CLAIM_ID                         VARCHAR2(2);
        v_CLAIM_ID := '01';



--- v_PREMIUM_RECORD_ID                VARCHAR2(33);
        -- MODULE & POLICY NUMBER
        v_PREMIUM_RECORD_ID := '13' || RPAD(bo_stat.POLICY_NUMBER, 10, ' ');

        -- ITEM NUMBER
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || LPAD(TO_CHAR(NVL(bo_stat.ITEM_NUM, 0)), 3, '0');

        -- COVERAGE/ENDORSEMENT
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || RPAD(v_TEMP_C87_B81, 8, ' ');

        -- YEAR CONSTR
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || RPAD(SUBSTR(NVL(bo_stat.BOP_CONST_YEAR, '00000'), 2, 4), 4, ' ');

        -- RECD NUM
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || '  ';

        -- TAPE IND & REPT LVL
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || 'GF' || '  ';



--- v_RECORD_NUMBER                    NUMBER(6);
        v_RECORD_NUMBER := NVL(v_RECORD_NUMBER, 0) + 1;



--- v_SUMM_ACTG_DATE                   VARCHAR2(8);
        v_SUMM_ACTG_DATE := TO_CHAR(bo_stat.ACTG_DATE, 'MMDDYYYY');



--- "NOT BUILDING OR CONTENTS" LAYOUT
    -- Set the following fields to blank if the record is not Building or Contents coverage
    IF v_COVERAGE NOT IN ('21', '22', '23', '24', '18', '01', '02') THEN
        v_RATING_ID          := ' ';
        v_CONSTRUCTION       := ' ';
        v_PROTECTION         := ' ';
        v_WIND_COVERAGE      := ' ';
        v_BCEG               := ' ';
        v_RATING_BASIS       := ' ';
        v_STATE_EXCEPTION    := ' ';
        v_LIABILITY_FORM     := ' ';
        v_CLAIMS_ENTRY_DATE  := ' ';
        v_CLAIMS_NOTICE_DATE := ' ';
        v_STATE_EXCEPTION_2 := ' ';  --added 04/28/17  --ASI/JRC
    END IF;



--- v_DEBUG_DATA                       VARCHAR2(40);
    -- This field is used for optionally sending debug data through to the output file.
    -- Uncomment filter on column name in Procedure "write_fixed_file_ISO_LOZ" before running submission.
        v_DEBUG_DATA := '.';



--- --- ---

        INSERT INTO RPT_CLAIMS_ISO_BO_STAT (
            COMPANY_ID                   ,
            TRANSACTION_TYPE             ,
            ACT_DATE                     ,
            INC_DATE                     ,
            LOSS_DATE                    ,
            STAT_PLAN_INDICATOR          ,
            STATE                        ,
            TERRITORY                    ,
            TYPE_POLICY                  ,
            ASL                          ,
            SUBLINE                      ,
            CLASS_CODE                   ,
            COVERAGE                     ,
            RATING_ID                    ,
            CONSTRUCTION                 ,
            PROTECTION                   ,
            --FILLER_41                    ,
            DEDUCTIBLE                   ,
            TERRORISM_COVERAGE           ,
            WIND_COVERAGE                ,
            BCEG                         ,
            RATING_BASIS                 ,
            STATE_EXCEPTION              ,
            FILLER_52                    ,
            LIABILITY_LIMITS             ,
            FILLER_59                    ,
            FILLER_ISO                   ,
            LIABILITY_FORM               ,
            CLAIMS_ENTRY_DATE            ,
            CLAIMS_NOTICE_DATE           ,
            LIABILITY_EXP_IND            ,
            FILLER_69                    ,
            TYPE_OF_LOSS                 ,
            CLAIM_COUNT                  ,
            ZIP_CODE_FIRST_5             ,
            LESSOR_OCC_RISK_IND          ,
            FILLER_79                    ,
            STATE_EXCEPTION_2            ,
            EXPOSURE                     ,
            ZIP_CODE_LAST_4              ,
            YEAR_OF_CONSTRUCTION         ,
            LOSS_AMOUNT                  ,
            OCCURRENCE_ID                ,
            CLAIM_ID                     ,
            PREMIUM_RECORD_ID            ,
            RECORD_NUMBER                ,
            DEBUG_DATA                   ,
            COV_CODE                     ,
            SUMM_ACTG_DATE
        ) VALUES (
            v_COMPANY_ID                 ,
            v_TRANSACTION_TYPE           ,
            v_ACT_DATE                   ,
            v_INC_DATE                   ,
            v_LOSS_DATE                  ,
            v_STAT_PLAN_INDICATOR        ,
            v_STATE                      ,
            v_TERRITORY                  ,
            v_TYPE_POLICY                ,
            v_ASL                        ,
            v_SUBLINE                    ,
            v_CLASS_CODE                 ,
            v_COVERAGE                   ,
            v_RATING_ID                  ,
            v_CONSTRUCTION               ,
            v_PROTECTION                 ,
            --v_FILLER_41                  ,
            v_DEDUCTIBLE                 ,
            v_TERRORISM_COVERAGE         ,
            v_WIND_COVERAGE              ,
            v_BCEG                       ,
            v_RATING_BASIS               ,
            v_STATE_EXCEPTION            ,
            v_FILLER_52                  ,
            v_LIABILITY_LIMITS           ,
            v_FILLER_59                  ,
            v_FILLER_ISO                 ,
            v_LIABILITY_FORM             ,
            v_CLAIMS_ENTRY_DATE          ,
            v_CLAIMS_NOTICE_DATE         ,
            v_LIABILITY_EXP_IND          ,
            v_FILLER_69                  ,
            v_TYPE_OF_LOSS               ,
            v_CLAIM_COUNT                ,
            v_ZIP_CODE_FIRST_5           ,
            v_LESSOR_OCC_RISK_IND        ,
            v_FILLER_79                  ,
            v_STATE_EXCEPTION_2          ,
            v_EXPOSURE                   ,
            v_ZIP_CODE_LAST_4            ,
            v_YEAR_OF_CONSTRUCTION       ,
            v_LOSS_AMOUNT                ,
            v_OCCURRENCE_ID              ,
            v_CLAIM_ID                   ,
            v_PREMIUM_RECORD_ID          ,
            v_RECORD_NUMBER              ,
            v_DEBUG_DATA                 ,
            NVL(bo_stat.COVERAGE_CODE, ' '),
            v_SUMM_ACTG_DATE
        );

        COMMIT;

    END LOOP;

--- --- ---

    CLOSE all_bo_stat;
    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG || bo_stat.policy_number);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;
PROCEDURE collect_clm_iso_bo_outstand
IS

    v_procname          RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                            := 'ND_BUREAU.COLLECT_CLM_ISO_BO_OUTSTAND';
    v_err_mssg          VARCHAR2 (200);
    v_err_loc           VARCHAR2 (100);


    CURSOR all_bo_stat
    IS
        SELECT DISTINCT
                        s.COMPANY,
                        s.POLICY_NUMBER,
                        s.GROUP_LINE,
                        s.USER_LINE,
                        s.COVERAGE_CODE,
                        RPTVIEWER.GET_OS_RCS_CLMT(s.claim_number, s.coverage_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.item_state_cd, s.company, s.item_num, lpad(s.claimant_number, 3, '0'))
                            as CURRENT_RESERVE,
                        '00' as TRANS_CODE,
                        s.TERRITORY,
                        s.ITEM_STATE_CD,
                         c.LOC_ZIP,
                         b.EFF_DATE,
                         b.EXP_DATE,
                        s.ACTG_DATE,
                        s.CLASS_CODE,
                        s.CSP_SUBLINE,
                        s.CSP_POL_TYPE,
                        s.CSP_RATE_ID,
                        s.CSP_ANNUAL_STMT,
                        s.LEAD_POISON_COV,
                        s.SDPP_EFF_DATE,
                        s.SDPP_TOT_INST,
                        s.END_NUM,
                        s.CLAIM_NUMBER,
                         b.LOSS_DATE,
                        s.REPORTED_DATE,
                        s.CLAIMANT_NUMBER,
                         c.TYPE_LOSS,
                        s.CAUSE_LOSS_F,
                        s.BOP_CONSTRUCT,
                        s.BOP_CONST_YEAR,
                        s.BOP_OCCUPANCY,
                        s.BOP_BUILD_TYPE,
                        s.BOP_COVERAGE,
                        s.BOP_CSP_LIMIT_CODE,
                        s.BOP_RATING_BASIS,
                        s.BOP_CSP_RATE_ID,
                        s.BOP_PROT_CLASS_B83A,
                        s.BOP_LIAB_LIM_HOLD,
                        s.BOP_C87_B81,
                        s.BOP_ITEM_NO,
                        s.ITEM_NUM,
                        --following fields added 4/24/17 for new reporting requirements  --ASI/RJC
                         c.DED_AMT,
                         c.BOP_NUM_UNITS,
                         c.BOP_LIMIT_AMT_PERSON_EXP,
                         c.BOP_LIMIT_AMT_OCCUR_EXP,
                         c.LIMIT_AMT_PERSON,
                        --excess limit fields added 5/15/17 to address truncation of limits greater than or equal to 10 million.  --ASI/RJC
                         c.excess_limit_sw,
                         c.excess_limit
        FROM RPT_CLAIMS_BO_STAT s

    --- Inconsistent data in certain fields (likely corrections to a loss via closing and reopening) was causing duplicates.
    --- Use effective and loss dates from open reserve ('01') or reopen reserve ('11') transaction records.
        INNER JOIN
          ( SELECT DISTINCT
                a.eff_date,
                a.exp_date,
                a.loss_date,
                a.type_loss,
                a.loc_zip,
                a.policy_number,
                a.claim_number,
                a.claimant_number,
                a.item_num,
                a.coverage_code,
                a.sdac_ind,
                a.actg_date,
                a.trans_code
            FROM RPT_CLAIMS_BO_STAT a
            where a.trans_code in ('01', '11')
           ) b
        ON
                s.POLICY_NUMBER   = b.POLICY_NUMBER
            AND s.CLAIM_NUMBER    = b.CLAIM_NUMBER
            AND s.CLAIMANT_NUMBER = b.CLAIMANT_NUMBER
            AND s.ITEM_NUM        = b.ITEM_NUM
            AND s.COVERAGE_CODE   = b.COVERAGE_CODE
            AND s.SDAC_IND        = b.SDAC_IND
            AND s.ACTG_DATE       = b.ACTG_DATE
            AND s.TRANS_CODE      = b.TRANS_CODE

    --- Inconsistent data in certain fields (likely corrections to a loss via closing and reopening) was causing duplicates.
    --- Use zip code and type of loss from most recent applicable record (see d1.trans_code).
        INNER JOIN
          ( SELECT DISTINCT
                d.type_loss,
                d.loc_zip,
                d.policy_number,
                d.claim_number,
                d.claimant_number,
                d.item_num,
                d.coverage_code,
                d.sdac_ind,
                --following fields added 4/24/17 for new reporting requirements  --ASI/RJC
                d.ded_amt,
                d.bop_num_units,
                d.bop_limit_amt_person_exp,
                d.bop_limit_amt_occur_exp,
                d.limit_amt_person,
                --excess limit fields added 5/15/17 to address truncation of limits greater than or equal to 10 million.  --ASI/RJC
                d.excess_limit_sw,
                d.excess_limit
            FROM RPT_CLAIMS_BO_STAT d
            where d.actg_date =
                            ( SELECT MAX (d1.actg_date)
                                FROM RPT_CLAIMS_BO_STAT d1
                                WHERE   d.claim_number = d1.claim_number
                                    AND d.policy_number = d1.policy_number
                                    AND d.claimant_number = d1.claimant_number
                                    AND d.item_num = d1.item_num
                                    AND d.coverage_code = d1.coverage_code
                                    AND d.group_line = d1.group_line
                                    AND d.user_line = d1.user_line
                                    AND d.company = d1.company
                                    AND d.item_state_cd = d1.item_state_cd
                                    AND d.sdac_ind = d1.sdac_ind
                                    AND d1.book_date <= v_end_date
                                    AND d1.trans_code IN ('01', '11', '41', '51', '61', '42', '52', '62', '44', '54', '64', '47', '57', '67', '48', '58', '68', '71', '81', '91', '72', '82', '92', '73', '83', '93', '86', '87')
                             )
           ) c
        ON
                s.POLICY_NUMBER   = c.POLICY_NUMBER
            AND s.CLAIM_NUMBER    = c.CLAIM_NUMBER
            AND s.CLAIMANT_NUMBER = c.CLAIMANT_NUMBER
            AND s.ITEM_NUM        = c.ITEM_NUM
            AND s.COVERAGE_CODE   = c.COVERAGE_CODE
            AND s.SDAC_IND        = c.SDAC_IND


        WHERE
                s.group_line in ('75')
            AND s.book_date <= (v_end_date)
            AND s.eff_date > TO_DATE ('12/31/' || TO_CHAR(v_year_run - 10), 'MM/DD/YYYY')
            AND s.loss_date > TO_DATE ('12/31/' || TO_CHAR(v_year_run - 10), 'MM/DD/YYYY')
            AND s.eff_date >= TO_DATE ('01012008', 'MMDDYYYY')
            AND s.sdac_ind = '1'
            AND RPTVIEWER.GET_OS_RCS_CLMT(s.claim_number, s.coverage_code, s.group_line, s.user_line, to_char(v_end_date + 1,'MMDDYYYY'), s.sdac_ind, s.item_state_cd, s.company, s.item_num, lpad(s.claimant_number, 3, '0'))
                <> 0
        --- Limit to most recent open reserve ('01') or reopen reserve ('11') transaction per reserve.
            AND s.actg_date =
                            ( SELECT MAX (s1.actg_date)
                                FROM RPT_CLAIMS_BO_STAT s1
                                WHERE   s.claim_number = s1.claim_number
                                    AND s.policy_number = s1.policy_number
                                    AND s.claimant_number = s1.claimant_number
                                    AND s.item_num = s1.item_num
                                    AND s.coverage_code = s1.coverage_code
                                    AND s.group_line = s1.group_line
                                    AND s.user_line = s1.user_line
                                    AND s.company = s1.company
                                    AND s.item_state_cd = s1.item_state_cd
                                    AND s.sdac_ind = s1.sdac_ind
                                    AND s1.trans_code IN ('01', '11')
                                    AND s1.book_date <= v_end_date
                            );


    bo_stat                                all_bo_stat%ROWTYPE;

--- --- ---


--- BOP Stat Variables                                 ---Character Position
    v_COMPANY_ID                       VARCHAR2(4);     --1:4
    v_TRANSACTION_TYPE                 VARCHAR2(1);     --5
    v_ACT_DATE                         VARCHAR2(2);     --6:7
    v_INC_DATE                         VARCHAR2(3);     --8:10
    v_LOSS_DATE                        VARCHAR2(5);     --11:15
    v_STAT_PLAN_INDICATOR              VARCHAR2(1);     --16
    v_STATE                            VARCHAR2(2);     --17:18
    v_TERRITORY                        VARCHAR2(3);     --19:21
    v_TYPE_POLICY                      VARCHAR2(2);     --22:23
    v_ASL                              VARCHAR2(3);     --24:26
    v_SUBLINE                          VARCHAR2(3);     --27:29
    v_CLASS_CODE                       VARCHAR2(5);     --30:34
    v_COVERAGE                         VARCHAR2(2);     --35:36
    v_RATING_ID                        VARCHAR2(1);     --37
    v_CONSTRUCTION                     VARCHAR2(1);     --38
    v_PROTECTION                       VARCHAR2(2);     --39:40
    --v_FILLER_41                        VARCHAR2(5);     --41:45
    v_DEDUCTIBLE                       VARCHAR2(5);     --41:45
    v_TERRORISM_COVERAGE               VARCHAR2(1);     --46
    v_WIND_COVERAGE                    VARCHAR2(1);     --47
    v_BCEG                             VARCHAR2(2);     --48:49
    v_RATING_BASIS                     VARCHAR2(1);     --50
    v_STATE_EXCEPTION                  VARCHAR2(1);     --51
    v_FILLER_52                        VARCHAR2(2);     --52:53
    v_LIABILITY_LIMITS                 VARCHAR2(5);     --54:58
    v_FILLER_59                        VARCHAR2(1);     --59
    v_FILLER_ISO                       VARCHAR2(1);     --60
    v_LIABILITY_FORM                   VARCHAR2(1);     --61
    v_CLAIMS_ENTRY_DATE                VARCHAR2(3);     --62:64
    v_CLAIMS_NOTICE_DATE               VARCHAR2(3);     --65:67
    v_LIABILITY_EXP_IND                VARCHAR2(1);     --68
    v_FILLER_69                        VARCHAR2(1);     --69
    v_TYPE_OF_LOSS                     VARCHAR2(2);     --70:71
    v_CLAIM_COUNT                      VARCHAR2(1);     --72
    v_ZIP_CODE_FIRST_5                 VARCHAR2(5);     --73:77
    v_LESSOR_OCC_RISK_IND              VARCHAR2(1);     --78
    v_FILLER_79                        VARCHAR2(1);     --79
    v_STATE_EXCEPTION_2                VARCHAR2(1);     --80
    v_EXPOSURE                         VARCHAR2(7);     --81:87
    v_ZIP_CODE_LAST_4                  VARCHAR2(4);     --88:91
    v_YEAR_OF_CONSTRUCTION             VARCHAR2(4);     --92:95
    v_LOSS_AMOUNT                      NUMBER(8);       --96:103
    v_OCCURRENCE_ID                    VARCHAR2(12);    --104:115
    v_CLAIM_ID                         VARCHAR2(2);     --116:117
    v_PREMIUM_RECORD_ID                VARCHAR2(33);    --118:150


--- Individual record number for testing/debugging/summarization
    --v_RECORD_NUMBER                    NUMBER(6);  -- this is a global field, definition provided for documentation


--- Field for optionally sending debug data through to the output file - to use, comment out the filter on the column name in Procedure "write_fixed_file_ISO_LOZ"
    v_DEBUG_DATA                       VARCHAR2(40);


--- Full accounting date for summarization
    v_SUMM_ACTG_DATE                   VARCHAR2(8);


--- Function Output Fields



--- Procedural Variables
    v_CLASS_SW                         VARCHAR2(1);
    v_TEMP_C87_B81                     VARCHAR2(8);
    v_HOLD_COVERAGE                    VARCHAR2(2);
    v_NUM_CONST_YEAR                   NUMBER(4);
    v_LOSS_SW                          VARCHAR2(1);
    v_TEMP_LOSS                        VARCHAR2(2);
    v_HOLD_TYPE_POLICY                 VARCHAR2(2);
    --v_NUM_EXPOSURE                     NUMBER(7);  --changed 5/15/2017  --ASI/RJC
    v_NUM_EXPOSURE                     NUMBER(10);



--- --- ---

BEGIN
    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'collect_clm_iso_bo_osls_insert';

    OPEN all_bo_stat;

    LOOP
        FETCH all_bo_stat INTO bo_stat;

        EXIT WHEN all_bo_stat%NOTFOUND;


    -- Uncomment when using v_DEBUG_DATA to reset the field to null at the start of each record
        --v_DEBUG_DATA = '';



--- Data conversions and temp input fields

        -- Convert BOP_CONST_YEAR to numeric value
        v_NUM_CONST_YEAR := TO_NUMBER( NVL(bo_stat.BOP_CONST_YEAR, '0') );


        -- Determine value for v_TEMP_C87_B81
        v_TEMP_C87_B81 := NVL(bo_stat.BOP_C87_B81, ' ');

        IF bo_stat.COVERAGE_CODE = '959' THEN
            IF v_TEMP_C87_B81 = ' ' THEN
                v_TEMP_C87_B81 := NVL(bo_stat.END_NUM, ' ');
            END IF;
        END IF;




--- v_COMPANY_ID                       VARCHAR2(4);
        CASE bo_stat.COMPANY
            WHEN '01' THEN v_COMPANY_ID := '5709';
            WHEN '02' THEN v_COMPANY_ID := '5816';
            WHEN '03' THEN v_COMPANY_ID := '6323';
            WHEN '04' THEN v_COMPANY_ID := '5670';
            ELSE v_COMPANY_ID := '5709';
        END CASE;



--- v_TRANSACTION_TYPE                 VARCHAR2(1);
        IF bo_stat.TRANS_CODE IN ('41', '51', '61', '31') THEN
            v_TRANSACTION_TYPE := '6';
        END IF;

        IF bo_stat.TRANS_CODE = '00' THEN
            v_TRANSACTION_TYPE := '7';
        END IF;

        IF bo_stat.TRANS_CODE IN ('42', '43', '44', '45', '47', '52', '53', '54', '55', '57', '62', '63', '64', '65', '67') THEN
            v_TRANSACTION_TYPE := '8';
        END IF;

        IF bo_stat.TRANS_CODE IN ('71', '72', '73', '81', '82', '86', '87', '83', '91', '92', '93') THEN
            v_TRANSACTION_TYPE := '6';
        END IF;



--- v_ACT_DATE                         VARCHAR2(2);
        CASE v_quarter_run
            WHEN 1 THEN v_ACT_Date := '3';
            WHEN 2 THEN v_ACT_Date := '6';
            WHEN 3 THEN v_ACT_Date := '9';
            WHEN 4 THEN v_ACT_Date := '&';
        END CASE;
        v_ACT_Date := v_ACT_Date || SUBSTR( TO_CHAR(v_year_run),(LENGTH(TO_CHAR(v_year_run)) - 1) + 1 , 1);



--- v_INC_DATE                         VARCHAR2(3);
        v_INC_DATE := ISO_Date_Conv(bo_stat.EFF_DATE, 'MYY');



--- v_LOSS_DATE                        VARCHAR2(5);
        v_LOSS_DATE := ISO_Date_Conv(bo_stat.LOSS_DATE, 'MYY') || LPAD( TO_CHAR( EXTRACT( DAY FROM bo_stat.LOSS_DATE)), 2, '0');



--- v_STAT_PLAN_INDICATOR              VARCHAR2(1);
        v_STAT_PLAN_INDICATOR := 'M';



--- v_STATE                            VARCHAR2(2);
        v_STATE := lu_State_Code(bo_stat.ITEM_STATE_CD);



--- v_TERRITORY                        VARCHAR2(3);
        v_TERRITORY := bo_stat.TERRITORY;

        v_TERRITORY := NVL(v_TERRITORY, '   ');

        IF v_TERRITORY <> '   ' THEN
            v_TERRITORY := LPAD(v_TERRITORY, 3, '0');
        END IF;

        IF bo_stat.CSP_SUBLINE IN ('313', '316') THEN
            v_TERRITORY := '999';
        END IF;

        IF v_TERRITORY = '000' THEN
            v_TERRITORY := '999';
        END IF;



--- v_ASL                              VARCHAR2(3);
        IF (bo_stat.COVERAGE_CODE < '400') OR (bo_stat.COVERAGE_CODE IN ('912', '914', '916', '825')) THEN
            v_ASL := '052';
        ELSE
            v_ASL := '051';
        END IF;



--- v_SUBLINE                          VARCHAR2(3);
        v_SUBLINE := '915';



--- v_CLASS_CODE                       VARCHAR2(5);
        v_CLASS_CODE := NVL(bo_stat.CLASS_CODE, ' ');


        -- Policies with EFF_DATE 6/1/2014 and after for MA or EFF_DATE 5/1/2015 and after for NJ have a new BOP format.
        -- Claims with loss date before 4/1/2010 have an older BOP format.
        -- These records should not have class code converted.
        IF NOT ( (bo_stat.EFF_DATE > TO_DATE('05312014', 'MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'MA') OR (bo_stat.EFF_DATE > TO_DATE('04302015', 'MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'NJ') OR (bo_stat.LOSS_DATE < TO_DATE('04012010', 'MMDDYYYY') ) ) THEN

            IF bo_stat.CLASS_CODE = '71931' THEN
                v_CLASS_CODE := '71961';
            ELSE
                IF bo_stat.CLASS_CODE = '71822' THEN
                    v_CLASS_CODE := '71842';
                ELSE
                    IF bo_stat.CLASS_CODE = '71936' THEN
                        v_CLASS_CODE := '71976';
                    ELSE
                        IF bo_stat.CLASS_CODE = '71825' THEN
                            v_CLASS_CODE := '71865';
                        ELSE
                            IF bo_stat.CLASS_CODE = '71801' THEN
                                v_CLASS_CODE := '71811';
                            ELSE
                                IF bo_stat.CLASS_CODE = '71807' THEN
                                    v_CLASS_CODE := '71837';
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;


            v_CLASS_SW := '1';
            CASE v_CLASS_CODE
                WHEN '09251' THEN v_CLASS_CODE := '09271';
                WHEN '52512' THEN v_CLASS_CODE := '52522';
                WHEN '54036' THEN v_CLASS_CODE := '54341';
                WHEN '54116' THEN v_CLASS_CODE := '54016';
                WHEN '54127' THEN v_CLASS_CODE := '54341';
                WHEN '54136' THEN v_CLASS_CODE := '54341';
                WHEN '57388' THEN v_CLASS_CODE := '57338';
                WHEN '59695' THEN v_CLASS_CODE := '59705';
                WHEN '59955' THEN v_CLASS_CODE := '59965';
                WHEN '59974' THEN v_CLASS_CODE := '59944';

                WHEN '60999' THEN v_CLASS_CODE := '69145';
                WHEN '65121' THEN v_CLASS_CODE := '65171';
                WHEN '65132' THEN v_CLASS_CODE := '65146';
                WHEN '65133' THEN v_CLASS_CODE := '65144';
                WHEN '65141' THEN v_CLASS_CODE := '65144';
                WHEN '65142' THEN v_CLASS_CODE := '65144';
                WHEN '65198' THEN v_CLASS_CODE := '65171';
                WHEN '71482' THEN v_CLASS_CODE := '71842';
                WHEN '71887' THEN v_CLASS_CODE := '59935';
                WHEN '74001' THEN v_CLASS_CODE := '74231';

                WHEN '74091' THEN v_CLASS_CODE := '74081';
                WHEN '74151' THEN v_CLASS_CODE := '74231';
                WHEN '74211' THEN v_CLASS_CODE := '74231';
                WHEN '74491' THEN v_CLASS_CODE := '74511';
                WHEN '74551' THEN v_CLASS_CODE := '74541';
                WHEN '74581' THEN v_CLASS_CODE := '74591';
                WHEN '74761' THEN v_CLASS_CODE := '74771';
                WHEN '74811' THEN v_CLASS_CODE := '74901';
                WHEN '74881' THEN v_CLASS_CODE := '74231';
                WHEN '75501' THEN v_CLASS_CODE := '75521';

                WHEN '75591' THEN v_CLASS_CODE := '75611';
                WHEN '75621' THEN v_CLASS_CODE := '75641';
                WHEN '75741' THEN v_CLASS_CODE := '75761';
                WHEN '75801' THEN v_CLASS_CODE := '75821';
                WHEN '76011' THEN v_CLASS_CODE := '76061';
                WHEN '76101' THEN v_CLASS_CODE := '76121';

                ELSE v_CLASS_SW := '0';
            END CASE;


            -- Specific to MA policies with effective date before 6/1/2014 and NJ policies with effective date before 5/1/2015.
            -- If the case statement above did not find a match, use FixBOPClass to fix the older BOP class.
            IF v_CLASS_SW = '0' THEN
                IF (bo_stat.EFF_DATE < TO_DATE('06012014', 'MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'MA') OR (bo_stat.EFF_DATE < TO_DATE('05012015', 'MMDDYYYY') AND bo_stat.ITEM_STATE_CD = 'NJ') THEN
                    v_CLASS_CODE := FixBOPClass(bo_stat.BOP_BUILD_TYPE, bo_stat.BOP_OCCUPANCY, bo_stat.COVERAGE_CODE);
                END IF;
            END IF;


            -- ISO class codes for Office Buildings effective 9/1/2012.
            -- Lessors' Risk has a building type of 'S'; when the class code is '65171', adjust to '65231'.
            IF bo_stat.BOP_BUILD_TYPE = 'S' THEN
                IF v_CLASS_CODE = '65171' THEN
                    v_CLASS_CODE := '65231';
                END IF;
            END IF;

        END IF;



--- v_COVERAGE                         VARCHAR2(2);
        v_COVERAGE := NVL(bo_stat.BOP_COVERAGE, '  ');

        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_COVERAGE := '18';
        END IF;

        IF bo_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') THEN

            IF bo_stat.COVERAGE_CODE = '810' THEN
                v_COVERAGE := '01';
            END IF;

            IF bo_stat.COVERAGE_CODE IN ('811', '951') THEN
                v_COVERAGE := '02';
            END IF;

            IF bo_stat.COVERAGE_CODE = '813' THEN
                --v_COVERAGE := '20';    --changed 05/2016
                v_COVERAGE := '19';
            END IF;

            IF bo_stat.COVERAGE_CODE = '814' THEN
                v_COVERAGE := '04';
            END IF;

            IF bo_stat.COVERAGE_CODE = '815' THEN
                v_COVERAGE := '05';
            END IF;

            IF bo_stat.COVERAGE_CODE = '819' THEN
                v_COVERAGE := '10';
            END IF;

            IF bo_stat.COVERAGE_CODE = '820' THEN
                v_COVERAGE := '11';
            END IF;

            IF bo_stat.COVERAGE_CODE = '821' THEN
                v_COVERAGE := '17';
            END IF;

            IF bo_stat.COVERAGE_CODE = '816' THEN
                v_COVERAGE := '06';
            END IF;

            IF bo_stat.COVERAGE_CODE = '817' THEN
                --v_COVERAGE := '31';    --changed 05/2016
                v_COVERAGE := '07';
            END IF;

            IF bo_stat.COVERAGE_CODE = '818' THEN
                v_COVERAGE := '16';
            END IF;

            IF bo_stat.COVERAGE_CODE = '905' THEN
                v_COVERAGE := '08';
            END IF;

            IF bo_stat.COVERAGE_CODE IN ('959', '956') THEN
                v_COVERAGE := '19';
            END IF;

            IF bo_stat.COVERAGE_CODE = '335' THEN
                IF SUBSTR(bo_stat.BOP_COVERAGE, 2, 1) = '1' THEN
                    v_COVERAGE := '23';
                ELSE
                    IF SUBSTR(bo_stat.BOP_COVERAGE, 2, 1) = '2' THEN
                        v_COVERAGE := '24';
                    END IF;
                END IF;
            END IF;

            IF v_COVERAGE IN ('  ', ' A') THEN
                v_COVERAGE := '19';
            END IF;


            -- Codes for endorsement-based coverages.
            IF bo_stat.COVERAGE_CODE = '959' THEN
                IF v_COVERAGE = '19' THEN
                    IF v_TEMP_C87_B81 IN ('BP 07 01', 'BP 0706A') THEN
                        v_COVERAGE := '25';
                    END IF;

                    IF v_TEMP_C87_B81 IN ('BP 0701A', 'BP 0706B') THEN
                        v_COVERAGE := '26';    -- This should likely be 46, 47, or 25 depending on the nature of the per tool limit on the coverage.
                    END IF;

                    IF v_TEMP_C87_B81 IN ('BP 0701B', 'BP 0706C') THEN
                        v_COVERAGE := '27';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 0701C' THEN
                        v_COVERAGE := '28';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 0701D' THEN
                        v_COVERAGE := '29';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 0701E' THEN
                        v_COVERAGE := '30';
                    END IF;

                    IF v_TEMP_C87_B81 = 'BP 04 28' THEN
                        v_COVERAGE := '14';
                    END IF;
                END IF;
            END IF;

        END IF;


        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_COVERAGE := '18';
        END IF;



    --- 07/2016 fix for Coverage 335
        IF bo_stat.COVERAGE_CODE = '335' AND v_COVERAGE = '19' THEN
            v_COVERAGE := Get_BOP335_Coverage(bo_stat.POLICY_NUMBER, bo_stat.EFF_DATE, bo_stat.EXP_DATE, bo_stat.LOSS_DATE);
        END IF;



    --- Hold current Coverage value for processing other fields.
        v_HOLD_COVERAGE := v_COVERAGE;


        IF v_COVERAGE = '01' THEN
            IF bo_stat.COVERAGE_CODE > '399' THEN
                v_COVERAGE := '21';
            ELSE
                v_COVERAGE := '23';
            END IF;
        END IF;

        IF v_COVERAGE = '02' THEN
            IF bo_stat.COVERAGE_CODE > '399' THEN
                v_COVERAGE := '22';
            ELSE
                v_COVERAGE := '24';
            END IF;
        END IF;



--- v_TYPE_POLICY                      VARCHAR2(2);
        v_TYPE_POLICY := NVL(bo_stat.CSP_POL_TYPE, '  ');

        IF v_TYPE_POLICY IN ('  ', 'A ', 'F ') THEN
            v_TYPE_POLICY := '10';
        END IF;

        IF v_TYPE_POLICY > '30' AND v_TYPE_POLICY < '3Z' THEN
            v_TYPE_POLICY := '30';
        END IF;

        IF v_TYPE_POLICY > '11' AND v_TYPE_POLICY < '1Z' THEN
            v_TYPE_POLICY := '10';
        END IF;


        -- Per ISO specs, these classes are not valid with policy type '82' for contents coverage.
        -- Per ISO's suggestion, change policy type to '89'.
        IF bo_stat.CLASS_CODE IN ('65132', '65133', '65141', '65142', '69145') THEN
            IF v_HOLD_COVERAGE IN ('02', '22', '24') THEN
                IF v_TYPE_POLICY = '82' THEN
                    v_TYPE_POLICY := '89';
                END IF;
            END IF;
        END IF;


    --- Hold current value of Type of Policy for processing Type of Loss.
        v_HOLD_TYPE_POLICY := v_TYPE_POLICY;


        IF TRIM(v_HOLD_COVERAGE) = '8' THEN
            IF v_TYPE_POLICY = '82' THEN
                v_TYPE_POLICY := '81';
            END IF;
        END IF;



--- v_TYPE_OF_LOSS                     VARCHAR2(2);
        v_TYPE_OF_LOSS := '  ';


        v_TEMP_LOSS := NVL(bo_stat.TYPE_LOSS, '  ');
        -- If (D60)Type Loss field is blank, use (F61)Cause Loss field instead
        IF v_TEMP_LOSS = '  ' THEN
            v_TEMP_LOSS := NVL(bo_stat.CAUSE_LOSS_F, '  ');
        END IF;


        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_TYPE_OF_LOSS := '47';
        ELSE
            -- Skip to end of statement when v_LOSS_SW = '1';
            v_LOSS_SW := '0';

            IF v_LOSS_SW <> '1' THEN
                IF v_TEMP_LOSS IN ('12', '22') THEN
                    v_TEMP_LOSS := '80';
                    v_LOSS_SW := '1';
                END IF;
            END IF;

            IF v_LOSS_SW <> '1' THEN
                IF v_TEMP_LOSS = '32' THEN
                    v_TEMP_LOSS := '84';
                    v_LOSS_SW := '1';
                END IF;
            END IF;

            -- Property Coverages
            IF v_LOSS_SW <> '1' THEN
                IF bo_stat.COVERAGE_CODE IN ('810', '811', '951') AND v_TEMP_LOSS IN ('20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39') THEN
                    v_LOSS_SW := '1';
                END IF;
            END IF;

            -- Liability Coverages
            IF v_LOSS_SW <> '1' THEN
                IF bo_stat.COVERAGE_CODE IN ('130', '335', '500', '812', '825', '905', '915', '953', '962', '956', '959', '970', '994') THEN
                    IF v_TEMP_LOSS IN ('41', '42', '43', '44', '45', '46', '49') THEN
                        v_LOSS_SW := '1';
                    ELSE
                        v_TEMP_LOSS := '59';

                        --- 07/2016 fix for Coverage 335
                        IF bo_stat.COVERAGE_CODE = '335' THEN
                            v_TEMP_LOSS := '49';
                        END IF;

                        v_LOSS_SW := '1';
                    END IF;
                END IF;
            END IF;

            IF v_LOSS_SW <> '1' THEN
                IF NOT ( bo_stat.COVERAGE_CODE IN ('810', '811', '951') ) AND v_TEMP_LOSS IN ('41', '42', '43', '44', '45', '46', '49') THEN
                    v_LOSS_SW := '1';
                END IF;
            END IF;

            IF v_LOSS_SW <> '1' THEN
                IF bo_stat.COVERAGE_CODE = '810' THEN
                    IF SUBSTR(v_TEMP_LOSS, 1, 1) = '1' THEN
                        v_TEMP_LOSS := '2' || SUBSTR(v_TEMP_LOSS, 2, 1);
                        v_LOSS_SW := '1';
                    END IF;
                END IF;
            END IF;

            IF v_LOSS_SW <> '1' THEN
                IF v_TEMP_LOSS IN ('09', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '51', '52', '59', '61', '62', '63', '64', '65', '66', '67', '68', '69', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '93', '94', '95', '96', '97', '98') THEN
                    v_LOSS_SW := '1';
                END IF;
            END IF;

            IF v_LOSS_SW <> '1' THEN
                IF bo_stat.COVERAGE_CODE IN ('810', '811') THEN
                    v_TEMP_LOSS := '29';
                ELSE
                    v_TEMP_LOSS := '59';
                END IF;
            END IF;


            v_TYPE_OF_LOSS := v_TEMP_LOSS;
        END IF;


        IF ( v_HOLD_COVERAGE IN ('21', '22') ) AND v_TYPE_OF_LOSS = '59' THEN
            v_TEMP_LOSS := '29';
            v_TYPE_OF_LOSS := '29';
        END IF;


        IF bo_stat.EFF_DATE >= TO_DATE('01012008', 'MMDDYYYY') THEN
            IF v_TEMP_LOSS = '  ' OR v_HOLD_COVERAGE = '19' THEN
                IF v_HOLD_COVERAGE NOT IN ('01', '02', '21', '22') THEN
                    v_TYPE_OF_LOSS := '59';
                ELSE
                    v_TYPE_OF_LOSS := '29';
                END IF;
            END IF;
        END IF;

        IF v_TEMP_LOSS = '22' THEN
            v_TYPE_OF_LOSS := '81';
        END IF;


        -- Hold current Type of Loss value for processing other fields.
        v_TEMP_LOSS := v_TYPE_OF_LOSS;


        IF v_HOLD_TYPE_POLICY = '81' THEN
            IF v_TYPE_OF_LOSS = '28' THEN
                v_TYPE_OF_LOSS := '58';
            END IF;
        END IF;


        IF bo_stat.ITEM_STATE_CD = 'NJ' THEN
            IF bo_stat.COVERAGE_CODE IN ('101', '110') THEN
                v_TYPE_OF_LOSS := '26';
            ELSE
                IF bo_stat.COVERAGE_CODE IN ('102', '120') THEN
                    v_TYPE_OF_LOSS := '26';
                END IF;
            END IF;
        END IF;




--- v_RATING_ID                        VARCHAR2(1);
        v_RATING_ID := ' ';

        IF v_HOLD_COVERAGE <> '19' THEN
            v_RATING_ID := NVL(bo_stat.CSP_RATE_ID, ' ');
            --v_RATING_ID := NVL(bo_stat.BOP_CSP_RATE_ID, ' ');  -- paid losses only

            IF v_RATING_ID <> '5' THEN
                v_RATING_ID := '4';
            END IF;
        END IF;

        IF v_RATING_ID = ' ' THEN
            IF v_HOLD_COVERAGE IN ('01', '02', '21', '22', '23', '24') THEN
                v_RATING_ID := '4';
            END IF;
        END IF;

        IF TRIM(v_HOLD_COVERAGE) IN ('3', '4', '5', '6', '7', '8', '9') THEN
            v_RATING_ID := ' ';
        END IF;

        IF v_TYPE_OF_LOSS IN ('41', '42', '43', '44', '45', '49') THEN
            v_RATING_ID := ' ';
        END IF;

        IF v_COVERAGE NOT IN ('21', '22', '01', '02') THEN
            v_RATING_ID := ' ';
        END IF;

        IF v_COVERAGE NOT IN ('21', '22', '23', '24', '18', '01', '02') THEN
            IF ( SUBSTR(v_TYPE_OF_LOSS, 1, 1) IN ('2', '3', '6', '7', '8') ) OR ( v_TYPE_OF_LOSS IN ('51', '52', '93', '94', '97') ) THEN
                v_RATING_ID := ' ';
            END IF;
        END IF;



--- v_CONSTRUCTION                     VARCHAR2(1);
        v_CONSTRUCTION := '1';

        IF bo_stat.BOP_CONSTRUCT = 'FR' THEN
            v_CONSTRUCTION := '1';
        END IF;

        IF bo_stat.BOP_CONSTRUCT = 'JM' THEN
            v_CONSTRUCTION := '2';
        END IF;

        IF bo_stat.BOP_CONSTRUCT = 'NC' THEN
            v_CONSTRUCTION := '3';
        END IF;

        IF bo_stat.BOP_CONSTRUCT = 'RE' THEN
            v_CONSTRUCTION := '6';
        END IF;



--- v_PROTECTION                       VARCHAR2(2);
        v_PROTECTION := '  ';

        IF v_HOLD_COVERAGE <> '19' THEN
            v_PROTECTION := NVL(bo_stat.BOP_PROT_CLASS_B83A, '  ');


            --- 07/2016 fix for protection class on Coverage 335
            IF NVL(bo_stat.COVERAGE_CODE, '   ') IN ('335') THEN
                IF v_PROTECTION = '  ' THEN
                    v_PROTECTION := Get_BOP335_Protection(bo_stat.POLICY_NUMBER, bo_stat.EFF_DATE, bo_stat.EXP_DATE, bo_stat.LOSS_DATE);
                END IF;
            END IF;

            --- 07/2016 fix for protection class on Coverages 810 & 811
            IF NVL(bo_stat.COVERAGE_CODE, '   ') IN ('810', '811') THEN
                IF v_PROTECTION = '  ' THEN
                    v_PROTECTION := Get_BOP_Protection(bo_stat.POLICY_NUMBER, bo_stat.ITEM_NUM, bo_stat.EFF_DATE, bo_stat.EXP_DATE, bo_stat.ACTG_DATE);
                END IF;
            END IF;

        END IF;

        IF v_PROTECTION = '  ' THEN
            IF v_HOLD_COVERAGE IN ('01', '02', '21', '22', '23', '24') THEN
                v_PROTECTION := '01';
            END IF;
        END IF;



--- v_FILLER_41                        VARCHAR2(5);
        --v_FILLER_41 := ' ';


--- v_DEDUCTIBLE                       VARCHAR2(5);  --added 4/28/17 --ASI/RJC
        -- 2017 new requirements
        v_DEDUCTIBLE := ' ';

        IF bo_stat.EFF_DATE >= TO_DATE('01012017','MMDDYYYY') THEN
            IF NVL(bo_stat.COVERAGE_CODE, '   ') IN ('335', '810', '811') THEN
                CASE
                    WHEN bo_stat.COVERAGE_CODE = '335' THEN    v_DEDUCTIBLE := '00000';
                    ELSE v_DEDUCTIBLE := LPAD(TO_CHAR(NVL(bo_stat.DED_AMT,0)),5,'0');
                END CASE;
            END IF;
        END IF;



--- v_TERRORISM_COVERAGE               VARCHAR2(1);
        v_TERRORISM_COVERAGE := '3';



--- v_WIND_COVERAGE                    VARCHAR2(1);
        v_WIND_COVERAGE := ' ';



--- v_BCEG                             VARCHAR2(2);
        v_BCEG := ' ';

        -- 2017 new requirements    --added 4/24/17 --ASI/RJC
        IF bo_stat.EFF_DATE >= TO_DATE('01012017','MMDDYYYY') THEN
            IF (v_COVERAGE IN ('01', '02', '21', '22')) OR (v_COVERAGE >= '62' AND v_COVERAGE <= '73') THEN
                v_BCEG := '99';

/*                -- Including code for when the required data is available - replace [[community grade]] and [[building certified]] with the applicable fields once they have been added, adjust code as needed to match datatype.
                IF ([[community grade]] IS NOT NULL) AND ([[community grade]] <> 99) THEN
                    IF [[building certified]] THEN    --building individually certified as grade 1
                        CASE
                            WHEN [[community grade]] =  1 THEN v_BCEG := '11';
                            WHEN [[community grade]] =  2 THEN v_BCEG := '12';
                            WHEN [[community grade]] =  3 THEN v_BCEG := '13';
                            WHEN [[community grade]] =  4 THEN v_BCEG := '14';
                            WHEN [[community grade]] =  5 THEN v_BCEG := '15';
                            WHEN [[community grade]] =  6 THEN v_BCEG := '16';
                            WHEN [[community grade]] =  7 THEN v_BCEG := '17';
                            WHEN [[community grade]] =  8 THEN v_BCEG := '18';
                            WHEN [[community grade]] =  9 THEN v_BCEG := '19';
                            WHEN [[community grade]] = 10 THEN v_BCEG := '20';
                            ELSE v_BCEG := '99';
                        END CASE;
                    ELSE    --building not individually certified
                        CASE
                            WHEN [[community grade]] =  1 THEN v_BCEG := '01';
                            WHEN [[community grade]] =  2 THEN v_BCEG := '02';
                            WHEN [[community grade]] =  3 THEN v_BCEG := '03';
                            WHEN [[community grade]] =  4 THEN v_BCEG := '04';
                            WHEN [[community grade]] =  5 THEN v_BCEG := '05';
                            WHEN [[community grade]] =  6 THEN v_BCEG := '06';
                            WHEN [[community grade]] =  7 THEN v_BCEG := '07';
                            WHEN [[community grade]] =  8 THEN v_BCEG := '08';
                            WHEN [[community grade]] =  9 THEN v_BCEG := '09';
                            WHEN [[community grade]] = 10 THEN v_BCEG := '10';
                            ELSE v_BCEG := '99';
                        END CASE;
                    END IF;
                END IF;
*/
            END IF;
        END IF;



--- v_RATING_BASIS                     VARCHAR2(1);
        v_RATING_BASIS := ' ';

        IF v_HOLD_COVERAGE IN ('01', '21', '23') THEN
            v_RATING_BASIS := NVL(bo_stat.BOP_RATING_BASIS, ' ');

            IF v_RATING_BASIS = ' ' THEN
                v_RATING_BASIS := '1';
            END IF;
        END IF;

        IF v_HOLD_COVERAGE IN ('01', '21') THEN
            v_RATING_BASIS := NVL(bo_stat.BOP_RATING_BASIS, ' ');

            IF NOT ( bo_stat.ITEM_STATE_CD <> 'NY' AND v_RATING_BASIS IN ('1', '2') ) THEN
                IF NOT ( bo_stat.ITEM_STATE_CD = 'NY' AND v_RATING_BASIS IN ('1', '2', '7', '8') ) THEN
                    v_RATING_BASIS := '1';
                END IF;
            END IF;
        END IF;

        IF v_HOLD_COVERAGE IN ('23', '24', '18') THEN
            v_RATING_BASIS := '7';
        END IF;

        IF v_TYPE_OF_LOSS IN ('41', '42', '43', '44', '45', '49') THEN
            v_RATING_BASIS := ' ';
        END IF;


        IF v_COVERAGE NOT IN ('01', '21') THEN
            v_RATING_BASIS := ' ';
        END IF;

        IF v_COVERAGE NOT IN ('21', '22', '23', '24', '18', '01', '02') THEN
            IF ( SUBSTR(v_TYPE_OF_LOSS, 1, 1) IN ('2', '3', '6', '7', '8') ) OR ( v_TYPE_OF_LOSS IN ('51', '52', '93', '94', '97') ) THEN
                v_RATING_BASIS := ' ';
            END IF;
        END IF;



--- v_STATE_EXCEPTION                  VARCHAR2(1);
        v_STATE_EXCEPTION := ' ';



--- v_FILLER_52                        VARCHAR2(2);
        v_FILLER_52 := ' ';



--- v_LIABILITY_LIMITS                 VARCHAR2(5);
        v_LIABILITY_LIMITS := ' ';

        IF ( v_HOLD_COVERAGE IN ('01', '02', '21', '22', '23', '24') OR bo_stat.EFF_DATE >= TO_DATE('09012012', 'MMDDYYYY') ) THEN
            IF NVL(bo_stat.BOP_LIAB_LIM_HOLD, ' ') <> ' ' AND TO_NUMBER(bo_stat.BOP_LIAB_LIM_HOLD) <> 0 THEN
                v_LIABILITY_LIMITS := TO_NUMBER(bo_stat.BOP_LIAB_LIM_HOLD) / 1000;
                v_LIABILITY_LIMITS := LPAD(v_LIABILITY_LIMITS, 5, '0');
            ELSE
                CASE NVL(bo_stat.BOP_CSP_LIMIT_CODE, ' ')
                    WHEN '6' THEN v_LIABILITY_LIMITS := '00300';
                    WHEN '5' THEN v_LIABILITY_LIMITS := '00500';
                    WHEN '8' THEN v_LIABILITY_LIMITS := '01000';
                    WHEN 'B' THEN v_LIABILITY_LIMITS := '02000';
                    WHEN 'C' THEN v_LIABILITY_LIMITS := '03000';
                    WHEN 'D' THEN v_LIABILITY_LIMITS := '04000';
                    WHEN 'E' THEN v_LIABILITY_LIMITS := '05000';
                    WHEN 'F' THEN v_LIABILITY_LIMITS := '06000';
                    WHEN 'G' THEN v_LIABILITY_LIMITS := '07000';
                    WHEN 'H' THEN v_LIABILITY_LIMITS := '08000';
                    WHEN 'I' THEN v_LIABILITY_LIMITS := '09000';
                    ELSE          v_LIABILITY_LIMITS := '01000';
                END CASE;
            END IF;
        END IF;


        IF v_COVERAGE NOT IN ('21', '22', '23', '24', '18', '01', '02', '14') THEN
            v_LIABILITY_LIMITS := ' ';
        END IF;



--- v_FILLER_59                        VARCHAR2(1);
        v_FILLER_59 := ' ';



--- v_FILLER_ISO                       VARCHAR2(1);
        v_FILLER_ISO := ' ';



--- v_LIABILITY_FORM                   VARCHAR2(1);    -- Lead Liability
        v_LIABILITY_FORM := ' ';

        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_LIABILITY_FORM := '9';
        END IF;

        v_LIABILITY_FORM := '3';

        IF v_HOLD_COVERAGE IN ('01', '02', '23', '24') THEN
            IF bo_stat.ITEM_STATE_CD = 'MA' THEN
                IF v_NUM_CONST_YEAR < 1977 THEN
                    CASE bo_stat.LEAD_POISON_COV
                        WHEN '1' THEN v_LIABILITY_FORM := 'H';
                        WHEN '2' THEN v_LIABILITY_FORM := 'J';
                        WHEN '3' THEN v_LIABILITY_FORM := 'K';
                        WHEN '4' THEN v_LIABILITY_FORM := 'L';
                        WHEN '5' THEN v_LIABILITY_FORM := 'M';
                        WHEN '6' THEN v_LIABILITY_FORM := 'N';
                        WHEN '7' THEN v_LIABILITY_FORM := 'P';
                        ELSE          v_LIABILITY_FORM := 'P';
                    END CASE;
                END IF;
            END IF;
        END IF;

        IF bo_stat.ITEM_STATE_CD = 'RI' THEN
            IF v_NUM_CONST_YEAR < 1978 THEN
                v_LIABILITY_FORM := 'P';
            END IF;
        END IF;

        IF bo_stat.COVERAGE_CODE = '962' THEN
            v_LIABILITY_FORM := '9';
        END IF;

        --07/2016 fix for Coverage 335
        IF NVL(bo_stat.COVERAGE_CODE, ' ') <> '335' THEN
            IF NVL(bo_stat.BOP_COVERAGE, '  ') NOT IN ('01', '02', '23', '24') THEN
                v_LIABILITY_FORM := ' ';
            END IF;
        END IF;


        IF v_COVERAGE NOT IN ('23', '24', '18', '01', '02') THEN
            v_LIABILITY_FORM := ' ';
        ELSE
            IF v_STATE NOT IN ('20', '29', '38') THEN
                v_LIABILITY_FORM := '3';
            END IF;
        END IF;



--- v_CLAIMS_ENTRY_DATE                VARCHAR2(3);
        v_CLAIMS_ENTRY_DATE := ' ';



--- v_CLAIMS_NOTICE_DATE               VARCHAR2(3);
        v_CLAIMS_NOTICE_DATE := ISO_Date_Conv(bo_stat.REPORTED_DATE, 'MYY');



--- v_LIABILITY_EXP_IND                VARCHAR2(1);
        v_LIABILITY_EXP_IND := ' ';

        IF v_HOLD_COVERAGE IN ('18', '14') THEN
            v_LIABILITY_EXP_IND := '2';
        ELSE
            IF v_HOLD_COVERAGE IN ('23', '24', '13', '15', '33', '43', '50') THEN
                v_LIABILITY_EXP_IND := '7';
            ELSE
                v_LIABILITY_EXP_IND := ' ';
            END IF;
        END IF;


        IF v_COVERAGE NOT IN ('13', '14', '15', '23', '24', '43', '50', '51', '52', '53', '54', '55', '56', 'A2', '18', '01', '02') THEN
            v_LIABILITY_EXP_IND := ' ';
        END IF;

        IF v_COVERAGE IN ('23', '24', '13', '14', '15', '18', '01', '02') THEN
            IF v_LIABILITY_EXP_IND = ' ' THEN
                v_LIABILITY_EXP_IND := '7';
            END IF;
        END IF;



--- v_FILLER_69                        VARCHAR2(1);
        v_FILLER_69 := ' ';


--- v_ZIP_CODE_FIRST_5                 VARCHAR2(9);
        v_ZIP_CODE_FIRST_5 := NVL(bo_stat.LOC_ZIP, ' ');


--- v_LESSOR_OCC_RISK_IND              VARCHAR2(1);
        v_LESSOR_OCC_RISK_IND := ' ';

        IF bo_stat.EFF_DATE >= TO_DATE('09012012', 'MMDDYYYY') THEN
            IF NVL(bo_stat.BOP_OCCUPANCY, ' ') = 'O' THEN
                v_LESSOR_OCC_RISK_IND := '1';
            ELSE
                v_LESSOR_OCC_RISK_IND := '2';
            END IF;
        END IF;



--- v_FILLER_79                        VARCHAR2(1);
        v_FILLER_79 := ' ';


--- v_STATE_EXCEPTION_2                VARCHAR2(1);
        v_STATE_EXCEPTION_2 := ' ';


--- v_EXPOSURE                         VARCHAR2(7);
        v_EXPOSURE := ' ';

        -- 2017 new requirements    --added 4/28/17 --ASI/RJC
        IF bo_stat.EFF_DATE >= TO_DATE('01012017','MMDDYYYY') THEN
            v_NUM_EXPOSURE := 0;

            IF bo_stat.COVERAGE_CODE = '962' THEN
                v_NUM_EXPOSURE := bo_stat.BOP_NUM_UNITS;
            END IF;

            IF v_HOLD_COVERAGE = '14' THEN
                v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;

                --IF bo_stat.WRITTEN_PREM < 0 THEN
                --    v_NUM_EXPOSURE := v_NUM_EXPOSURE * -1;
                --END IF;
            END IF;

            IF (v_HOLD_COVERAGE IN ('01', '02')) OR  (v_HOLD_COVERAGE > '20' AND v_HOLD_COVERAGE < '31') OR (bo_stat.EFF_DATE >= TO_DATE('09012012', 'MMDDYYYY')) THEN
                IF v_HOLD_COVERAGE NOT IN ('14', '18', '49') THEN

                    --v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;  --Changed 5/15/2017 to address truncation of data for limits greater than or equal to 10 million.  --ASI/RJC
                    IF NVL(bo_stat.EXCESS_LIMIT_SW, ' ') = 'Y' THEN
                        --v_NUM_EXPOSURE := bo_stat.EXCESS_LIMIT;
                        v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;  --temporary, keep until EXCESS_LIMIT properly populated.
                    ELSE
                        v_NUM_EXPOSURE := bo_stat.LIMIT_AMT_PERSON;
                    END IF;


                    IF (bo_stat.BOP_LIMIT_AMT_PERSON_EXP <> 0 OR bo_stat.BOP_LIMIT_AMT_OCCUR_EXP <> 0) THEN
                        IF bo_stat.BOP_LIMIT_AMT_PERSON_EXP > 0 THEN
                            v_NUM_EXPOSURE := bo_stat.BOP_LIMIT_AMT_PERSON_EXP;
                        END IF;
                    END IF;

                    IF v_NUM_EXPOSURE = 0 THEN
                        v_NUM_EXPOSURE := 100000;
                    END IF;

                    v_NUM_EXPOSURE := TRUNC( (v_NUM_EXPOSURE + 50) / 100 );

                    --IF bo_stat.WRITTEN_PREM < 0 THEN
                    --    IF v_NUM_EXPOSURE > 0 THEN
                    --        v_NUM_EXPOSURE := v_NUM_EXPOSURE * -1;
                    --    END IF;
                    --END IF;

                END IF;
            END IF;

            v_EXPOSURE := ISO_Signed_Number(v_NUM_EXPOSURE, 7);

            --Changed 5/5/17 to match current CSP-I requirements.  --ASI/RJC
            --IF NOT ( ( v_HOLD_COVERAGE IN ('01', '02', '18', '21', '22', '23', '24', '14', '04', '05', '07') ) OR ( v_HOLD_COVERAGE > '24' AND v_HOLD_COVERAGE < '32' ) ) THEN
            IF v_COVERAGE IN ('12', '19', 'A1', 'B1') THEN
                v_EXPOSURE := ' ';
            END IF;
        END IF;



--- v_ZIP_CODE_LAST_4                  VARCHAR2(9);
        v_ZIP_CODE_LAST_4 := ' ';


--- v_YEAR_OF_CONSTRUCTION             VARCHAR2(4);
        v_YEAR_OF_CONSTRUCTION := '  ';

        IF bo_stat.EFF_DATE > TO_DATE('04302015', 'MMDDYYYY') THEN
            IF v_HOLD_COVERAGE IN ('01', '02', '21', '22') THEN
                v_YEAR_OF_CONSTRUCTION := LPAD(TO_CHAR(MOD(v_NUM_CONST_YEAR, 100)), 2, '0');

                IF v_NUM_CONST_YEAR < 1901 THEN
                    v_YEAR_OF_CONSTRUCTION := '99';
                ELSE
                    IF v_NUM_CONST_YEAR > 1998 THEN
                        IF v_NUM_CONST_YEAR = 1999 THEN
                            v_YEAR_OF_CONSTRUCTION := 'NN';
                        ELSE
                            IF v_NUM_CONST_YEAR = 2000 THEN
                                v_YEAR_OF_CONSTRUCTION := 'TT';
                            ELSE
                                IF v_NUM_CONST_YEAR < 2010 THEN
                                    v_YEAR_OF_CONSTRUCTION := 'T';
                                ELSE
                                    IF v_NUM_CONST_YEAR < 2020 THEN
                                        v_YEAR_OF_CONSTRUCTION := 'A';
                                    ELSE
                                        IF v_NUM_CONST_YEAR < 2030 THEN
                                            v_YEAR_OF_CONSTRUCTION := 'B';
                                        ELSE
                                            IF v_NUM_CONST_YEAR < 2040 THEN
                                                v_YEAR_OF_CONSTRUCTION := 'C';
                                            ELSE
                                                IF v_NUM_CONST_YEAR < 2050 THEN
                                                    v_YEAR_OF_CONSTRUCTION := 'D';
                                                ELSE
                                                    IF v_NUM_CONST_YEAR < 2060 THEN
                                                        v_YEAR_OF_CONSTRUCTION := 'E';
                                                    ELSE
                                                        IF v_NUM_CONST_YEAR < 2070 THEN
                                                            v_YEAR_OF_CONSTRUCTION := 'F';
                                                        ELSE
                                                            IF v_NUM_CONST_YEAR < 2080 THEN
                                                                v_YEAR_OF_CONSTRUCTION := 'G';
                                                            ELSE
                                                                IF v_NUM_CONST_YEAR < 2090 THEN
                                                                    v_YEAR_OF_CONSTRUCTION := 'H';
                                                                ELSE
                                                                    v_YEAR_OF_CONSTRUCTION := 'I';
                                                                END IF;
                                                            END IF;
                                                        END IF;
                                                    END IF;
                                                END IF;
                                            END IF;
                                        END IF;
                                    END IF;
                                END IF;

                                v_YEAR_OF_CONSTRUCTION := v_YEAR_OF_CONSTRUCTION || TO_CHAR(MOD(v_NUM_CONST_YEAR, 10));
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;



--- v_LOSS_AMOUNT                      NUMBER(8);
        v_LOSS_AMOUNT := ROUND(bo_stat.CURRENT_RESERVE);



--- v_CLAIM_COUNT                      VARCHAR2(1);
        v_CLAIM_COUNT := '0';



--- v_OCCURRENCE_ID                    VARCHAR2(12);
        v_OCCURRENCE_ID := '13' || RPAD(TRIM(bo_stat.CLAIM_NUMBER), 8, ' ') || LPAD(TO_CHAR(bo_stat.CLAIMANT_NUMBER), 2, '0');



--- v_CLAIM_ID                         VARCHAR2(2);
        v_CLAIM_ID := '01';



--- v_PREMIUM_RECORD_ID                VARCHAR2(33);
        -- MODULE & POLICY NUMBER
        v_PREMIUM_RECORD_ID := '13' || RPAD(bo_stat.POLICY_NUMBER, 10, ' ');

        -- ITEM NUMBER
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || LPAD(TO_CHAR(NVL(bo_stat.ITEM_NUM, 0)), 3, '0');

        -- COVERAGE/ENDORSEMENT
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || RPAD(v_TEMP_C87_B81, 8, ' ');

        -- YEAR CONSTR
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || RPAD(SUBSTR(NVL(bo_stat.BOP_CONST_YEAR, '00000'), 2, 4), 4, ' ');

        -- RECD NUM
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || '  ';

        -- TAPE IND & REPT LVL
        v_PREMIUM_RECORD_ID := v_PREMIUM_RECORD_ID || 'GF' || '  ';



--- v_RECORD_NUMBER                    NUMBER(6);
        v_RECORD_NUMBER := NVL(v_RECORD_NUMBER, 0) + 1;



--- v_SUMM_ACTG_DATE                   VARCHAR2(8);
        v_SUMM_ACTG_DATE := TO_CHAR(bo_stat.ACTG_DATE, 'MMDDYYYY');



--- "NOT BUILDING OR CONTENTS" LAYOUT
    -- Set the following fields to blank if the record is not Building or Contents coverage
    IF v_COVERAGE NOT IN ('21', '22', '23', '24', '18', '01', '02') THEN
        v_RATING_ID          := ' ';
        v_CONSTRUCTION       := ' ';
        v_PROTECTION         := ' ';
        v_WIND_COVERAGE      := ' ';
        v_BCEG               := ' ';
        v_RATING_BASIS       := ' ';
        v_STATE_EXCEPTION    := ' ';
        v_LIABILITY_FORM     := ' ';
        v_CLAIMS_ENTRY_DATE  := ' ';
        v_CLAIMS_NOTICE_DATE := ' ';
        v_STATE_EXCEPTION_2 := ' ';  --added 04/28/17  --ASI/JRC
    END IF;



--- v_DEBUG_DATA                       VARCHAR2(40);
    -- This field is used for optionally sending debug data through to the output file.
    -- Uncomment filter on column name in Procedure "write_fixed_file_ISO_LOZ" before running submission.
        v_DEBUG_DATA := '.';



--- --- ---

        INSERT INTO RPT_CLAIMS_ISO_BO_STAT (
            COMPANY_ID                   ,
            TRANSACTION_TYPE             ,
            ACT_DATE                     ,
            INC_DATE                     ,
            LOSS_DATE                    ,
            STAT_PLAN_INDICATOR          ,
            STATE                        ,
            TERRITORY                    ,
            TYPE_POLICY                  ,
            ASL                          ,
            SUBLINE                      ,
            CLASS_CODE                   ,
            COVERAGE                     ,
            RATING_ID                    ,
            CONSTRUCTION                 ,
            PROTECTION                   ,
            --FILLER_41                    ,
            DEDUCTIBLE                   ,
            TERRORISM_COVERAGE           ,
            WIND_COVERAGE                ,
            BCEG                         ,
            RATING_BASIS                 ,
            STATE_EXCEPTION              ,
            FILLER_52                    ,
            LIABILITY_LIMITS             ,
            FILLER_59                    ,
            FILLER_ISO                   ,
            LIABILITY_FORM               ,
            CLAIMS_ENTRY_DATE            ,
            CLAIMS_NOTICE_DATE           ,
            LIABILITY_EXP_IND            ,
            FILLER_69                    ,
            TYPE_OF_LOSS                 ,
            CLAIM_COUNT                  ,
            ZIP_CODE_FIRST_5             ,
            LESSOR_OCC_RISK_IND          ,
            FILLER_79                    ,
            STATE_EXCEPTION_2            ,
            EXPOSURE                     ,
            ZIP_CODE_LAST_4              ,
            YEAR_OF_CONSTRUCTION         ,
            LOSS_AMOUNT                  ,
            OCCURRENCE_ID                ,
            CLAIM_ID                     ,
            PREMIUM_RECORD_ID            ,
            RECORD_NUMBER                ,
            DEBUG_DATA                   ,
            COV_CODE                     ,
            SUMM_ACTG_DATE
        ) VALUES (
            v_COMPANY_ID                 ,
            v_TRANSACTION_TYPE           ,
            v_ACT_DATE                   ,
            v_INC_DATE                   ,
            v_LOSS_DATE                  ,
            v_STAT_PLAN_INDICATOR        ,
            v_STATE                      ,
            v_TERRITORY                  ,
            v_TYPE_POLICY                ,
            v_ASL                        ,
            v_SUBLINE                    ,
            v_CLASS_CODE                 ,
            v_COVERAGE                   ,
            v_RATING_ID                  ,
            v_CONSTRUCTION               ,
            v_PROTECTION                 ,
            --v_FILLER_41                  ,
            v_DEDUCTIBLE                 ,
            v_TERRORISM_COVERAGE         ,
            v_WIND_COVERAGE              ,
            v_BCEG                       ,
            v_RATING_BASIS               ,
            v_STATE_EXCEPTION            ,
            v_FILLER_52                  ,
            v_LIABILITY_LIMITS           ,
            v_FILLER_59                  ,
            v_FILLER_ISO                 ,
            v_LIABILITY_FORM             ,
            v_CLAIMS_ENTRY_DATE          ,
            v_CLAIMS_NOTICE_DATE         ,
            v_LIABILITY_EXP_IND          ,
            v_FILLER_69                  ,
            v_TYPE_OF_LOSS               ,
            v_CLAIM_COUNT                ,
            v_ZIP_CODE_FIRST_5           ,
            v_LESSOR_OCC_RISK_IND        ,
            v_FILLER_79                  ,
            v_STATE_EXCEPTION_2          ,
            v_EXPOSURE                   ,
            v_ZIP_CODE_LAST_4            ,
            v_YEAR_OF_CONSTRUCTION       ,
            v_LOSS_AMOUNT                ,
            v_OCCURRENCE_ID              ,
            v_CLAIM_ID                   ,
            v_PREMIUM_RECORD_ID          ,
            v_RECORD_NUMBER              ,
            v_DEBUG_DATA                 ,
            NVL(bo_stat.COVERAGE_CODE, ' '),
            v_SUMM_ACTG_DATE
        );

        COMMIT;

    END LOOP;

--- --- ---

    CLOSE all_bo_stat;
    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_MSSG :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG || bo_stat.policy_number);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
END;
PROCEDURE Summarize_ISO_Prem_BO
IS

    v_procname      RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                        := 'ND_BUREAU.Summarize_ISO_Prem_BO';
    v_err_mssg      VARCHAR2 (200);
    v_err_loc       VARCHAR2 (100);


    CURSOR all_prem_stat
    IS
        SELECT *
        FROM RPT_POLICY_ISO_BO_STAT A
        ORDER BY --SUBSTR(PREMIUM_RECORD_ID, 1, 12),
                 PREMIUM_RECORD_ID               ,
                 COMPANY_ID                      ,
                 TRANSACTION_TYPE                ,
                 ACT_DATE                        ,
                 INC_DATE                        ,
                 EFF_DATE                        ,
                 EXP_DATE                        ,
                 STATE                           ,
                 TERRITORY                       ,
                 TYPE_POLICY                     ,
                 ASL                             ,
                 SUBLINE                         ,
                 CLASS_CODE                      ,
                 COVERAGE                        ,
                 RATING_ID                       ,
                 CONSTRUCTION                    ,
                 PROTECTION                      ,
                 --FILLER_41                       ,
                 DEDUCTIBLE                      ,
                 TERRORISM_COVERAGE              ,
                 WIND_COVERAGE                   ,
                 BCEG                            ,
                 RATING_BASIS                    ,
                 STATE_EXCEPTION                 ,
                 FILLER_52                       ,
                 LIABILITY_LIMITS                ,
                 FILLER_59                       ,
                 FILLER_ISO                      ,
                 LIABILITY_FORM                  ,
                 CLAIMS_ENTRY_DATE               ,
                 STATE_EXCEPTION_2               ,
                 FILLER_66                       ,
                 LESSOR_OCC_RISK_IND             ,
                 FILLER_72                       ,
                 STAT_PLAN_INDICATOR             ,
                 LIABILITY_EXP_IND               ,
                 FILLER_78                       ,
                 SUBSTR(EXPOSURE, 1, 6)          ,
                 --FILLER_88                       ,
                 RATING_MOD                      ,
                 FILLER_91                       ,
                 ABS(PREM_AMOUNT)                ,
                 FILLER_104                      ,
                 ZIP_CODE                        ,
                 YEAR_OF_CONSTRUCTION            ,
                 RECORD_NUMBER                   ;


    prem_stat                                all_prem_stat%ROWTYPE;


--- --- ---


--- Previous Record
    prev_COMPANY_ID                   VARCHAR2(4 BYTE);
    prev_TRANSACTION_TYPE             VARCHAR2(1 BYTE);
    prev_ACT_DATE                     VARCHAR2(2 BYTE);
    prev_INC_DATE                     VARCHAR2(3 BYTE);
    prev_EFF_DATE                     VARCHAR2(3 BYTE);
    prev_EXP_DATE                     VARCHAR2(3 BYTE);
    prev_STATE                        VARCHAR2(2 BYTE);
    prev_TERRITORY                    VARCHAR2(3 BYTE);
    prev_TYPE_POLICY                  VARCHAR2(2 BYTE);
    prev_ASL                          VARCHAR2(3 BYTE);
    prev_SUBLINE                      VARCHAR2(3 BYTE);
    prev_CLASS_CODE                   VARCHAR2(5 BYTE);
    prev_COVERAGE                     VARCHAR2(2 BYTE);
    prev_RATING_ID                    VARCHAR2(1 BYTE);
    prev_CONSTRUCTION                 VARCHAR2(1 BYTE);
    prev_PROTECTION                   VARCHAR2(2 BYTE);
    --prev_FILLER_41                    VARCHAR2(5 BYTE);
    prev_DEDUCTIBLE                   VARCHAR2(5 BYTE);
    prev_TERRORISM_COVERAGE           VARCHAR2(1 BYTE);
    prev_WIND_COVERAGE                VARCHAR2(1 BYTE);
    prev_BCEG                         VARCHAR2(2 BYTE);
    prev_RATING_BASIS                 VARCHAR2(1 BYTE);
    prev_STATE_EXCEPTION              VARCHAR2(1 BYTE);
    prev_FILLER_52                    VARCHAR2(2 BYTE);
    prev_LIABILITY_LIMITS             VARCHAR2(5 BYTE);
    prev_FILLER_59                    VARCHAR2(1 BYTE);
    prev_FILLER_ISO                   VARCHAR2(1 BYTE);
    prev_LIABILITY_FORM               VARCHAR2(1 BYTE);
    prev_CLAIMS_ENTRY_DATE            VARCHAR2(3 BYTE);
    prev_STATE_EXCEPTION_2            VARCHAR2(1 BYTE);
    prev_FILLER_66                    VARCHAR2(5 BYTE);
    prev_LESSOR_OCC_RISK_IND          VARCHAR2(1 BYTE);
    prev_FILLER_72                    VARCHAR2(4 BYTE);
    prev_STAT_PLAN_INDICATOR          VARCHAR2(1 BYTE);
    prev_LIABILITY_EXP_IND            VARCHAR2(1 BYTE);
    prev_FILLER_78                    VARCHAR2(3 BYTE);
    prev_EXPOSURE                     VARCHAR2(7 BYTE);
    --prev_FILLER_88                    VARCHAR2(8 BYTE);
    prev_RATING_MOD                   VARCHAR2(3);
    prev_FILLER_91                    VARCHAR2(5);
    prev_PREM_AMOUNT                  NUMBER(8);
    prev_FILLER_104                   VARCHAR2(1 BYTE);
    prev_ZIP_CODE                     VARCHAR2(9 BYTE);
    prev_YEAR_OF_CONSTRUCTION         VARCHAR2(4 BYTE);
    prev_PREMIUM_RECORD_ID            VARCHAR2(33 BYTE);
    prev_RECORD_NUMBER                NUMBER(6);
    prev_DEBUG_DATA                   VARCHAR2(40 BYTE);
    prev_NUM_EXPOSURE                 NUMBER(7);


--- Procedural Variables
    v_FIRST_SW                        VARCHAR2(1);
    v_OUTPUT_SW                       VARCHAR2(1);


--- --- ---


BEGIN

    DBMS_OUTPUT.PUT_LINE (v_procname);

    v_err_loc := 'Summarize_ISO_Prem_BO Loop';

    OPEN all_prem_stat;

    v_FIRST_SW := '0';


    -- Determine records that cancel out when combined
    LOOP
        -- Read next record
        FETCH all_prem_stat INTO prem_stat;
        EXIT WHEN all_prem_stat%NOTFOUND;

        -- Reset output switch
        v_OUTPUT_SW := '1';

        -- Skip this section for first record
        IF v_FIRST_SW <> '0' THEN

        -- Compare previous record to current record
            IF  prev_COMPANY_ID           = prem_stat.COMPANY_ID
            AND prev_TRANSACTION_TYPE     = prem_stat.TRANSACTION_TYPE
            AND prev_ACT_DATE             = prem_stat.ACT_DATE
            AND prev_INC_DATE             = prem_stat.INC_DATE
            AND prev_EFF_DATE             = prem_stat.EFF_DATE
            AND prev_EXP_DATE             = prem_stat.EXP_DATE
            AND prev_STATE                = prem_stat.STATE
            AND prev_TERRITORY            = prem_stat.TERRITORY
            AND prev_TYPE_POLICY          = prem_stat.TYPE_POLICY
            AND prev_ASL                  = prem_stat.ASL
            AND prev_SUBLINE              = prem_stat.SUBLINE
            AND prev_CLASS_CODE           = prem_stat.CLASS_CODE
            AND prev_COVERAGE             = prem_stat.COVERAGE
            AND prev_RATING_ID            = prem_stat.RATING_ID
            AND prev_CONSTRUCTION         = prem_stat.CONSTRUCTION
            AND prev_PROTECTION           = prem_stat.PROTECTION
            --AND prev_FILLER_41            = prem_stat.FILLER_41
            AND prev_DEDUCTIBLE           = prem_stat.DEDUCTIBLE
            AND prev_TERRORISM_COVERAGE   = prem_stat.TERRORISM_COVERAGE
            AND prev_WIND_COVERAGE        = prem_stat.WIND_COVERAGE
            AND prev_BCEG                 = prem_stat.BCEG
            AND prev_RATING_BASIS         = prem_stat.RATING_BASIS
            AND prev_STATE_EXCEPTION      = prem_stat.STATE_EXCEPTION
            --AND prev_FILLER_52            = prem_stat.FILLER_52
            AND prev_LIABILITY_LIMITS     = prem_stat.LIABILITY_LIMITS
            --AND prev_FILLER_59            = prem_stat.FILLER_59
            AND prev_FILLER_ISO           = prem_stat.FILLER_ISO
            AND prev_LIABILITY_FORM       = prem_stat.LIABILITY_FORM
            AND prev_CLAIMS_ENTRY_DATE    = prem_stat.CLAIMS_ENTRY_DATE
            AND prev_STATE_EXCEPTION_2    = prem_stat.STATE_EXCEPTION_2
            --AND prev_FILLER_66            = prem_stat.FILLER_66
            AND prev_LESSOR_OCC_RISK_IND  = prem_stat.LESSOR_OCC_RISK_IND
            --AND prev_FILLER_72            = prem_stat.FILLER_72
            AND prev_STAT_PLAN_INDICATOR  = prem_stat.STAT_PLAN_INDICATOR
            AND prev_LIABILITY_EXP_IND    = prem_stat.LIABILITY_EXP_IND
            --AND prev_FILLER_78            = prem_stat.FILLER_78
            --AND prev_FILLER_88            = prem_stat.FILLER_88
            AND prev_RATING_MOD           = prem_stat.RATING_MOD
            --AND prev_FILLER_91            = prem_stat.FILLER_91
            --AND prev_FILLER_104           = prem_stat.FILLER_104
            AND prev_ZIP_CODE             = prem_stat.ZIP_CODE
            AND prev_YEAR_OF_CONSTRUCTION = prem_stat.YEAR_OF_CONSTRUCTION
            AND prev_PREMIUM_RECORD_ID    = prem_stat.PREMIUM_RECORD_ID
            THEN

                -- Test whether records cancel
                IF (prev_PREM_AMOUNT + prem_stat.PREM_AMOUNT) = 0 THEN

                    -- Update output switch if records cancel
                    IF ( prev_EXPOSURE <> ' ' AND prem_stat.EXPOSURE <> ' ' ) THEN
                        IF (prev_NUM_EXPOSURE + prem_stat.NUM_EXPOSURE) = 0 THEN
                            v_OUTPUT_SW := '0';
                        END IF;
                    ELSE
                        IF ( prev_EXPOSURE = ' ' AND prem_stat.EXPOSURE = ' ' ) THEN
                            v_OUTPUT_SW := '0';
                        END IF;
                    END IF;

                END IF;

            END IF;

        END IF;


        IF v_OUTPUT_SW = '0' THEN
        -- Flag records that cancel out, move on to next record

            UPDATE RPT_POLICY_ISO_BO_STAT
                SET OUTPUT_SW = 0
                WHERE RECORD_NUMBER = prev_RECORD_NUMBER;

            UPDATE RPT_POLICY_ISO_BO_STAT
                SET OUTPUT_SW = 0
                WHERE RECORD_NUMBER = prem_stat.RECORD_NUMBER;

            FETCH all_prem_stat INTO prem_stat;
            EXIT WHEN all_prem_stat%NOTFOUND;


        ELSE
        -- Flag records that should be output to file for submission

            UPDATE RPT_POLICY_ISO_BO_STAT
                SET OUTPUT_SW = 1
                WHERE RECORD_NUMBER = prev_RECORD_NUMBER;

        END IF;


        -- Move current record to previous record
        prev_COMPANY_ID           := prem_stat.COMPANY_ID           ;
        prev_TRANSACTION_TYPE     := prem_stat.TRANSACTION_TYPE     ;
        prev_ACT_DATE             := prem_stat.ACT_DATE             ;
        prev_INC_DATE             := prem_stat.INC_DATE             ;
        prev_EFF_DATE             := prem_stat.EFF_DATE             ;
        prev_EXP_DATE             := prem_stat.EXP_DATE             ;
        prev_STATE                := prem_stat.STATE                ;
        prev_TERRITORY            := prem_stat.TERRITORY            ;
        prev_TYPE_POLICY          := prem_stat.TYPE_POLICY          ;
        prev_ASL                  := prem_stat.ASL                  ;
        prev_SUBLINE              := prem_stat.SUBLINE              ;
        prev_CLASS_CODE           := prem_stat.CLASS_CODE           ;
        prev_COVERAGE             := prem_stat.COVERAGE             ;
        prev_RATING_ID            := prem_stat.RATING_ID            ;
        prev_CONSTRUCTION         := prem_stat.CONSTRUCTION         ;
        prev_PROTECTION           := prem_stat.PROTECTION           ;
        --prev_FILLER_41            := prem_stat.FILLER_41            ;
        prev_DEDUCTIBLE           := prem_stat.DEDUCTIBLE           ;
        prev_TERRORISM_COVERAGE   := prem_stat.TERRORISM_COVERAGE   ;
        prev_WIND_COVERAGE        := prem_stat.WIND_COVERAGE        ;
        prev_BCEG                 := prem_stat.BCEG                 ;
        prev_RATING_BASIS         := prem_stat.RATING_BASIS         ;
        prev_STATE_EXCEPTION      := prem_stat.STATE_EXCEPTION      ;
        prev_FILLER_52            := prem_stat.FILLER_52            ;
        prev_LIABILITY_LIMITS     := prem_stat.LIABILITY_LIMITS     ;
        prev_FILLER_59            := prem_stat.FILLER_59            ;
        prev_FILLER_ISO           := prem_stat.FILLER_ISO           ;
        prev_LIABILITY_FORM       := prem_stat.LIABILITY_FORM       ;
        prev_CLAIMS_ENTRY_DATE    := prem_stat.CLAIMS_ENTRY_DATE    ;
        prev_STATE_EXCEPTION_2    := prem_stat.STATE_EXCEPTION_2    ;
        prev_FILLER_66            := prem_stat.FILLER_66            ;
        prev_LESSOR_OCC_RISK_IND  := prem_stat.LESSOR_OCC_RISK_IND  ;
        prev_FILLER_72            := prem_stat.FILLER_72            ;
        prev_STAT_PLAN_INDICATOR  := prem_stat.STAT_PLAN_INDICATOR  ;
        prev_LIABILITY_EXP_IND    := prem_stat.LIABILITY_EXP_IND    ;
        prev_FILLER_78            := prem_stat.FILLER_78            ;
        prev_EXPOSURE             := prem_stat.EXPOSURE             ;
        --prev_FILLER_88            := prem_stat.FILLER_88            ;
        prev_RATING_MOD           := prem_stat.RATING_MOD           ;
        prev_FILLER_91            := prem_stat.FILLER_91            ;
        prev_PREM_AMOUNT          := prem_stat.PREM_AMOUNT          ;
        prev_FILLER_104           := prem_stat.FILLER_104           ;
        prev_ZIP_CODE             := prem_stat.ZIP_CODE             ;
        prev_YEAR_OF_CONSTRUCTION := prem_stat.YEAR_OF_CONSTRUCTION ;
        prev_PREMIUM_RECORD_ID    := prem_stat.PREMIUM_RECORD_ID    ;
        prev_RECORD_NUMBER        := prem_stat.RECORD_NUMBER        ;
        prev_DEBUG_DATA           := prem_stat.DEBUG_DATA           ;
        prev_NUM_EXPOSURE         := prem_stat.NUM_EXPOSURE         ;


        -- Set switch to indicate processing beyond first record
        v_FIRST_SW := '1';

    END LOOP;

    -- Flag last record for output
    IF v_OUTPUT_SW = '1' THEN
        UPDATE RPT_POLICY_ISO_BO_STAT
            SET OUTPUT_SW = 1
            WHERE RECORD_NUMBER = prev_RECORD_NUMBER;
    END IF;


    CLOSE all_prem_stat;


--- --- ---


    v_err_loc := 'Summarize_ISO_Prem_BO Insert';


    -- Insert into SUMM table, filtering out change records that sum to zero (per above loop)
    INSERT INTO RPT_POLICY_ISO_BO_STAT_SUMM
        SELECT COMPANY_ID           ,
               TRANSACTION_TYPE     ,
               ACT_DATE             ,
               INC_DATE             ,
               EFF_DATE             ,
               EXP_DATE             ,
               STATE                ,
               TERRITORY            ,
               TYPE_POLICY          ,
               ASL                  ,
               SUBLINE              ,
               CLASS_CODE           ,
               COVERAGE             ,
               RATING_ID            ,
               CONSTRUCTION         ,
               PROTECTION           ,
               --FILLER_41            ,
               DEDUCTIBLE           ,
               TERRORISM_COVERAGE   ,
               WIND_COVERAGE        ,
               BCEG                 ,
               RATING_BASIS         ,
               STATE_EXCEPTION      ,
               FILLER_52            ,
               LIABILITY_LIMITS     ,
               FILLER_59            ,
               FILLER_ISO           ,
               LIABILITY_FORM       ,
               CLAIMS_ENTRY_DATE    ,
               STATE_EXCEPTION_2    ,
               FILLER_66            ,
               LESSOR_OCC_RISK_IND  ,
               FILLER_72            ,
               STAT_PLAN_INDICATOR  ,
               LIABILITY_EXP_IND    ,
               FILLER_78            ,
               EXPOSURE             ,
               --FILLER_88            ,
               RATING_MOD           ,
               FILLER_91            ,
               PREM_AMOUNT          ,
               FILLER_104           ,
               ZIP_CODE             ,
               YEAR_OF_CONSTRUCTION ,
               PREMIUM_RECORD_ID    ,
               RECORD_NUMBER        ,
               DEBUG_DATA
        FROM RPT_POLICY_ISO_BO_STAT
        WHERE OUTPUT_SW = '1';



------------------------------------------------------------------------------------------------------------
    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_mssg :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
    END;

PROCEDURE Summarize_ISO_Osls_BO
IS

    v_procname      RPTVIEWER.LOAD_LOG.EVENT_ROUTINE%TYPE
                        := 'ND_BUREAU.Summarize_ISO_Osls_BO';
    v_err_mssg      VARCHAR2 (200);
    v_err_loc       VARCHAR2 (100);

BEGIN

    -- Insert into SUMM table, filtering out duplicate outstanding records.
    -- (Duplicates occur when the most recent run date includes multiple activities on the same reserve.)
    INSERT INTO RPT_CLAIMS_ISO_BO_STAT_SUMM
        SELECT DISTINCT
            a.COMPANY_ID            ,
            a.TRANSACTION_TYPE      ,
            a.ACT_DATE              ,
            a.INC_DATE              ,
            a.LOSS_DATE             ,
            a.STAT_PLAN_INDICATOR   ,
            a.STATE                 ,
            a.TERRITORY             ,
            a.TYPE_POLICY           ,
            a.ASL                   ,
            a.SUBLINE               ,
            a.CLASS_CODE            ,
            a.COVERAGE              ,
            a.RATING_ID             ,
            a.CONSTRUCTION          ,
            a.PROTECTION            ,
            --a.FILLER_41             ,
            a.DEDUCTIBLE            ,
            a.TERRORISM_COVERAGE    ,
            a.WIND_COVERAGE         ,
            a.BCEG                  ,
            a.RATING_BASIS          ,
            a.STATE_EXCEPTION       ,
            a.FILLER_52             ,
            a.LIABILITY_LIMITS      ,
            a.FILLER_59             ,
            a.FILLER_ISO            ,
            a.LIABILITY_FORM        ,
            a.CLAIMS_ENTRY_DATE     ,
            a.CLAIMS_NOTICE_DATE    ,
            a.LIABILITY_EXP_IND     ,
            a.FILLER_69             ,
            a.TYPE_OF_LOSS          ,
            a.CLAIM_COUNT           ,
            a.ZIP_CODE_FIRST_5      ,
            a.LESSOR_OCC_RISK_IND   ,
            a.FILLER_79             ,
            a.STATE_EXCEPTION_2     ,
            a.EXPOSURE              ,
            a.ZIP_CODE_LAST_4       ,
            a.YEAR_OF_CONSTRUCTION  ,
            a.LOSS_AMOUNT           ,
            a.OCCURRENCE_ID         ,
            a.CLAIM_ID              ,
            a.PREMIUM_RECORD_ID     ,
            b.RECORD_NUMBER         ,
            a.COV_CODE              ,
            a.DEBUG_DATA
        FROM RPT_CLAIMS_ISO_BO_STAT a
        INNER JOIN
          ( SELECT DISTINCT
                MAX(a.RECORD_NUMBER) AS RECORD_NUMBER,
                a.SUMM_ACTG_DATE,
                a.OCCURRENCE_ID,
                a.PREMIUM_RECORD_ID,
                a.COV_CODE
            FROM RPT_CLAIMS_ISO_BO_STAT a
            GROUP BY
                SUMM_ACTG_DATE,
                OCCURRENCE_ID,
                PREMIUM_RECORD_ID,
                COV_CODE
          ) b
        ON
                a.RECORD_NUMBER     = b.RECORD_NUMBER
            AND a.SUMM_ACTG_DATE    = b.SUMM_ACTG_DATE
            AND a.OCCURRENCE_ID     = b.OCCURRENCE_ID
            AND a.PREMIUM_RECORD_ID = b.PREMIUM_RECORD_ID
        WHERE a.TRANSACTION_TYPE = '7';

    COMMIT;


    --- Set claim count to 1 on outstanding records where there is not a corresponding paid record with a claim count of 1.
    UPDATE RPT_CLAIMS_ISO_BO_STAT_SUMM
        SET CLAIM_COUNT = 1
        WHERE RECORD_NUMBER IN
          ( SELECT MAX_RECORD_NUMBER FROM
              ( SELECT DISTINCT
                    MAX(RECORD_NUMBER) AS MAX_RECORD_NUMBER,
                    SUM(CLAIM_COUNT) AS SUM_CLAIM_COUNT,
                    OCCURRENCE_ID,
                    PREMIUM_RECORD_ID,
                    COVERAGE
                FROM RPT_CLAIMS_ISO_BO_STAT
                -- Mold losses are not counted as a separate claim, always require a claim count of zero.
                WHERE TYPE_OF_LOSS NOT IN ('63', '64', '65', '66', '67', '69', '68', '73', '74', '75', '76', '77', '79', '78', '09')
                GROUP BY
                    OCCURRENCE_ID,
                    PREMIUM_RECORD_ID,
                    COVERAGE
              )
            WHERE SUM_CLAIM_COUNT = 0
          );

    COMMIT;



------------------------------------------------------------------------------------------------------------
    EXCEPTION
        WHEN OTHERS
        THEN
            v_err_fl := 1;
            v_err_mssg :=
                'FAILED at:'
                || v_err_loc
                || '-'
                || SQLCODE
                || ':'
                || SQLERRM (SQLCODE);
            DBMS_OUTPUT.PUT_LINE (
                V_PROCNAME || V_ERR_MSSG);
            rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
    END;
   FUNCTION ISO_Signed_Number (v_num_in IN Number, v_Len in Number)  Return varchar2
IS
    v_temp      varchar2 (8);
    v_Unit_pos  varchar2 (1);

Begin

    If v_num_in < 0 then
        v_temp := trim(to_char(v_num_in * -1));
        v_Unit_pos := substr(v_temp, length(v_temp), 1);
        v_temp := substr(v_temp, 1, length(v_temp) - 1);
        case v_Unit_pos
            when '0' then v_temp := v_temp || '}';
            when '1' then v_temp := v_temp || 'J';
            when '2' then v_temp := v_temp || 'K';
            when '3' then v_temp := v_temp || 'L';
            when '4' then v_temp := v_temp || 'M';
            when '5' then v_temp := v_temp || 'N';
            when '6' then v_temp := v_temp || 'O';
            when '7' then v_temp := v_temp || 'P';
            when '8' then v_temp := v_temp || 'Q';
            when '9' then v_temp := v_temp || 'R';
        End Case;
        v_temp := lpad (trim(v_temp), v_len, '0');
    Else
        v_temp := lpad (trim(to_char(v_num_in)), v_len, '0');
    End If;

    Return v_temp;
End;

FUNCTION lu_State_Code (p_State_in in Varchar2)
      RETURN VARCHAR2
   IS
      v_return            VARCHAR2 (2);

      /*
      Author: D. O'Sullivan
      Date: 4/2/08
      Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
      Modifications
      -------------
      */

      -- debugging/exception variables
      v_procname          VARCHAR2 (20) := 'get_dbname';
      v_err_loc           VARCHAR2 (100);
      v_err_number        NUMBER;
      v_err_msg           VARCHAR2 (1500);
      v_start_date_time   DATE := SYSDATE;
   BEGIN

      Case p_state_in
         when 'AL' then v_return := '01';
         when 'AK' then v_return := '54';
         when 'AZ' then v_return := '02';
         when 'AR' then v_return := '03';
         when 'CA' then v_return := '04';
         when 'CO' then v_return := '05';
         when 'CT' then v_return := '06';
         when 'DE' then v_return := '07';
         when 'DC' then v_return := '08';
         when 'FL' then v_return := '09';
         when 'GA' then v_return := '10';
         when 'HI' then v_return := '52';
         when 'ID' then v_return := '11';
         when 'IL' then v_return := '12';
         when 'IN' then v_return := '13';
         when 'IA' then v_return := '14';
         when 'KS' then v_return := '15';
         when 'KY' then v_return := '16';
         when 'LA' then v_return := '17';
         when 'ME' then v_return := '18';
         when 'MD' then v_return := '19';
         when 'MA' then v_return := '20';
         when 'MI' then v_return := '21';
         when 'MN' then v_return := '22';
         when 'MS' then v_return := '23';
         when 'MO' then v_return := '23';
         when 'MT' then v_return := '25';
         when 'NE' then v_return := '26';
         when 'NV' then v_return := '27';
         when 'NH' then v_return := '28';
         when 'NJ' then v_return := '29';
         when 'NM' then v_return := '30';
         when 'NY' then v_return := '31';
         when 'NC' then v_return := '32';
         when 'ND' then v_return := '33';
         when 'OH' then v_return := '34';
         when 'OK' then v_return := '35';
         when 'OR' then v_return := '36';
         when 'PA' then v_return := '37';
         when 'RI' then v_return := '38';
         when 'SC' then v_return := '39';
         when 'SD' then v_return := '40';
         when 'TN' then v_return := '41';
         when 'TX' then v_return := '42';
         when 'UT' then v_return := '43';
         when 'VT' then v_return := '44';
         when 'VA' then v_return := '45';
         when 'WA' then v_return := '46';
         when 'WV' then v_return := '47';
         when 'WI' then v_return := '48';
         when 'WY' then v_return := '49';
         when 'PR' then v_return := '58';
         else v_return := '  ';
      END CASE;

      RETURN v_return;
   ------------------------------------------------------------------------------------------------------------
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_number := SQLCODE;
         v_err_msg := SQLERRM (SQLCODE);
         v_err_msg :=
               'FAILED: '
            || v_err_number
            || ' * '
            || v_err_loc
            || ' * '
            || v_err_msg;
         DBMS_OUTPUT.put_line (v_err_msg);
         RETURN v_err_msg;
   END lu_State_Code;

Function ISO_Date_Conv (v_date_in in Date, v_ISO_Format_in  in VarChar2) Return VarChar2
is
    v_Date_Out      Varchar2 (3);
    v_temp_month    Varchar2 (2);

Begin

    If v_ISO_Format_in = 'MY' then
   ---  VARCHAR2(2)  format one char Month- one char Year (MY);
        Case v_quarter_run
            WHEN 1 then v_Date_out := '3';
            WHEN 2 then v_Date_out := '6';
            WHEN 3 then v_Date_out := '9';
            WHEN 4 then v_Date_out := '&';
        END CASE;
        v_Date_out := v_Date_out || substr( to_char(v_year_run),Length(to_char(v_year_run)), 1);
    End if;

    If v_ISO_Format_in = 'MYY' then
    --- VARCHAR2(3) - format one char Month- two char Year (MYY);
        v_temp_month := lpad(to_char(extract( Month from v_date_in)), 2, '0');
        If to_number(v_temp_month) > 10 then
            Case to_number(v_temp_month)
---                WHEN < 11 then v_Date_out := substr(v_temp_month, 2, 1);
                WHEN 11 then v_Date_out := '-';
                WHEN 12 then v_Date_out := '&';
            END CASE;
        Else
            v_Date_out := substr(v_temp_month, 2, 1);
        End If;
        v_Date_out := v_Date_out || substr( to_char(extract( YEAR from v_date_in)),(Length(to_char(extract( YEAR from v_date_in))) - 1), 2);
    End if;
    RETURN v_Date_out;
End;

FUNCTION FixBOPClass (
                      v_BUILD_TYPE      IN      VARCHAR2,
                      v_OCCUPANCY       IN      VARCHAR2,
                      v_COVERAGE_CODE   IN      VARCHAR2
                      )

    RETURN VARCHAR2
    IS
        v_return_class      VARCHAR2(5);


        /*
        Author: D. O'Sullivan
        Date: 4/2/08
        Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
        Modifications
        -------------
        */

        -- debugging/exception variables
        v_procname          VARCHAR2 (20) := 'get_dbname';
        v_err_loc           VARCHAR2 (100);
        v_err_number        NUMBER;
        v_err_msg           VARCHAR2 (1500);
        v_start_date_time   DATE := SYSDATE;


--- --- ---

    BEGIN
        v_err_loc := 'FixBOPClass';


        v_return_class := '59999';

-----------------------------------------------------------------
--- Building Type with default class code when blank.
---    A = Apartment                        "65146"
---    B = Contractor's Compak              "74161"
---    C = Condo Association - Residential  "69145"
---    D = Bed & Breakfast                  "69161"
---    E = Condo Association - Commercial   "60989"
---    F = Restaurant Fast Food             "09201"
---    G = Restaurant Find Dining           "09431"
---    L = Restaurant Limited Cooking       "09011"
---    M = Mercantile  (Tennant) "59999" OR "59994"
---    O = Office        (Condo) "65231" OR "65171"
---    P = Processing Service               "71952"
---    R = Restaurant Casual Dining         "09611"
---    S = Office Condo                     "60999"
---    T = Motel (NOT USED)                 "     "
---    U = Condo Office Unit Owner          "65231"
---    W = Wholesaler                       "50741"
---    X = Mixed                            "59999"
---    Y = Self-Storage Facility            "09411"
-----------------------------------------------------------------


        IF v_BUILD_TYPE = 'A' THEN
            v_return_class := '65146';
        END IF;

        IF v_BUILD_TYPE = 'B' THEN
            v_return_class := '74161';
        END IF;

        IF v_BUILD_TYPE = 'C' THEN
            v_return_class := '69145';
        END IF;

        IF v_BUILD_TYPE = 'D' THEN
            v_return_class := '69161';
        END IF;

        IF v_BUILD_TYPE = 'E' THEN
            v_return_class := '60989';
        END IF;

        IF v_BUILD_TYPE = 'F' THEN
            v_return_class := '09201';
        END IF;

        IF v_BUILD_TYPE = 'G' THEN
            v_return_class := '09431';
        END IF;

        IF v_BUILD_TYPE = 'L' THEN
            v_return_class := '09011';
        END IF;

        IF v_BUILD_TYPE = 'M' THEN
            IF v_OCCUPANCY = 'T' THEN
                v_return_class := '59999';
            ELSE
                v_return_class := '59994';
            END IF;
        END IF;

        IF v_BUILD_TYPE = 'O' THEN
            IF v_COVERAGE_CODE = '810' THEN
                v_return_class := '65231';
            ELSE
                v_return_class := '65171';
            END IF;
        END IF;

        IF v_BUILD_TYPE = 'P' THEN
            v_return_class := '71952';
        END IF;

        IF v_BUILD_TYPE = 'R' THEN
            v_return_class := '09611';
        END IF;

        IF v_BUILD_TYPE = 'S' THEN
            v_return_class := '60999';
        END IF;

        IF v_BUILD_TYPE = 'U' THEN
            v_return_class := '65231';
        END IF;

        IF v_BUILD_TYPE = 'W' THEN
            v_return_class := '50741';
        END IF;

        IF v_BUILD_TYPE = 'X' THEN
            v_return_class := '59999';
        END IF;

        IF v_BUILD_TYPE = 'Y' THEN
            v_return_class := '09411';
        END IF;


        RETURN v_return_class;


--- --- ---

 EXCEPTION
    WHEN OTHERS
    THEN
        v_err_number := SQLCODE;
        v_err_msg := SQLERRM (SQLCODE);
        v_err_msg :=
               'FAILED: '
            || v_err_number
            || ' * '
            || v_err_loc
            || ' * '
            || v_err_msg;
        DBMS_OUTPUT.put_line (v_err_msg);
        RETURN v_err_msg;
 END FixBOPClass;
FUNCTION Get_BOP335_Coverage (
                            v_POLICY_NUMBER     IN      VARCHAR2,
                            v_EFF_DATE          IN      DATE,
                            v_EXP_DATE          IN      DATE,
                            v_ACT_DATE          IN      DATE
                            )

    RETURN VARCHAR2
    IS
        v_return_coverage        VARCHAR2(2);

--- ----------------------------------------------------------------------------------------------------------------

        CURSOR coverage_master
        IS
            SELECT DISTINCT c.cov_code, sum(c.cov_prem) as total

              FROM staging.history_wang_policy p,
                   staging.history_wang_coverage_record c

             WHERE
                    c.mast_id    =  '4'
                AND c.rec_id     =  '5'
                AND c.pol_num    =  v_POLICY_NUMBER
                AND c.sds_line  IN ('75', '76', '77')
                AND c.item_seq  <>  999
                AND c.cov_code  IN ('810', '811')

                AND p.pol_num = c.pol_num
                AND p.run_date = c.run_date

                AND p.eff_date = v_EFF_DATE
                AND p.exp_date = v_EXP_DATE
                AND p.run_date = (SELECT MAX(p1.run_date)
                                    FROM staging.history_wang_policy p1,
                                         staging.history_wang_coverage_record c1
                                   WHERE
                                        c1.mast_id    =  '4'
                                    AND c1.rec_id     =  '5'
                                    AND c1.pol_num    =  v_POLICY_NUMBER
                                    AND c1.sds_line  IN ('75', '76', '77')
                                    AND c1.item_seq  <>  999
                                    AND c1.cov_code  IN ('810', '811')

                                    AND p1.pol_num = c1.pol_num
                                    AND p1.run_date = c1.run_date

                                    AND p1.eff_date = v_EFF_DATE
                                    AND p1.exp_date = v_EXP_DATE
                                    AND p1.run_date <= v_ACT_DATE
                                  )
            GROUP BY c.cov_code
            ORDER BY c.cov_code;


        coverage_rec        coverage_master%ROWTYPE;

--- ----------------------------------------------------------------------------------------------------------------

        /*
        Author: D. O'Sullivan
        Date: 4/2/08
        Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
        Modifications
        -------------
        */

        -- debugging/exception variables
        v_procname          VARCHAR2 (20) := 'get_dbname';
        v_err_loc           VARCHAR2 (100);
        v_err_number        NUMBER;
        v_err_msg           VARCHAR2 (1500);
        v_start_date_time   DATE := SYSDATE;

--- ----------------------------------------------------------------------------------------------------------------


        -- Procedural variables
        v_810_total     NUMBER;
        v_811_total     NUMBER;


    BEGIN
        v_err_loc := 'Get_BOP335_Coverage';

        OPEN coverage_master;

        v_810_total := 0;
        v_811_total := 0;

        v_return_coverage := '19';


        LOOP

            FETCH coverage_master INTO coverage_rec;
            EXIT WHEN coverage_master%NOTFOUND;

            IF coverage_rec.cov_code = '810' THEN
                v_810_total := coverage_rec.total;
            END IF;

            IF coverage_rec.cov_code = '811' THEN
                v_811_total := coverage_rec.total;
            END IF;

        END LOOP;


        IF (v_810_total <> 0) OR (v_811_total <> 0) THEN

            IF v_810_total > v_811_total THEN
                v_return_coverage := '23';
            END IF;

            IF v_810_total < v_811_total THEN
                v_return_coverage := '24';
            END IF;

        END IF;


        RETURN v_return_coverage;


--- ----------------------------------------------------------------------------------------------------------------

EXCEPTION
   WHEN OTHERS
   THEN
      v_err_number := SQLCODE;
      v_err_msg := SQLERRM (SQLCODE);
      v_err_msg :=
            'FAILED: '
         || v_err_number
         || ' * '
         || v_err_loc
         || ' * '
         || v_err_msg;
      DBMS_OUTPUT.put_line (v_err_msg);
      RETURN v_err_msg;

--- ----------------------------------------------------------------------------------------------------------------

END Get_BOP335_Coverage;
FUNCTION Get_BOP335_Protection (
                              v_POLICY_NUMBER     IN      VARCHAR2,
                              v_EFF_DATE          IN      DATE,
                              v_EXP_DATE          IN      DATE,
                              v_ACT_DATE          IN      DATE
                              )

    RETURN VARCHAR2
    IS
        v_return_protection        VARCHAR2(2);

--- ----------------------------------------------------------------------------------------------------------------

        CURSOR item_master
        IS
            SELECT c.CLASS_COV_A

              FROM staging.history_wang_policy p,
                   staging.history_wang_item c

             WHERE
                    c.mast_id           =   '4'
                AND c.rec_id            =   '4'
                AND c.pol_num           =   v_POLICY_NUMBER
                AND c.sds_line          =   '75'

                AND p.pol_num = c.pol_num
                AND p.run_date = c.run_date

                AND p.eff_date = v_EFF_DATE
                AND p.exp_date = v_EXP_DATE
                AND p.run_date <= v_ACT_DATE

            ORDER BY
                     c.run_date desc,
                     c.item_seq asc;

        item_rec            item_master%ROWTYPE;

--- ----------------------------------------------------------------------------------------------------------------

        /*
        Author: D. O'Sullivan
        Date: 4/2/08
        Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
        Modifications
        -------------
        */

        -- debugging/exception variables
        v_procname          VARCHAR2 (20) := 'get_dbname';
        v_err_loc           VARCHAR2 (100);
        v_err_number        NUMBER;
        v_err_msg           VARCHAR2 (1500);
        v_start_date_time   DATE := SYSDATE;

--- ----------------------------------------------------------------------------------------------------------------

    BEGIN
        v_err_loc := 'Get_BOP335_Protection';
        v_return_protection := '  ';

        OPEN item_master;

        FETCH item_master INTO item_rec;

        --Use most recent value from first available item, if found.
        IF NOT item_master%NOTFOUND THEN
            v_return_protection := NVL(item_rec.CLASS_COV_A, '  ');
        END IF;

        RETURN v_return_protection;


--- ----------------------------------------------------------------------------------------------------------------

EXCEPTION
   WHEN OTHERS
   THEN
      v_err_number := SQLCODE;
      v_err_msg := SQLERRM (SQLCODE);
      v_err_msg :=
            'FAILED: '
         || v_err_number
         || ' * '
         || v_err_loc
         || ' * '
         || v_err_msg;
      DBMS_OUTPUT.put_line (v_err_msg);
      RETURN v_err_msg;

--- ----------------------------------------------------------------------------------------------------------------

END Get_BOP335_Protection;
FUNCTION Get_BOP_Protection (
                              v_POLICY_NUMBER     IN      VARCHAR2,
                              v_ITEM_NUM          IN      NUMBER,
                              v_EFF_DATE          IN      DATE,
                              v_EXP_DATE          IN      DATE,
                              v_ACT_DATE          IN      DATE
                             )

    RETURN VARCHAR2
    IS
        v_return_protection        VARCHAR2(2);

--- ----------------------------------------------------------------------------------------------------------------

        CURSOR item_master
        IS
            SELECT c.CLASS_COV_A

              FROM staging.history_wang_policy p,
                   staging.history_wang_item c

             WHERE
                    c.mast_id           =   '4'
                AND c.rec_id            =   '4'
                AND c.pol_num           =   v_POLICY_NUMBER
                AND c.sds_line          =   '75'
                AND c.location          =   Get_BOP_Location(v_POLICY_NUMBER, v_ITEM_NUM, v_EFF_DATE, v_EXP_DATE, v_ACT_DATE)

                AND p.pol_num = c.pol_num
                AND p.run_date = c.run_date

                AND p.eff_date = v_EFF_DATE
                AND p.exp_date = v_EXP_DATE
                AND p.run_date <= v_ACT_DATE

            ORDER BY
                     c.run_date desc;

        item_rec            item_master%ROWTYPE;

--- ----------------------------------------------------------------------------------------------------------------

        /*
        Author: D. O'Sullivan
        Date: 4/2/08
        Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
        Modifications
        -------------
        */

        -- debugging/exception variables
        v_procname          VARCHAR2 (20) := 'get_dbname';
        v_err_loc           VARCHAR2 (100);
        v_err_number        NUMBER;
        v_err_msg           VARCHAR2 (1500);
        v_start_date_time   DATE := SYSDATE;

--- ----------------------------------------------------------------------------------------------------------------

    BEGIN
        v_err_loc := 'Get_BOP_Protection';
        v_return_protection := '  ';

        OPEN item_master;

        FETCH item_master INTO item_rec;

        --Use value from most recent record, if found.
        IF NOT item_master%NOTFOUND THEN
            v_return_protection := NVL(item_rec.CLASS_COV_A, '  ');
        END IF;

        RETURN v_return_protection;


--- ----------------------------------------------------------------------------------------------------------------

EXCEPTION
   WHEN OTHERS
   THEN
      v_err_number := SQLCODE;
      v_err_msg := SQLERRM (SQLCODE);
      v_err_msg :=
            'FAILED: '
         || v_err_number
         || ' * '
         || v_err_loc
         || ' * '
         || v_err_msg;
      DBMS_OUTPUT.put_line (v_err_msg);
      RETURN v_err_msg;

--- ----------------------------------------------------------------------------------------------------------------

END Get_BOP_Protection;
FUNCTION Get_BOP_Location (
                              v_POLICY_NUMBER     IN      VARCHAR2,
                              v_ITEM_NUM          IN      NUMBER,
                              v_EFF_DATE          IN      DATE,
                              v_EXP_DATE          IN      DATE,
                              v_ACT_DATE          IN      DATE
                              )

    RETURN VARCHAR2
    IS
        v_return_location        VARCHAR2(3);

--- ----------------------------------------------------------------------------------------------------------------

        CURSOR item_master
        IS
            SELECT c.LOCATION

              FROM staging.history_wang_policy p,
                   staging.history_wang_item c

             WHERE
                    c.mast_id           =   '4'
                AND c.rec_id            =   '4'
                AND c.pol_num           =   v_POLICY_NUMBER
                AND c.item_seq          =   v_ITEM_NUM

                AND p.pol_num = c.pol_num
                AND p.run_date = c.run_date

                AND p.eff_date = v_EFF_DATE
                AND p.exp_date = v_EXP_DATE
                AND p.run_date <= v_ACT_DATE

            ORDER BY
                     c.run_date desc;

        item_rec            item_master%ROWTYPE;

--- ----------------------------------------------------------------------------------------------------------------

        /*
        Author: D. O'Sullivan
        Date: 4/2/08
        Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
        Modifications
        -------------
        */

        -- debugging/exception variables
        v_procname          VARCHAR2 (20) := 'get_dbname';
        v_err_loc           VARCHAR2 (100);
        v_err_number        NUMBER;
        v_err_msg           VARCHAR2 (1500);
        v_start_date_time   DATE := SYSDATE;

--- ----------------------------------------------------------------------------------------------------------------

    BEGIN
        v_err_loc := 'Get_BOP_Location';
        v_return_location := '   ';

        OPEN item_master;

        FETCH item_master INTO item_rec;

        --Use value from most recent record, if found.
        IF NOT item_master%NOTFOUND THEN
            v_return_location := NVL(item_rec.LOCATION, '   ');
        END IF;

        RETURN v_return_location;


--- ----------------------------------------------------------------------------------------------------------------

EXCEPTION
   WHEN OTHERS
   THEN
      v_err_number := SQLCODE;
      v_err_msg := SQLERRM (SQLCODE);
      v_err_msg :=
            'FAILED: '
         || v_err_number
         || ' * '
         || v_err_loc
         || ' * '
         || v_err_msg;
      DBMS_OUTPUT.put_line (v_err_msg);
      RETURN v_err_msg;

--- ----------------------------------------------------------------------------------------------------------------

END Get_BOP_Location;

--- ----------------------------------------------------------------------------------------------------------------

FUNCTION Get_BOP_Deductible_TEMP ( i_POLICY_NUMBER IN VARCHAR2,
                                   i_EFF_DATE      IN DATE,
                                   i_ITEM_SEQ      IN VARCHAR2,
                                   i_COV_CODE      IN VARCHAR2,
                                   i_ACT_DATE      IN DATE,
                                   i_OLD_NEW       IN VARCHAR2 )

    RETURN NUMBER
    IS
        v_DEDUCTIBLE        NUMBER(5);

--- --- ---

    CURSOR cov_master
    IS
        select p.pol_num, p.eff_date, p.run_date, c.cov_code, c.item_seq, c.cov_ded_amt
        from staging.history_wang_policy p
        left join staging.history_wang_coverage_record c
        on c.pol_num = p.pol_num and c.run_date = p.run_date
        where TRIM(p.pol_num) = i_POLICY_NUMBER
          and p.eff_date = i_EFF_DATE
          and c.item_seq = i_ITEM_SEQ
          and c.cov_code = i_COV_CODE
          and p.run_date <= ( select max(run_date)
                              from staging.history_wang_policy
                              where pol_num = i_POLICY_NUMBER
                                and run_date <= i_ACT_DATE )
        order by c.run_date desc;


    cov_rec         cov_master%ROWTYPE;

--- --- ---

        /*
        Author: D. O'Sullivan
        Date: 4/2/08
        Overview: Get the current database name.  Used by procs for change control messaging, error handling, etc...
        Modifications
        -------------
        */

        -- debugging/exception variables
        v_procname          VARCHAR2 (20) := 'get_dbname';
        v_err_loc           VARCHAR2 (100);
        v_err_number        NUMBER;
        v_err_msg           VARCHAR2 (1500);
        v_start_date_time   DATE := SYSDATE;

--- --- ---

    BEGIN
        v_err_loc := 'Get_BOP_Deductible_TEMP';
        v_DEDUCTIBLE := 0;

        OPEN cov_master;

        FETCH cov_master INTO cov_rec;

        --Offset records require previous deductible.
        IF i_OLD_NEW = '0' AND NOT cov_master%NOTFOUND THEN
            FETCH cov_master INTO cov_rec;
        END IF;

        IF cov_master%NOTFOUND THEN
            v_DEDUCTIBLE := -1;
        ELSE
            v_DEDUCTIBLE := cov_rec.cov_ded_amt;
        END IF;

        RETURN v_DEDUCTIBLE;

--- --- ---

EXCEPTION
   WHEN OTHERS
   THEN
      v_err_number := SQLCODE;
      v_err_msg := SQLERRM (SQLCODE);
      v_err_msg :=
            'FAILED: '
         || v_err_number
         || ' * '
         || v_err_loc
         || ' * '
         || v_err_msg;
      DBMS_OUTPUT.put_line (v_err_msg);
      RETURN v_err_msg;

--- --- ---

END Get_BOP_Deductible_TEMP;

--- ----------------------------------------------------------------------------------------------------------------
   PROCEDURE write_fixed_file_ISO_LOZ (p_type           IN     VARCHAR2,
                                   p_out_paid       IN     VARCHAR2,
                                   p_loss_exp       IN     VARCHAR2,
                                   p_query          IN     VARCHAR2,  ---Must order by Company_ID first...
                                   p_dir            IN     VARCHAR2,
                                   p_filename       IN     VARCHAR2,
                                   p_fopen_fl       IN     VARCHAR2,
                                   p_max_linesize   IN     NUMBER,
                                   p_quarter        IN     NUMBER,
                                   p_year           IN     NUMBER,
                                   p_module         IN     VARCHAR2,
                                   p_stat_type      IN     VARCHAR2,
                                   v_numRecs           OUT NUMBER,
                                   v_total_amount       OUT NUMBER)
   IS
      f1                   UTL_FILE.file_type;
      v_cursor             INTEGER DEFAULT DBMS_SQL.open_cursor;
      v_colVal             VARCHAR2 (4000);
      v_rc                 INTEGER;
      v_colCnt             NUMBER DEFAULT 0;

      v_out_rec            LONG;

      v_tab                VARCHAR2 (1) := CHR (9);
      v_crlf               VARCHAR2 (2) := CHR (13) || CHR (10); -- 'ODOA' CR/LF
      v_cr                 VARCHAR2 (2) := CHR (13);                -- 'OD' CR
      tbl_Column           DBMS_SQL.desc_tab;

      -- debugging/exception variables
      v_procname           VARCHAR2 (24) := 'write_fixed_file_ISO_loz';
      v_err_mssg           VARCHAR2 (200);
      v_err_loc            VARCHAR2 (100);
      v_prem_amt_char      VARCHAR2 (8);
      v_prem_amt_sign      VARCHAR2 (1);
      v_prem_amt_lst_chr   VARCHAR (1);
      recs                 NUMBER := 0;
      v_tot_prem_out       NUMBER := 0;
      v_prem_out           NUMBER := 0;
      v_month              VARCHAR2 (1);
      v_tot_num_out        NUMBER := 0;
      v_tot_amt_1          NUMBER := 0;
      v_tot_amt_2          NUMBER := 0;
      v_tot_amt_3          NUMBER := 0;
      v_1Char_Month        VARCHAR2 (1);
      v_2Char_Month        VARCHAR2 (2);
      v_company_hold       VARCHAR2 (4) := '';

   BEGIN
      f1 :=
         UTL_FILE.fopen (p_dir,
                         p_filename,
                         p_fopen_fl,
                         p_max_linesize);

      DBMS_SQL.parse (v_cursor, p_query, DBMS_SQL.native);
      DBMS_SQL.describe_columns (v_cursor, v_colCnt, tbl_Column);
      case p_quarter
         when '1' then
            v_2Char_Month := '03';
            v_1Char_Month := '3';
         when '2' then
            v_2Char_Month := '06';
            v_1Char_Month := '6';
         when '3' then
            v_2Char_Month := '09';
            v_1Char_Month := '9';
         when '4' then
            v_2Char_Month := '12';
            v_1Char_Month := '&';
      END Case;

      case p_quarter
          when '1' then v_1Char_Month := '3';
          when '2' then v_1Char_Month := '6';
          when '3' then v_1Char_Month := '9';
          when '4' then v_1Char_Month := '&';
      END Case;

      FOR i IN 1 .. v_colCnt
      LOOP
         DBMS_SQL.define_column (v_cursor,
                                 i,
                                 v_colVal,
                                 4000);

         IF (tbl_Column (i).col_type = 2)                        --number type
         THEN
            tbl_Column (i).col_max_len := tbl_Column (i).col_precision + 2;
         ELSIF (tbl_Column (i).col_type = 12)                     -- date type
         THEN
            -- length of date format
            tbl_Column (i).col_max_len := 20;
         ELSIF (tbl_Column (i).col_Type = 8)                      -- LONG type
         THEN
            tbl_Column (i).col_max_len := 2000;
         END IF;
      END LOOP;

      v_rc := DBMS_SQL.execute (v_cursor);
      IF p_fopen_fl = 'W' then
          v_Company_Hold := 0;
          v_out_rec := 'TL570901'|| v_2Char_Month || substr(p_year, 3, 2) || p_stat_type || '101                                                     E                                                                                 ' || v_CR;
          UTL_FILE.put_line (f1, v_out_rec);
      END IF;

      LOOP  --- Loop for Each Record
         EXIT WHEN (DBMS_SQL.fetch_rows (v_cursor) <= 0);

         DBMS_SQL.COLUMN_VALUE (v_cursor, 1, v_colVal);

         v_out_rec := NULL;

         FOR i IN 1 .. v_colCnt
         LOOP  --- Loop for Each Field in the record
            DBMS_SQL.COLUMN_VALUE (v_cursor, i, v_colVal);

               --- Filter out columns required for processing that do not get reported.
               --- Convert specific columns to required format for reporting.
               IF tbl_Column (i).col_name <> 'SUM_REC_COUNT'
                    and tbl_Column (i).col_name <> 'EXP_SWITCH'
                    and tbl_Column (i).col_name <> 'TRANS_DATE'
                    and tbl_Column (i).col_name <> 'TRANS_CODE'
                    and tbl_Column (i).col_name <> 'OLD_NEW_SW'
                    and tbl_Column (i).col_name <> 'RECORD_NUMBER'
                    and tbl_Column (i).col_name <> 'RECORD_ID'
                    and tbl_Column (i).col_name <> 'DEBUG_DATA'
                    and tbl_Column (i).col_name <> 'COV_CODE'
                    and tbl_Column (i).col_name <> 'SUMM_ACTG_DATE'
                    THEN
                   IF tbl_Column (i).col_name = 'ACCOUNTING_DATE' THEN
                      v_out_rec := v_out_rec || RPAD (NVL (v_end_actg_qtr, ' '), 4);
                   ELSE
                         IF    tbl_Column (i).col_name = 'PREM_AMOUNT'
                            OR tbl_Column (i).col_name = 'ALAE'
                            OR tbl_Column (i).col_name = 'LOSS_AMOUNT'
                         THEN
                            v_tot_amt_1 := v_tot_amt_1 + v_colVal;
                            v_out_rec := v_out_rec || ISO_Signed_Number(v_colVal, 8);
                         ELSE
                            v_out_rec := v_out_rec || RPAD (NVL (v_colVal, ' '),  tbl_Column (i).col_max_len);
                         END IF;
                   END IF;
               End If;
         END LOOP;

         DBMS_OUTPUT.PUT_LINE ('v_out_rec ' || v_out_rec);
         -- this replaces carriage return with spaces

         --  v_out_rec := REPLACE (v_out_rec, v_crlf, '  ');  chr (13) char(10); OD OA
         --  v_out_rec := v_out_rec || v_crlf;
         v_out_rec := v_out_rec || v_cr;                         --'chr(13) OD
         UTL_FILE.put_line (f1, v_out_rec);
         recs := recs + 1;
      END LOOP;

      v_out_rec := 'SC' || p_module || '5709' || v_1Char_Month || substr(p_year, 4, 1) || p_stat_type || '101' || lpad (trim(to_char(v_tot_amt_1)), 10, '0') || lpad (trim(to_char(recs)), 9, '0') || '                                                                                                                     ' || v_cr;
      UTL_FILE.put_line (f1, v_out_rec);

      DBMS_SQL.close_cursor (v_cursor);
      UTL_FILE.fclose (f1);
      v_numRecs := recs;
      v_total_amount := v_tot_amt_1;

   EXCEPTION
      WHEN OTHERS
      THEN
         v_err_fl := 1;
         v_err_MSSG :=
               'FAILED at:'
            || v_err_loc
            || '-'
            || SQLCODE
            || ':'
            || SQLERRM (SQLCODE);

         DBMS_OUTPUT.PUT_LINE (V_PROCNAME || V_ERR_MSSG);
         rptviewer.rpt_util.write_error (V_PROCNAME, V_ERR_MSSG);
   END;

END nd_bureau_ISO_CSPI;
/
